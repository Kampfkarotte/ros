// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "ProjectionMatrix.pypp.hpp"

namespace bp = boost::python;

std::string __str__(::ompl::base::ProjectionMatrix* obj)
{
    std::ostringstream s;
    obj->print(s);
    return s.str();
}

void register_ProjectionMatrix_class(){

    { //::ompl::base::ProjectionMatrix
        typedef bp::class_< ompl::base::ProjectionMatrix > ProjectionMatrix_exposer_t;
        ProjectionMatrix_exposer_t ProjectionMatrix_exposer = ProjectionMatrix_exposer_t( "ProjectionMatrix" );
        bp::scope ProjectionMatrix_scope( ProjectionMatrix_exposer );
        { //::ompl::base::ProjectionMatrix::ComputeRandom
        
            typedef ::boost::numeric::ublas::matrix< double, boost::numeric::ublas::basic_row_major< unsigned long, long >, boost::numeric::ublas::unbounded_array< double, std::allocator< double > > > ( *ComputeRandom_function_type )( unsigned int const,unsigned int const,::std::vector< double > const & );
            
            ProjectionMatrix_exposer.def( 
                "ComputeRandom"
                , ComputeRandom_function_type( &::ompl::base::ProjectionMatrix::ComputeRandom )
                , ( bp::arg("from"), bp::arg("to"), bp::arg("scale") ) );
        
        }
        { //::ompl::base::ProjectionMatrix::ComputeRandom
        
            typedef ::boost::numeric::ublas::matrix< double, boost::numeric::ublas::basic_row_major< unsigned long, long >, boost::numeric::ublas::unbounded_array< double, std::allocator< double > > > ( *ComputeRandom_function_type )( unsigned int const,unsigned int const );
            
            ProjectionMatrix_exposer.def( 
                "ComputeRandom"
                , ComputeRandom_function_type( &::ompl::base::ProjectionMatrix::ComputeRandom )
                , ( bp::arg("from"), bp::arg("to") ) );
        
        }
        { //::ompl::base::ProjectionMatrix::computeRandom
        
            typedef void ( ::ompl::base::ProjectionMatrix::*computeRandom_function_type)( unsigned int const,unsigned int const,::std::vector< double > const & ) ;
            
            ProjectionMatrix_exposer.def( 
                "computeRandom"
                , computeRandom_function_type( &::ompl::base::ProjectionMatrix::computeRandom )
                , ( bp::arg("from"), bp::arg("to"), bp::arg("scale") ) );
        
        }
        { //::ompl::base::ProjectionMatrix::computeRandom
        
            typedef void ( ::ompl::base::ProjectionMatrix::*computeRandom_function_type)( unsigned int const,unsigned int const ) ;
            
            ProjectionMatrix_exposer.def( 
                "computeRandom"
                , computeRandom_function_type( &::ompl::base::ProjectionMatrix::computeRandom )
                , ( bp::arg("from"), bp::arg("to") ) );
        
        }
        { //::ompl::base::ProjectionMatrix::project
        
            typedef void ( ::ompl::base::ProjectionMatrix::*project_function_type)( double const *,::ompl::base::EuclideanProjection & ) const;
            
            ProjectionMatrix_exposer.def( 
                "project"
                , project_function_type( &::ompl::base::ProjectionMatrix::project )
                , ( bp::arg("from"), bp::arg("to") ) );
        
        }
        ProjectionMatrix_exposer.def_readwrite( "mat", &ompl::base::ProjectionMatrix::mat );
        ProjectionMatrix_exposer.staticmethod( "ComputeRandom" );
        ProjectionMatrix_exposer.def("__str__", &__str__);
    }

}
