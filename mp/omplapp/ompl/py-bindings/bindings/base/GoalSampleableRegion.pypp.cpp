// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "GoalSampleableRegion.pypp.hpp"

namespace bp = boost::python;

struct GoalSampleableRegion_wrapper : ompl::base::GoalSampleableRegion, bp::wrapper< ompl::base::GoalSampleableRegion > {

    GoalSampleableRegion_wrapper(::ompl::base::SpaceInformationPtr const & si )
    : ompl::base::GoalSampleableRegion( si )
      , bp::wrapper< ompl::base::GoalSampleableRegion >(){
        // constructor
    
    }

    virtual bool couldSample(  ) const  {
        if( bp::override func_couldSample = this->get_override( "couldSample" ) )
            return func_couldSample(  );
        else{
            return this->ompl::base::GoalSampleableRegion::couldSample(  );
        }
    }
    
    bool default_couldSample(  ) const  {
        return ompl::base::GoalSampleableRegion::couldSample( );
    }

    virtual unsigned int maxSampleCount(  ) const {
        bp::override func_maxSampleCount = this->get_override( "maxSampleCount" );
        return func_maxSampleCount(  );
    }

    virtual void sampleGoal( ::ompl::base::State * st ) const {
        bp::override func_sampleGoal = this->get_override( "sampleGoal" );
        func_sampleGoal( boost::python::ptr(st) );
    }

    virtual double distanceGoal( ::ompl::base::State const * st ) const {
        bp::override func_distanceGoal = this->get_override( "distanceGoal" );
        return func_distanceGoal( boost::python::ptr(st) );
    }

    virtual bool isSatisfied( ::ompl::base::State const * st ) const  {
        if( bp::override func_isSatisfied = this->get_override( "isSatisfied" ) )
            return func_isSatisfied( boost::python::ptr(st) );
        else{
            return this->ompl::base::GoalRegion::isSatisfied( boost::python::ptr(st) );
        }
    }
    
    bool default_isSatisfied( ::ompl::base::State const * st ) const  {
        return ompl::base::GoalRegion::isSatisfied( boost::python::ptr(st) );
    }

    virtual bool isSatisfied( ::ompl::base::State const * st, double * distance ) const  {
        if( bp::override func_isSatisfied = this->get_override( "isSatisfied" ) )
            return func_isSatisfied( boost::python::ptr(st), distance );
        else{
            return this->ompl::base::GoalRegion::isSatisfied( boost::python::ptr(st), distance );
        }
    }
    
    bool default_isSatisfied( ::ompl::base::State const * st, double * distance ) const  {
        return ompl::base::GoalRegion::isSatisfied( boost::python::ptr(st), distance );
    }

    virtual bool isStartGoalPairValid( ::ompl::base::State const * arg0, ::ompl::base::State const * arg1 ) const  {
        if( bp::override func_isStartGoalPairValid = this->get_override( "isStartGoalPairValid" ) )
            return func_isStartGoalPairValid( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        else{
            return this->ompl::base::Goal::isStartGoalPairValid( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        }
    }
    
    bool default_isStartGoalPairValid( ::ompl::base::State const * arg0, ::ompl::base::State const * arg1 ) const  {
        return ompl::base::Goal::isStartGoalPairValid( boost::python::ptr(arg0), boost::python::ptr(arg1) );
    }

};

void register_GoalSampleableRegion_class(){

    { //::ompl::base::GoalSampleableRegion
        typedef bp::class_< GoalSampleableRegion_wrapper, bp::bases< ompl::base::GoalRegion >, boost::noncopyable > GoalSampleableRegion_exposer_t;
        GoalSampleableRegion_exposer_t GoalSampleableRegion_exposer = GoalSampleableRegion_exposer_t( "GoalSampleableRegion", bp::init< ompl::base::SpaceInformationPtr const & >(( bp::arg("si") )) );
        bp::scope GoalSampleableRegion_scope( GoalSampleableRegion_exposer );
        { //::ompl::base::GoalSampleableRegion::canSample
        
            typedef bool ( ::ompl::base::GoalSampleableRegion::*canSample_function_type)(  ) const;
            
            GoalSampleableRegion_exposer.def( 
                "canSample"
                , canSample_function_type( &::ompl::base::GoalSampleableRegion::canSample ) );
        
        }
        { //::ompl::base::GoalSampleableRegion::couldSample
        
            typedef bool ( ::ompl::base::GoalSampleableRegion::*couldSample_function_type)(  ) const;
            typedef bool ( GoalSampleableRegion_wrapper::*default_couldSample_function_type)(  ) const;
            
            GoalSampleableRegion_exposer.def( 
                "couldSample"
                , couldSample_function_type(&::ompl::base::GoalSampleableRegion::couldSample)
                , default_couldSample_function_type(&GoalSampleableRegion_wrapper::default_couldSample) );
        
        }
        { //::ompl::base::GoalSampleableRegion::maxSampleCount
        
            typedef unsigned int ( ::ompl::base::GoalSampleableRegion::*maxSampleCount_function_type)(  ) const;
            
            GoalSampleableRegion_exposer.def( 
                "maxSampleCount"
                , bp::pure_virtual( maxSampleCount_function_type(&::ompl::base::GoalSampleableRegion::maxSampleCount) ) );
        
        }
        { //::ompl::base::GoalSampleableRegion::sampleGoal
        
            typedef void ( ::ompl::base::GoalSampleableRegion::*sampleGoal_function_type)( ::ompl::base::State * ) const;
            
            GoalSampleableRegion_exposer.def( 
                "sampleGoal"
                , bp::pure_virtual( sampleGoal_function_type(&::ompl::base::GoalSampleableRegion::sampleGoal) )
                , ( bp::arg("st") ) );
        
        }
        { //::ompl::base::GoalRegion::distanceGoal
        
            typedef double ( ::ompl::base::GoalRegion::*distanceGoal_function_type)( ::ompl::base::State const * ) const;
            
            GoalSampleableRegion_exposer.def( 
                "distanceGoal"
                , bp::pure_virtual( distanceGoal_function_type(&::ompl::base::GoalRegion::distanceGoal) )
                , ( bp::arg("st") ) );
        
        }
        { //::ompl::base::GoalRegion::isSatisfied
        
            typedef bool ( ::ompl::base::GoalRegion::*isSatisfied_function_type)( ::ompl::base::State const * ) const;
            typedef bool ( GoalSampleableRegion_wrapper::*default_isSatisfied_function_type)( ::ompl::base::State const * ) const;
            
            GoalSampleableRegion_exposer.def( 
                "isSatisfied"
                , isSatisfied_function_type(&::ompl::base::GoalRegion::isSatisfied)
                , default_isSatisfied_function_type(&GoalSampleableRegion_wrapper::default_isSatisfied)
                , ( bp::arg("st") ) );
        
        }
        { //::ompl::base::GoalRegion::isSatisfied
        
            typedef bool ( ::ompl::base::GoalRegion::*isSatisfied_function_type)( ::ompl::base::State const *,double * ) const;
            typedef bool ( GoalSampleableRegion_wrapper::*default_isSatisfied_function_type)( ::ompl::base::State const *,double * ) const;
            
            GoalSampleableRegion_exposer.def( 
                "isSatisfied"
                , isSatisfied_function_type(&::ompl::base::GoalRegion::isSatisfied)
                , default_isSatisfied_function_type(&GoalSampleableRegion_wrapper::default_isSatisfied)
                , ( bp::arg("st"), bp::arg("distance") ) );
        
        }
        { //::ompl::base::Goal::isStartGoalPairValid
        
            typedef bool ( ::ompl::base::Goal::*isStartGoalPairValid_function_type)( ::ompl::base::State const *,::ompl::base::State const * ) const;
            typedef bool ( GoalSampleableRegion_wrapper::*default_isStartGoalPairValid_function_type)( ::ompl::base::State const *,::ompl::base::State const * ) const;
            
            GoalSampleableRegion_exposer.def( 
                "isStartGoalPairValid"
                , isStartGoalPairValid_function_type(&::ompl::base::Goal::isStartGoalPairValid)
                , default_isStartGoalPairValid_function_type(&GoalSampleableRegion_wrapper::default_isStartGoalPairValid)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
    }

}
