// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "RealVectorBounds.pypp.hpp"

namespace bp = boost::python;

void register_RealVectorBounds_class(){

    { //::ompl::base::RealVectorBounds
        typedef bp::class_< ompl::base::RealVectorBounds > RealVectorBounds_exposer_t;
        RealVectorBounds_exposer_t RealVectorBounds_exposer = RealVectorBounds_exposer_t( "RealVectorBounds", bp::init< unsigned int >(( bp::arg("dim") )) );
        bp::scope RealVectorBounds_scope( RealVectorBounds_exposer );
        bp::implicitly_convertible< unsigned int, ompl::base::RealVectorBounds >();
        { //::ompl::base::RealVectorBounds::check
        
            typedef void ( ::ompl::base::RealVectorBounds::*check_function_type)(  ) const;
            
            RealVectorBounds_exposer.def( 
                "check"
                , check_function_type( &::ompl::base::RealVectorBounds::check ) );
        
        }
        { //::ompl::base::RealVectorBounds::getDifference
        
            typedef ::std::vector< double > ( ::ompl::base::RealVectorBounds::*getDifference_function_type)(  ) const;
            
            RealVectorBounds_exposer.def( 
                "getDifference"
                , getDifference_function_type( &::ompl::base::RealVectorBounds::getDifference ) );
        
        }
        { //::ompl::base::RealVectorBounds::getVolume
        
            typedef double ( ::ompl::base::RealVectorBounds::*getVolume_function_type)(  ) const;
            
            RealVectorBounds_exposer.def( 
                "getVolume"
                , getVolume_function_type( &::ompl::base::RealVectorBounds::getVolume ) );
        
        }
        { //::ompl::base::RealVectorBounds::resize
        
            typedef void ( ::ompl::base::RealVectorBounds::*resize_function_type)( ::std::size_t ) ;
            
            RealVectorBounds_exposer.def( 
                "resize"
                , resize_function_type( &::ompl::base::RealVectorBounds::resize )
                , ( bp::arg("size") ) );
        
        }
        { //::ompl::base::RealVectorBounds::setHigh
        
            typedef void ( ::ompl::base::RealVectorBounds::*setHigh_function_type)( double ) ;
            
            RealVectorBounds_exposer.def( 
                "setHigh"
                , setHigh_function_type( &::ompl::base::RealVectorBounds::setHigh )
                , ( bp::arg("value") ) );
        
        }
        { //::ompl::base::RealVectorBounds::setHigh
        
            typedef void ( ::ompl::base::RealVectorBounds::*setHigh_function_type)( unsigned int,double ) ;
            
            RealVectorBounds_exposer.def( 
                "setHigh"
                , setHigh_function_type( &::ompl::base::RealVectorBounds::setHigh )
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        { //::ompl::base::RealVectorBounds::setLow
        
            typedef void ( ::ompl::base::RealVectorBounds::*setLow_function_type)( double ) ;
            
            RealVectorBounds_exposer.def( 
                "setLow"
                , setLow_function_type( &::ompl::base::RealVectorBounds::setLow )
                , ( bp::arg("value") ) );
        
        }
        { //::ompl::base::RealVectorBounds::setLow
        
            typedef void ( ::ompl::base::RealVectorBounds::*setLow_function_type)( unsigned int,double ) ;
            
            RealVectorBounds_exposer.def( 
                "setLow"
                , setLow_function_type( &::ompl::base::RealVectorBounds::setLow )
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        RealVectorBounds_exposer.def_readwrite( "high", &ompl::base::RealVectorBounds::high );
        RealVectorBounds_exposer.def_readwrite( "low", &ompl::base::RealVectorBounds::low );
    }

}
