// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "PlannerInputStates.pypp.hpp"

namespace bp = boost::python;

void register_PlannerInputStates_class(){

    { //::ompl::base::PlannerInputStates
        typedef bp::class_< ompl::base::PlannerInputStates > PlannerInputStates_exposer_t;
        PlannerInputStates_exposer_t PlannerInputStates_exposer = PlannerInputStates_exposer_t( "PlannerInputStates", bp::init< ompl::base::PlannerPtr const & >(( bp::arg("planner") )) );
        bp::scope PlannerInputStates_scope( PlannerInputStates_exposer );
        bp::implicitly_convertible< ompl::base::PlannerPtr const &, ompl::base::PlannerInputStates >();
        PlannerInputStates_exposer.def( bp::init< ompl::base::Planner const * >(( bp::arg("planner") )) );
        bp::implicitly_convertible< ompl::base::Planner const *, ompl::base::PlannerInputStates >();
        PlannerInputStates_exposer.def( bp::init< >() );
        { //::ompl::base::PlannerInputStates::checkValidity
        
            typedef void ( ::ompl::base::PlannerInputStates::*checkValidity_function_type)(  ) const;
            
            PlannerInputStates_exposer.def( 
                "checkValidity"
                , checkValidity_function_type( &::ompl::base::PlannerInputStates::checkValidity ) );
        
        }
        { //::ompl::base::PlannerInputStates::clear
        
            typedef void ( ::ompl::base::PlannerInputStates::*clear_function_type)(  ) ;
            
            PlannerInputStates_exposer.def( 
                "clear"
                , clear_function_type( &::ompl::base::PlannerInputStates::clear ) );
        
        }
        { //::ompl::base::PlannerInputStates::getSampledGoalsCount
        
            typedef unsigned int ( ::ompl::base::PlannerInputStates::*getSampledGoalsCount_function_type)(  ) const;
            
            PlannerInputStates_exposer.def( 
                "getSampledGoalsCount"
                , getSampledGoalsCount_function_type( &::ompl::base::PlannerInputStates::getSampledGoalsCount ) );
        
        }
        { //::ompl::base::PlannerInputStates::getSeenStartStatesCount
        
            typedef unsigned int ( ::ompl::base::PlannerInputStates::*getSeenStartStatesCount_function_type)(  ) const;
            
            PlannerInputStates_exposer.def( 
                "getSeenStartStatesCount"
                , getSeenStartStatesCount_function_type( &::ompl::base::PlannerInputStates::getSeenStartStatesCount ) );
        
        }
        { //::ompl::base::PlannerInputStates::haveMoreGoalStates
        
            typedef bool ( ::ompl::base::PlannerInputStates::*haveMoreGoalStates_function_type)(  ) const;
            
            PlannerInputStates_exposer.def( 
                "haveMoreGoalStates"
                , haveMoreGoalStates_function_type( &::ompl::base::PlannerInputStates::haveMoreGoalStates ) );
        
        }
        { //::ompl::base::PlannerInputStates::haveMoreStartStates
        
            typedef bool ( ::ompl::base::PlannerInputStates::*haveMoreStartStates_function_type)(  ) const;
            
            PlannerInputStates_exposer.def( 
                "haveMoreStartStates"
                , haveMoreStartStates_function_type( &::ompl::base::PlannerInputStates::haveMoreStartStates ) );
        
        }
        { //::ompl::base::PlannerInputStates::nextGoal
        
            typedef ::ompl::base::State const * ( ::ompl::base::PlannerInputStates::*nextGoal_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            
            PlannerInputStates_exposer.def( 
                "nextGoal"
                , nextGoal_function_type( &::ompl::base::PlannerInputStates::nextGoal )
                , ( bp::arg("ptc") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::PlannerInputStates::nextGoal
        
            typedef ::ompl::base::State const * ( ::ompl::base::PlannerInputStates::*nextGoal_function_type)(  ) ;
            
            PlannerInputStates_exposer.def( 
                "nextGoal"
                , nextGoal_function_type( &::ompl::base::PlannerInputStates::nextGoal )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::PlannerInputStates::nextStart
        
            typedef ::ompl::base::State const * ( ::ompl::base::PlannerInputStates::*nextStart_function_type)(  ) ;
            
            PlannerInputStates_exposer.def( 
                "nextStart"
                , nextStart_function_type( &::ompl::base::PlannerInputStates::nextStart )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::PlannerInputStates::restart
        
            typedef void ( ::ompl::base::PlannerInputStates::*restart_function_type)(  ) ;
            
            PlannerInputStates_exposer.def( 
                "restart"
                , restart_function_type( &::ompl::base::PlannerInputStates::restart ) );
        
        }
        { //::ompl::base::PlannerInputStates::update
        
            typedef bool ( ::ompl::base::PlannerInputStates::*update_function_type)(  ) ;
            
            PlannerInputStates_exposer.def( 
                "update"
                , update_function_type( &::ompl::base::PlannerInputStates::update ) );
        
        }
        { //::ompl::base::PlannerInputStates::use
        
            typedef bool ( ::ompl::base::PlannerInputStates::*use_function_type)( ::ompl::base::ProblemDefinitionPtr const & ) ;
            
            PlannerInputStates_exposer.def( 
                "use"
                , use_function_type( &::ompl::base::PlannerInputStates::use )
                , ( bp::arg("pdef") ) );
        
        }
        { //::ompl::base::PlannerInputStates::use
        
            typedef bool ( ::ompl::base::PlannerInputStates::*use_function_type)( ::ompl::base::ProblemDefinition const * ) ;
            
            PlannerInputStates_exposer.def( 
                "use"
                , use_function_type( &::ompl::base::PlannerInputStates::use )
                , ( bp::arg("pdef") ) );
        
        }
    }

}
