// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "SpecificParamDouble.pypp.hpp"

namespace bp = boost::python;

struct SpecificParam_less__double__greater__wrapper : ompl::base::SpecificParam< double >, bp::wrapper< ompl::base::SpecificParam< double > > {

    SpecificParam_less__double__greater__wrapper(ompl::base::SpecificParam<double> const & arg )
    : ompl::base::SpecificParam<double>( arg )
      , bp::wrapper< ompl::base::SpecificParam< double > >(){
        // copy constructor
        
    }

    virtual ::std::string getValue(  ) const  {
        if( bp::override func_getValue = this->get_override( "getValue" ) )
            return func_getValue(  );
        else{
            return this->ompl::base::SpecificParam< double >::getValue(  );
        }
    }
    
    ::std::string default_getValue(  ) const  {
        return ompl::base::SpecificParam< double >::getValue( );
    }

    virtual bool setValue( ::std::string const & value ) {
        if( bp::override func_setValue = this->get_override( "setValue" ) )
            return func_setValue( value );
        else{
            return this->ompl::base::SpecificParam< double >::setValue( value );
        }
    }
    
    bool default_setValue( ::std::string const & value ) {
        return ompl::base::SpecificParam< double >::setValue( value );
    }

};

void register_SpecificParamDouble_class(){

    { //::ompl::base::SpecificParam< double >
        typedef bp::class_< SpecificParam_less__double__greater__wrapper, bp::bases< ompl::base::GenericParam > > SpecificParamDouble_exposer_t;
        SpecificParamDouble_exposer_t SpecificParamDouble_exposer = SpecificParamDouble_exposer_t( "SpecificParamDouble", bp::no_init );
        bp::scope SpecificParamDouble_scope( SpecificParamDouble_exposer );
        { //::ompl::base::SpecificParam< double >::getValue
        
            typedef ompl::base::SpecificParam< double > exported_class_t;
            typedef ::std::string ( exported_class_t::*getValue_function_type)(  ) const;
            typedef ::std::string ( SpecificParam_less__double__greater__wrapper::*default_getValue_function_type)(  ) const;
            
            SpecificParamDouble_exposer.def( 
                "getValue"
                , getValue_function_type(&::ompl::base::SpecificParam< double >::getValue)
                , default_getValue_function_type(&SpecificParam_less__double__greater__wrapper::default_getValue) );
        
        }
        { //::ompl::base::SpecificParam< double >::setValue
        
            typedef ompl::base::SpecificParam< double > exported_class_t;
            typedef bool ( exported_class_t::*setValue_function_type)( ::std::string const & ) ;
            typedef bool ( SpecificParam_less__double__greater__wrapper::*default_setValue_function_type)( ::std::string const & ) ;
            
            SpecificParamDouble_exposer.def( 
                "setValue"
                , setValue_function_type(&::ompl::base::SpecificParam< double >::setValue)
                , default_setValue_function_type(&SpecificParam_less__double__greater__wrapper::default_setValue)
                , ( bp::arg("value") ) );
        
        }
    }

}
