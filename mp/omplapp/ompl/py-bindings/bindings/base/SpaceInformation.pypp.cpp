// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "SpaceInformation.pypp.hpp"

namespace bp = boost::python;

struct SpaceInformation_wrapper : ompl::base::SpaceInformation, bp::wrapper< ompl::base::SpaceInformation > {

    SpaceInformation_wrapper(::ompl::base::StateSpacePtr const & space )
    : ompl::base::SpaceInformation( space )
      , bp::wrapper< ompl::base::SpaceInformation >(){
        // constructor
    
    }

    void setDefaultMotionValidator(  ){
        ompl::base::SpaceInformation::setDefaultMotionValidator(  );
    }

    virtual void setup(  ) {
        if( bp::override func_setup = this->get_override( "setup" ) )
            func_setup(  );
        else{
            this->ompl::base::SpaceInformation::setup(  );
        }
    }
    
    void default_setup(  ) {
        ompl::base::SpaceInformation::setup( );
    }

};

std::string __printSettings(::ompl::base::SpaceInformation* obj)
{
    std::ostringstream s;
    obj->printSettings(s);
    return s.str();
}

std::string __printProperties(::ompl::base::SpaceInformation* obj)
        {
            std::ostringstream s;
            obj->printProperties(s);
            return s.str();
        }

std::string __printState(::ompl::base::SpaceInformation* space, ompl::base::State* state)
        {
            std::ostringstream s;
            space->printState(state, s);
            return s.str();
        }

void register_SpaceInformation_class(){

    { //::ompl::base::SpaceInformation
        typedef bp::class_< SpaceInformation_wrapper, boost::noncopyable > SpaceInformation_exposer_t;
        SpaceInformation_exposer_t SpaceInformation_exposer = SpaceInformation_exposer_t( "SpaceInformation", bp::init< ompl::base::StateSpacePtr const & >(( bp::arg("space") )) );
        bp::scope SpaceInformation_scope( SpaceInformation_exposer );
        bp::implicitly_convertible< ompl::base::StateSpacePtr const &, ompl::base::SpaceInformation >();
        { //::ompl::base::SpaceInformation::allocState
        
            typedef ::ompl::base::State * ( ::ompl::base::SpaceInformation::*allocState_function_type)(  ) const;
            
            SpaceInformation_exposer.def( 
                "allocState"
                , allocState_function_type( &::ompl::base::SpaceInformation::allocState )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::SpaceInformation::allocStateSampler
        
            typedef ::ompl::base::StateSamplerPtr ( ::ompl::base::SpaceInformation::*allocStateSampler_function_type)(  ) const;
            
            SpaceInformation_exposer.def( 
                "allocStateSampler"
                , allocStateSampler_function_type( &::ompl::base::SpaceInformation::allocStateSampler ) );
        
        }
        { //::ompl::base::SpaceInformation::allocStates
        
            typedef void ( ::ompl::base::SpaceInformation::*allocStates_function_type)( ::std::vector< ompl::base::State* > & ) const;
            
            SpaceInformation_exposer.def( 
                "allocStates"
                , allocStates_function_type( &::ompl::base::SpaceInformation::allocStates )
                , ( bp::arg("states") ) );
        
        }
        { //::ompl::base::SpaceInformation::allocValidStateSampler
        
            typedef ::ompl::base::ValidStateSamplerPtr ( ::ompl::base::SpaceInformation::*allocValidStateSampler_function_type)(  ) const;
            
            SpaceInformation_exposer.def( 
                "allocValidStateSampler"
                , allocValidStateSampler_function_type( &::ompl::base::SpaceInformation::allocValidStateSampler ) );
        
        }
        { //::ompl::base::SpaceInformation::averageValidMotionLength
        
            typedef double ( ::ompl::base::SpaceInformation::*averageValidMotionLength_function_type)( unsigned int ) const;
            
            SpaceInformation_exposer.def( 
                "averageValidMotionLength"
                , averageValidMotionLength_function_type( &::ompl::base::SpaceInformation::averageValidMotionLength )
                , ( bp::arg("attempts") ) );
        
        }
        { //::ompl::base::SpaceInformation::checkMotion
        
            typedef bool ( ::ompl::base::SpaceInformation::*checkMotion_function_type)( ::ompl::base::State const *,::ompl::base::State const *,::std::pair< ompl::base::State*, double > & ) const;
            
            SpaceInformation_exposer.def( 
                "checkMotion"
                , checkMotion_function_type( &::ompl::base::SpaceInformation::checkMotion )
                , ( bp::arg("s1"), bp::arg("s2"), bp::arg("lastValid") ) );
        
        }
        { //::ompl::base::SpaceInformation::checkMotion
        
            typedef bool ( ::ompl::base::SpaceInformation::*checkMotion_function_type)( ::ompl::base::State const *,::ompl::base::State const * ) const;
            
            SpaceInformation_exposer.def( 
                "checkMotion"
                , checkMotion_function_type( &::ompl::base::SpaceInformation::checkMotion )
                , ( bp::arg("s1"), bp::arg("s2") ) );
        
        }
        { //::ompl::base::SpaceInformation::checkMotion
        
            typedef bool ( ::ompl::base::SpaceInformation::*checkMotion_function_type)( ::std::vector< ompl::base::State* > const &,unsigned int,unsigned int & ) const;
            
            SpaceInformation_exposer.def( 
                "checkMotion"
                , checkMotion_function_type( &::ompl::base::SpaceInformation::checkMotion )
                , ( bp::arg("states"), bp::arg("count"), bp::arg("firstInvalidStateIndex") ) );
        
        }
        { //::ompl::base::SpaceInformation::checkMotion
        
            typedef bool ( ::ompl::base::SpaceInformation::*checkMotion_function_type)( ::std::vector< ompl::base::State* > const &,unsigned int ) const;
            
            SpaceInformation_exposer.def( 
                "checkMotion"
                , checkMotion_function_type( &::ompl::base::SpaceInformation::checkMotion )
                , ( bp::arg("states"), bp::arg("count") ) );
        
        }
        { //::ompl::base::SpaceInformation::clearValidStateSamplerAllocator
        
            typedef void ( ::ompl::base::SpaceInformation::*clearValidStateSamplerAllocator_function_type)(  ) ;
            
            SpaceInformation_exposer.def( 
                "clearValidStateSamplerAllocator"
                , clearValidStateSamplerAllocator_function_type( &::ompl::base::SpaceInformation::clearValidStateSamplerAllocator ) );
        
        }
        { //::ompl::base::SpaceInformation::cloneState
        
            typedef ::ompl::base::State * ( ::ompl::base::SpaceInformation::*cloneState_function_type)( ::ompl::base::State const * ) const;
            
            SpaceInformation_exposer.def( 
                "cloneState"
                , cloneState_function_type( &::ompl::base::SpaceInformation::cloneState )
                , ( bp::arg("source") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::SpaceInformation::copyState
        
            typedef void ( ::ompl::base::SpaceInformation::*copyState_function_type)( ::ompl::base::State *,::ompl::base::State const * ) const;
            
            SpaceInformation_exposer.def( 
                "copyState"
                , copyState_function_type( &::ompl::base::SpaceInformation::copyState )
                , ( bp::arg("destination"), bp::arg("source") ) );
        
        }
        { //::ompl::base::SpaceInformation::distance
        
            typedef double ( ::ompl::base::SpaceInformation::*distance_function_type)( ::ompl::base::State const *,::ompl::base::State const * ) const;
            
            SpaceInformation_exposer.def( 
                "distance"
                , distance_function_type( &::ompl::base::SpaceInformation::distance )
                , ( bp::arg("state1"), bp::arg("state2") ) );
        
        }
        { //::ompl::base::SpaceInformation::enforceBounds
        
            typedef void ( ::ompl::base::SpaceInformation::*enforceBounds_function_type)( ::ompl::base::State * ) const;
            
            SpaceInformation_exposer.def( 
                "enforceBounds"
                , enforceBounds_function_type( &::ompl::base::SpaceInformation::enforceBounds )
                , ( bp::arg("state") ) );
        
        }
        { //::ompl::base::SpaceInformation::equalStates
        
            typedef bool ( ::ompl::base::SpaceInformation::*equalStates_function_type)( ::ompl::base::State const *,::ompl::base::State const * ) const;
            
            SpaceInformation_exposer.def( 
                "equalStates"
                , equalStates_function_type( &::ompl::base::SpaceInformation::equalStates )
                , ( bp::arg("state1"), bp::arg("state2") ) );
        
        }
        { //::ompl::base::SpaceInformation::freeState
        
            typedef void ( ::ompl::base::SpaceInformation::*freeState_function_type)( ::ompl::base::State * ) const;
            
            SpaceInformation_exposer.def( 
                "freeState"
                , freeState_function_type( &::ompl::base::SpaceInformation::freeState )
                , ( bp::arg("state") ) );
        
        }
        { //::ompl::base::SpaceInformation::freeStates
        
            typedef void ( ::ompl::base::SpaceInformation::*freeStates_function_type)( ::std::vector< ompl::base::State* > & ) const;
            
            SpaceInformation_exposer.def( 
                "freeStates"
                , freeStates_function_type( &::ompl::base::SpaceInformation::freeStates )
                , ( bp::arg("states") ) );
        
        }
        { //::ompl::base::SpaceInformation::getMaximumExtent
        
            typedef double ( ::ompl::base::SpaceInformation::*getMaximumExtent_function_type)(  ) const;
            
            SpaceInformation_exposer.def( 
                "getMaximumExtent"
                , getMaximumExtent_function_type( &::ompl::base::SpaceInformation::getMaximumExtent ) );
        
        }
        { //::ompl::base::SpaceInformation::getMotionStates
        
            typedef unsigned int ( ::ompl::base::SpaceInformation::*getMotionStates_function_type)( ::ompl::base::State const *,::ompl::base::State const *,::std::vector< ompl::base::State* > &,unsigned int,bool,bool ) const;
            
            SpaceInformation_exposer.def( 
                "getMotionStates"
                , getMotionStates_function_type( &::ompl::base::SpaceInformation::getMotionStates )
                , ( bp::arg("s1"), bp::arg("s2"), bp::arg("states"), bp::arg("count"), bp::arg("endpoints"), bp::arg("alloc") ) );
        
        }
        { //::ompl::base::SpaceInformation::getMotionValidator
        
            typedef ::ompl::base::MotionValidatorPtr const & ( ::ompl::base::SpaceInformation::*getMotionValidator_function_type)(  ) const;
            
            SpaceInformation_exposer.def( 
                "getMotionValidator"
                , getMotionValidator_function_type( &::ompl::base::SpaceInformation::getMotionValidator )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::SpaceInformation::getStateDimension
        
            typedef unsigned int ( ::ompl::base::SpaceInformation::*getStateDimension_function_type)(  ) const;
            
            SpaceInformation_exposer.def( 
                "getStateDimension"
                , getStateDimension_function_type( &::ompl::base::SpaceInformation::getStateDimension ) );
        
        }
        { //::ompl::base::SpaceInformation::getStateSpace
        
            typedef ::ompl::base::StateSpacePtr const & ( ::ompl::base::SpaceInformation::*getStateSpace_function_type)(  ) const;
            
            SpaceInformation_exposer.def( 
                "getStateSpace"
                , getStateSpace_function_type( &::ompl::base::SpaceInformation::getStateSpace )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::SpaceInformation::getStateValidityChecker
        
            typedef ::ompl::base::StateValidityCheckerPtr const & ( ::ompl::base::SpaceInformation::*getStateValidityChecker_function_type)(  ) const;
            
            SpaceInformation_exposer.def( 
                "getStateValidityChecker"
                , getStateValidityChecker_function_type( &::ompl::base::SpaceInformation::getStateValidityChecker )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::SpaceInformation::getStateValidityCheckingResolution
        
            typedef double ( ::ompl::base::SpaceInformation::*getStateValidityCheckingResolution_function_type)(  ) const;
            
            SpaceInformation_exposer.def( 
                "getStateValidityCheckingResolution"
                , getStateValidityCheckingResolution_function_type( &::ompl::base::SpaceInformation::getStateValidityCheckingResolution ) );
        
        }
        { //::ompl::base::SpaceInformation::isSetup
        
            typedef bool ( ::ompl::base::SpaceInformation::*isSetup_function_type)(  ) const;
            
            SpaceInformation_exposer.def( 
                "isSetup"
                , isSetup_function_type( &::ompl::base::SpaceInformation::isSetup ) );
        
        }
        { //::ompl::base::SpaceInformation::isValid
        
            typedef bool ( ::ompl::base::SpaceInformation::*isValid_function_type)( ::ompl::base::State const * ) const;
            
            SpaceInformation_exposer.def( 
                "isValid"
                , isValid_function_type( &::ompl::base::SpaceInformation::isValid )
                , ( bp::arg("state") ) );
        
        }
        { //::ompl::base::SpaceInformation::params
        
            typedef ::ompl::base::ParamSet & ( ::ompl::base::SpaceInformation::*params_function_type)(  ) ;
            
            SpaceInformation_exposer.def( 
                "params"
                , params_function_type( &::ompl::base::SpaceInformation::params )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::SpaceInformation::params
        
            typedef ::ompl::base::ParamSet const & ( ::ompl::base::SpaceInformation::*params_function_type)(  ) const;
            
            SpaceInformation_exposer.def( 
                "params"
                , params_function_type( &::ompl::base::SpaceInformation::params )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::SpaceInformation::probabilityOfValidState
        
            typedef double ( ::ompl::base::SpaceInformation::*probabilityOfValidState_function_type)( unsigned int ) const;
            
            SpaceInformation_exposer.def( 
                "probabilityOfValidState"
                , probabilityOfValidState_function_type( &::ompl::base::SpaceInformation::probabilityOfValidState )
                , ( bp::arg("attempts") ) );
        
        }
        { //::ompl::base::SpaceInformation::randomBounceMotion
        
            typedef unsigned int ( ::ompl::base::SpaceInformation::*randomBounceMotion_function_type)( ::ompl::base::StateSamplerPtr const &,::ompl::base::State const *,unsigned int,::std::vector< ompl::base::State* > &,bool ) const;
            
            SpaceInformation_exposer.def( 
                "randomBounceMotion"
                , randomBounceMotion_function_type( &::ompl::base::SpaceInformation::randomBounceMotion )
                , ( bp::arg("sss"), bp::arg("start"), bp::arg("steps"), bp::arg("states"), bp::arg("alloc") ) );
        
        }
        { //::ompl::base::SpaceInformation::samplesPerSecond
        
            typedef void ( ::ompl::base::SpaceInformation::*samplesPerSecond_function_type)( double &,double &,double &,unsigned int ) const;
            
            SpaceInformation_exposer.def( 
                "samplesPerSecond"
                , samplesPerSecond_function_type( &::ompl::base::SpaceInformation::samplesPerSecond )
                , ( bp::arg("uniform"), bp::arg("near"), bp::arg("gaussian"), bp::arg("attempts") ) );
        
        }
        { //::ompl::base::SpaceInformation::satisfiesBounds
        
            typedef bool ( ::ompl::base::SpaceInformation::*satisfiesBounds_function_type)( ::ompl::base::State const * ) const;
            
            SpaceInformation_exposer.def( 
                "satisfiesBounds"
                , satisfiesBounds_function_type( &::ompl::base::SpaceInformation::satisfiesBounds )
                , ( bp::arg("state") ) );
        
        }
        { //::ompl::base::SpaceInformation::searchValidNearby
        
            typedef bool ( ::ompl::base::SpaceInformation::*searchValidNearby_function_type)( ::ompl::base::State *,::ompl::base::State const *,double,unsigned int ) const;
            
            SpaceInformation_exposer.def( 
                "searchValidNearby"
                , searchValidNearby_function_type( &::ompl::base::SpaceInformation::searchValidNearby )
                , ( bp::arg("state"), bp::arg("near"), bp::arg("distance"), bp::arg("attempts") ) );
        
        }
        { //::ompl::base::SpaceInformation::searchValidNearby
        
            typedef bool ( ::ompl::base::SpaceInformation::*searchValidNearby_function_type)( ::ompl::base::ValidStateSamplerPtr const &,::ompl::base::State *,::ompl::base::State const *,double ) const;
            
            SpaceInformation_exposer.def( 
                "searchValidNearby"
                , searchValidNearby_function_type( &::ompl::base::SpaceInformation::searchValidNearby )
                , ( bp::arg("sampler"), bp::arg("state"), bp::arg("near"), bp::arg("distance") ) );
        
        }
        { //::ompl::base::SpaceInformation::setDefaultMotionValidator
        
            typedef void ( SpaceInformation_wrapper::*setDefaultMotionValidator_function_type)(  ) ;
            
            SpaceInformation_exposer.def( 
                "setDefaultMotionValidator"
                , setDefaultMotionValidator_function_type( &SpaceInformation_wrapper::setDefaultMotionValidator ) );
        
        }
        { //::ompl::base::SpaceInformation::setMotionValidator
        
            typedef void ( ::ompl::base::SpaceInformation::*setMotionValidator_function_type)( ::ompl::base::MotionValidatorPtr const & ) ;
            
            SpaceInformation_exposer.def( 
                "setMotionValidator"
                , setMotionValidator_function_type( &::ompl::base::SpaceInformation::setMotionValidator )
                , ( bp::arg("mv") ) );
        
        }
        { //::ompl::base::SpaceInformation::setStateValidityChecker
        
            typedef void ( ::ompl::base::SpaceInformation::*setStateValidityChecker_function_type)( ::ompl::base::StateValidityCheckerPtr const & ) ;
            
            SpaceInformation_exposer.def( 
                "setStateValidityChecker"
                , setStateValidityChecker_function_type( &::ompl::base::SpaceInformation::setStateValidityChecker )
                , ( bp::arg("svc") ) );
        
        }
        { //::ompl::base::SpaceInformation::setStateValidityChecker
        
            typedef void ( ::ompl::base::SpaceInformation::*setStateValidityChecker_function_type)( ::ompl::base::StateValidityCheckerFn const & ) ;
            
            SpaceInformation_exposer.def( 
                "setStateValidityChecker"
                , setStateValidityChecker_function_type( &::ompl::base::SpaceInformation::setStateValidityChecker )
                , ( bp::arg("svc") ) );
        
        }
        { //::ompl::base::SpaceInformation::setStateValidityCheckingResolution
        
            typedef void ( ::ompl::base::SpaceInformation::*setStateValidityCheckingResolution_function_type)( double ) ;
            
            SpaceInformation_exposer.def( 
                "setStateValidityCheckingResolution"
                , setStateValidityCheckingResolution_function_type( &::ompl::base::SpaceInformation::setStateValidityCheckingResolution )
                , ( bp::arg("resolution") ) );
        
        }
        { //::ompl::base::SpaceInformation::setValidStateSamplerAllocator
        
            typedef void ( ::ompl::base::SpaceInformation::*setValidStateSamplerAllocator_function_type)( ::ompl::base::ValidStateSamplerAllocator const & ) ;
            
            SpaceInformation_exposer.def( 
                "setValidStateSamplerAllocator"
                , setValidStateSamplerAllocator_function_type( &::ompl::base::SpaceInformation::setValidStateSamplerAllocator )
                , ( bp::arg("vssa") ) );
        
        }
        { //::ompl::base::SpaceInformation::setup
        
            typedef void ( ::ompl::base::SpaceInformation::*setup_function_type)(  ) ;
            typedef void ( SpaceInformation_wrapper::*default_setup_function_type)(  ) ;
            
            SpaceInformation_exposer.def( 
                "setup"
                , setup_function_type(&::ompl::base::SpaceInformation::setup)
                , default_setup_function_type(&SpaceInformation_wrapper::default_setup) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< ompl::base::SpaceInformation > >();
        SpaceInformation_exposer.def("settings", &__printSettings);
        SpaceInformation_exposer.def("properties", &__printProperties);
        SpaceInformation_exposer.def("string", &__printState);
    }

}
