// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "StateSampler.pypp.hpp"

namespace bp = boost::python;

struct StateSampler_wrapper : ompl::base::StateSampler, bp::wrapper< ompl::base::StateSampler > {

    StateSampler_wrapper(::ompl::base::StateSpace const * space )
    : ompl::base::StateSampler( boost::python::ptr(space) )
      , bp::wrapper< ompl::base::StateSampler >(){
        // constructor
    
    }

    virtual void sampleGaussian( ::ompl::base::State * state, ::ompl::base::State const * mean, double const stdDev ){
        bp::override func_sampleGaussian = this->get_override( "sampleGaussian" );
        func_sampleGaussian( boost::python::ptr(state), boost::python::ptr(mean), stdDev );
    }

    virtual void sampleUniform( ::ompl::base::State * state ){
        bp::override func_sampleUniform = this->get_override( "sampleUniform" );
        func_sampleUniform( boost::python::ptr(state) );
    }

    virtual void sampleUniformNear( ::ompl::base::State * state, ::ompl::base::State const * near, double const distance ){
        bp::override func_sampleUniformNear = this->get_override( "sampleUniformNear" );
        func_sampleUniformNear( boost::python::ptr(state), boost::python::ptr(near), distance );
    }

};

void register_StateSampler_class(){

    { //::ompl::base::StateSampler
        typedef bp::class_< StateSampler_wrapper, boost::noncopyable > StateSampler_exposer_t;
        StateSampler_exposer_t StateSampler_exposer = StateSampler_exposer_t( "StateSampler", bp::init< ompl::base::StateSpace const * >(( bp::arg("space") )) );
        bp::scope StateSampler_scope( StateSampler_exposer );
        { //::ompl::base::StateSampler::sampleGaussian
        
            typedef void ( ::ompl::base::StateSampler::*sampleGaussian_function_type)( ::ompl::base::State *,::ompl::base::State const *,double const ) ;
            
            StateSampler_exposer.def( 
                "sampleGaussian"
                , bp::pure_virtual( sampleGaussian_function_type(&::ompl::base::StateSampler::sampleGaussian) )
                , ( bp::arg("state"), bp::arg("mean"), bp::arg("stdDev") ) );
        
        }
        { //::ompl::base::StateSampler::sampleUniform
        
            typedef void ( ::ompl::base::StateSampler::*sampleUniform_function_type)( ::ompl::base::State * ) ;
            
            StateSampler_exposer.def( 
                "sampleUniform"
                , bp::pure_virtual( sampleUniform_function_type(&::ompl::base::StateSampler::sampleUniform) )
                , ( bp::arg("state") ) );
        
        }
        { //::ompl::base::StateSampler::sampleUniformNear
        
            typedef void ( ::ompl::base::StateSampler::*sampleUniformNear_function_type)( ::ompl::base::State *,::ompl::base::State const *,double const ) ;
            
            StateSampler_exposer.def( 
                "sampleUniformNear"
                , bp::pure_virtual( sampleUniformNear_function_type(&::ompl::base::StateSampler::sampleUniformNear) )
                , ( bp::arg("state"), bp::arg("near"), bp::arg("distance") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< ompl::base::StateSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::base::DiscreteStateSampler >, boost::shared_ptr< ompl::base::StateSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::base::CompoundStateSampler >, boost::shared_ptr< ompl::base::StateSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::base::SO3StateSampler >, boost::shared_ptr< ompl::base::StateSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::base::RealVectorStateSampler >, boost::shared_ptr< ompl::base::StateSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::base::TimeStateSampler >, boost::shared_ptr< ompl::base::StateSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::base::SO2StateSampler >, boost::shared_ptr< ompl::base::StateSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::base::SubspaceStateSampler >, boost::shared_ptr< ompl::base::StateSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::base::PrecomputedStateSampler >, boost::shared_ptr< ompl::base::StateSampler > >();
    }

}
