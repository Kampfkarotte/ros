// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "AllValidStateValidityChecker.pypp.hpp"

namespace bp = boost::python;

struct AllValidStateValidityChecker_wrapper : ompl::base::AllValidStateValidityChecker, bp::wrapper< ompl::base::AllValidStateValidityChecker > {

    AllValidStateValidityChecker_wrapper(ompl::base::AllValidStateValidityChecker const & arg )
    : ompl::base::AllValidStateValidityChecker( arg )
      , bp::wrapper< ompl::base::AllValidStateValidityChecker >(){
        // copy constructor
        
    }

    AllValidStateValidityChecker_wrapper(::ompl::base::SpaceInformation * si )
    : ompl::base::AllValidStateValidityChecker( boost::python::ptr(si) )
      , bp::wrapper< ompl::base::AllValidStateValidityChecker >(){
        // constructor
    
    }

    AllValidStateValidityChecker_wrapper(::ompl::base::SpaceInformationPtr const & si )
    : ompl::base::AllValidStateValidityChecker( si )
      , bp::wrapper< ompl::base::AllValidStateValidityChecker >(){
        // constructor
    
    }

    virtual bool isValid( ::ompl::base::State const * arg0 ) const  {
        if( bp::override func_isValid = this->get_override( "isValid" ) )
            return func_isValid( boost::python::ptr(arg0) );
        else{
            return this->ompl::base::AllValidStateValidityChecker::isValid( boost::python::ptr(arg0) );
        }
    }
    
    bool default_isValid( ::ompl::base::State const * arg0 ) const  {
        return ompl::base::AllValidStateValidityChecker::isValid( boost::python::ptr(arg0) );
    }

    virtual double clearance( ::ompl::base::State const * arg0 ) const  {
        if( bp::override func_clearance = this->get_override( "clearance" ) )
            return func_clearance( boost::python::ptr(arg0) );
        else{
            return this->ompl::base::StateValidityChecker::clearance( boost::python::ptr(arg0) );
        }
    }
    
    double default_clearance( ::ompl::base::State const * arg0 ) const  {
        return ompl::base::StateValidityChecker::clearance( boost::python::ptr(arg0) );
    }

    virtual double clearance( ::ompl::base::State const * state, ::ompl::base::State * arg1, bool & validStateAvailable ) const  {
        if( bp::override func_clearance = this->get_override( "clearance" ) )
            return func_clearance( boost::python::ptr(state), boost::python::ptr(arg1), validStateAvailable );
        else{
            return this->ompl::base::StateValidityChecker::clearance( boost::python::ptr(state), boost::python::ptr(arg1), validStateAvailable );
        }
    }
    
    double default_clearance( ::ompl::base::State const * state, ::ompl::base::State * arg1, bool & validStateAvailable ) const  {
        return ompl::base::StateValidityChecker::clearance( boost::python::ptr(state), boost::python::ptr(arg1), validStateAvailable );
    }

    virtual bool isValid( ::ompl::base::State const * state, double & dist ) const  {
        if( bp::override func_isValid = this->get_override( "isValid" ) )
            return func_isValid( boost::python::ptr(state), dist );
        else{
            return this->ompl::base::StateValidityChecker::isValid( boost::python::ptr(state), dist );
        }
    }
    
    bool default_isValid( ::ompl::base::State const * state, double & dist ) const  {
        return ompl::base::StateValidityChecker::isValid( boost::python::ptr(state), dist );
    }

    virtual bool isValid( ::ompl::base::State const * state, double & dist, ::ompl::base::State * validState, bool & validStateAvailable ) const  {
        if( bp::override func_isValid = this->get_override( "isValid" ) )
            return func_isValid( boost::python::ptr(state), dist, boost::python::ptr(validState), validStateAvailable );
        else{
            return this->ompl::base::StateValidityChecker::isValid( boost::python::ptr(state), dist, boost::python::ptr(validState), validStateAvailable );
        }
    }
    
    bool default_isValid( ::ompl::base::State const * state, double & dist, ::ompl::base::State * validState, bool & validStateAvailable ) const  {
        return ompl::base::StateValidityChecker::isValid( boost::python::ptr(state), dist, boost::python::ptr(validState), validStateAvailable );
    }

};

void register_AllValidStateValidityChecker_class(){

    { //::ompl::base::AllValidStateValidityChecker
        typedef bp::class_< AllValidStateValidityChecker_wrapper, bp::bases< ompl::base::StateValidityChecker > > AllValidStateValidityChecker_exposer_t;
        AllValidStateValidityChecker_exposer_t AllValidStateValidityChecker_exposer = AllValidStateValidityChecker_exposer_t( "AllValidStateValidityChecker", bp::init< ompl::base::SpaceInformation * >(( bp::arg("si") )) );
        bp::scope AllValidStateValidityChecker_scope( AllValidStateValidityChecker_exposer );
        bp::implicitly_convertible< ompl::base::SpaceInformation *, ompl::base::AllValidStateValidityChecker >();
        AllValidStateValidityChecker_exposer.def( bp::init< ompl::base::SpaceInformationPtr const & >(( bp::arg("si") )) );
        bp::implicitly_convertible< ompl::base::SpaceInformationPtr const &, ompl::base::AllValidStateValidityChecker >();
        { //::ompl::base::AllValidStateValidityChecker::isValid
        
            typedef bool ( ::ompl::base::AllValidStateValidityChecker::*isValid_function_type)( ::ompl::base::State const * ) const;
            typedef bool ( AllValidStateValidityChecker_wrapper::*default_isValid_function_type)( ::ompl::base::State const * ) const;
            
            AllValidStateValidityChecker_exposer.def( 
                "isValid"
                , isValid_function_type(&::ompl::base::AllValidStateValidityChecker::isValid)
                , default_isValid_function_type(&AllValidStateValidityChecker_wrapper::default_isValid)
                , ( bp::arg("arg0") ) );
        
        }
        { //::ompl::base::StateValidityChecker::clearance
        
            typedef double ( ::ompl::base::StateValidityChecker::*clearance_function_type)( ::ompl::base::State const * ) const;
            typedef double ( AllValidStateValidityChecker_wrapper::*default_clearance_function_type)( ::ompl::base::State const * ) const;
            
            AllValidStateValidityChecker_exposer.def( 
                "clearance"
                , clearance_function_type(&::ompl::base::StateValidityChecker::clearance)
                , default_clearance_function_type(&AllValidStateValidityChecker_wrapper::default_clearance)
                , ( bp::arg("arg0") ) );
        
        }
        { //::ompl::base::StateValidityChecker::clearance
        
            typedef double ( ::ompl::base::StateValidityChecker::*clearance_function_type)( ::ompl::base::State const *,::ompl::base::State *,bool & ) const;
            typedef double ( AllValidStateValidityChecker_wrapper::*default_clearance_function_type)( ::ompl::base::State const *,::ompl::base::State *,bool & ) const;
            
            AllValidStateValidityChecker_exposer.def( 
                "clearance"
                , clearance_function_type(&::ompl::base::StateValidityChecker::clearance)
                , default_clearance_function_type(&AllValidStateValidityChecker_wrapper::default_clearance)
                , ( bp::arg("state"), bp::arg("arg1"), bp::arg("validStateAvailable") ) );
        
        }
        { //::ompl::base::StateValidityChecker::isValid
        
            typedef bool ( ::ompl::base::StateValidityChecker::*isValid_function_type)( ::ompl::base::State const *,double & ) const;
            typedef bool ( AllValidStateValidityChecker_wrapper::*default_isValid_function_type)( ::ompl::base::State const *,double & ) const;
            
            AllValidStateValidityChecker_exposer.def( 
                "isValid"
                , isValid_function_type(&::ompl::base::StateValidityChecker::isValid)
                , default_isValid_function_type(&AllValidStateValidityChecker_wrapper::default_isValid)
                , ( bp::arg("state"), bp::arg("dist") ) );
        
        }
        { //::ompl::base::StateValidityChecker::isValid
        
            typedef bool ( ::ompl::base::StateValidityChecker::*isValid_function_type)( ::ompl::base::State const *,double &,::ompl::base::State *,bool & ) const;
            typedef bool ( AllValidStateValidityChecker_wrapper::*default_isValid_function_type)( ::ompl::base::State const *,double &,::ompl::base::State *,bool & ) const;
            
            AllValidStateValidityChecker_exposer.def( 
                "isValid"
                , isValid_function_type(&::ompl::base::StateValidityChecker::isValid)
                , default_isValid_function_type(&AllValidStateValidityChecker_wrapper::default_isValid)
                , ( bp::arg("state"), bp::arg("dist"), bp::arg("validState"), bp::arg("validStateAvailable") ) );
        
        }
    }

}
