// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "_base_free_functions.pypp.hpp"

namespace bp = boost::python;

void register_free_functions(){

    { //::ompl::base::copyStateData
    
        typedef ::ompl::base::AdvancedStateCopyOperation ( *copyStateData_function_type )( ::ompl::base::StateSpace const *,::ompl::base::State *,::ompl::base::StateSpace const *,::ompl::base::State const *,::std::vector< std::string > const & );
        
        bp::def( 
            "copyStateData"
            , copyStateData_function_type( &::ompl::base::copyStateData )
            , ( bp::arg("destS"), bp::arg("dest"), bp::arg("sourceS"), bp::arg("source"), bp::arg("subspaces") ) );
    
    }

    { //::ompl::base::copyStateData
    
        typedef ::ompl::base::AdvancedStateCopyOperation ( *copyStateData_function_type )( ::ompl::base::StateSpacePtr const &,::ompl::base::State *,::ompl::base::StateSpacePtr const &,::ompl::base::State const *,::std::vector< std::string > const & );
        
        bp::def( 
            "copyStateData"
            , copyStateData_function_type( &::ompl::base::copyStateData )
            , ( bp::arg("destS"), bp::arg("dest"), bp::arg("sourceS"), bp::arg("source"), bp::arg("subspaces") ) );
    
    }

    { //::ompl::base::copyStateData
    
        typedef ::ompl::base::AdvancedStateCopyOperation ( *copyStateData_function_type )( ::ompl::base::StateSpace const *,::ompl::base::State *,::ompl::base::StateSpace const *,::ompl::base::State const * );
        
        bp::def( 
            "copyStateData"
            , copyStateData_function_type( &::ompl::base::copyStateData )
            , ( bp::arg("destS"), bp::arg("dest"), bp::arg("sourceS"), bp::arg("source") ) );
    
    }

    { //::ompl::base::copyStateData
    
        typedef ::ompl::base::AdvancedStateCopyOperation ( *copyStateData_function_type )( ::ompl::base::StateSpacePtr const &,::ompl::base::State *,::ompl::base::StateSpacePtr const &,::ompl::base::State const * );
        
        bp::def( 
            "copyStateData"
            , copyStateData_function_type( &::ompl::base::copyStateData )
            , ( bp::arg("destS"), bp::arg("dest"), bp::arg("sourceS"), bp::arg("source") ) );
    
    }

    { //::ompl::base::goalRegionCostToGo
    
        typedef ::ompl::base::Cost ( *goalRegionCostToGo_function_type )( ::ompl::base::State const *,::ompl::base::Goal const * );
        
        bp::def( 
            "goalRegionCostToGo"
            , goalRegionCostToGo_function_type( &::ompl::base::goalRegionCostToGo )
            , ( bp::arg("state"), bp::arg("goal") ) );
    
    }

    { //::ompl::base::plannerAlwaysTerminatingCondition
    
        typedef ::ompl::base::PlannerTerminationCondition ( *plannerAlwaysTerminatingCondition_function_type )(  );
        
        bp::def( 
            "plannerAlwaysTerminatingCondition"
            , plannerAlwaysTerminatingCondition_function_type( &::ompl::base::plannerAlwaysTerminatingCondition ) );
    
    }

    { //::ompl::base::plannerAndTerminationCondition
    
        typedef ::ompl::base::PlannerTerminationCondition ( *plannerAndTerminationCondition_function_type )( ::ompl::base::PlannerTerminationCondition const &,::ompl::base::PlannerTerminationCondition const & );
        
        bp::def( 
            "plannerAndTerminationCondition"
            , plannerAndTerminationCondition_function_type( &::ompl::base::plannerAndTerminationCondition )
            , ( bp::arg("c1"), bp::arg("c2") ) );
    
    }

    { //::ompl::base::plannerNonTerminatingCondition
    
        typedef ::ompl::base::PlannerTerminationCondition ( *plannerNonTerminatingCondition_function_type )(  );
        
        bp::def( 
            "plannerNonTerminatingCondition"
            , plannerNonTerminatingCondition_function_type( &::ompl::base::plannerNonTerminatingCondition ) );
    
    }

    { //::ompl::base::plannerOrTerminationCondition
    
        typedef ::ompl::base::PlannerTerminationCondition ( *plannerOrTerminationCondition_function_type )( ::ompl::base::PlannerTerminationCondition const &,::ompl::base::PlannerTerminationCondition const & );
        
        bp::def( 
            "plannerOrTerminationCondition"
            , plannerOrTerminationCondition_function_type( &::ompl::base::plannerOrTerminationCondition )
            , ( bp::arg("c1"), bp::arg("c2") ) );
    
    }

    { //::ompl::base::timedPlannerTerminationCondition
    
        typedef ::ompl::base::PlannerTerminationCondition ( *timedPlannerTerminationCondition_function_type )( double,double );
        
        bp::def( 
            "timedPlannerTerminationCondition"
            , timedPlannerTerminationCondition_function_type( &::ompl::base::timedPlannerTerminationCondition )
            , ( bp::arg("duration"), bp::arg("interval") ) );
    
    }

    { //::ompl::base::timedPlannerTerminationCondition
    
        typedef ::ompl::base::PlannerTerminationCondition ( *timedPlannerTerminationCondition_function_type )( double );
        
        bp::def( 
            "timedPlannerTerminationCondition"
            , timedPlannerTerminationCondition_function_type( &::ompl::base::timedPlannerTerminationCondition )
            , ( bp::arg("duration") ) );
    
    }

}
