// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "PlannerDataStorage.pypp.hpp"

namespace bp = boost::python;

struct PlannerDataStorage_wrapper : ompl::base::PlannerDataStorage, bp::wrapper< ompl::base::PlannerDataStorage > {

    PlannerDataStorage_wrapper(ompl::base::PlannerDataStorage const & arg )
    : ompl::base::PlannerDataStorage( arg )
      , bp::wrapper< ompl::base::PlannerDataStorage >(){
        // copy constructor
        
    }

    PlannerDataStorage_wrapper( )
    : ompl::base::PlannerDataStorage( )
      , bp::wrapper< ompl::base::PlannerDataStorage >(){
        // null constructor
    
    }

    virtual void load( char const * filename, ::ompl::base::PlannerData & pd ) {
        if( bp::override func_load = this->get_override( "load" ) )
            func_load( filename, boost::ref(pd) );
        else{
            this->ompl::base::PlannerDataStorage::load( filename, boost::ref(pd) );
        }
    }
    
    void default_load( char const * filename, ::ompl::base::PlannerData & pd ) {
        ompl::base::PlannerDataStorage::load( filename, boost::ref(pd) );
    }

    virtual void load( ::std::istream & in, ::ompl::base::PlannerData & pd ) {
        if( bp::override func_load = this->get_override( "load" ) )
            func_load( boost::ref(in), boost::ref(pd) );
        else{
            this->ompl::base::PlannerDataStorage::load( boost::ref(in), boost::ref(pd) );
        }
    }
    
    void default_load( ::std::istream & in, ::ompl::base::PlannerData & pd ) {
        ompl::base::PlannerDataStorage::load( boost::ref(in), boost::ref(pd) );
    }

    virtual void loadEdges( ::ompl::base::PlannerData & pd, unsigned int numEdges, ::boost::archive::binary_iarchive & ia ){
        if( bp::override func_loadEdges = this->get_override( "loadEdges" ) )
            func_loadEdges( boost::ref(pd), numEdges, boost::ref(ia) );
        else{
            this->ompl::base::PlannerDataStorage::loadEdges( boost::ref(pd), numEdges, boost::ref(ia) );
        }
    }
    
    virtual void default_loadEdges( ::ompl::base::PlannerData & pd, unsigned int numEdges, ::boost::archive::binary_iarchive & ia ){
        ompl::base::PlannerDataStorage::loadEdges( boost::ref(pd), numEdges, boost::ref(ia) );
    }

    virtual void loadVertices( ::ompl::base::PlannerData & pd, unsigned int numVertices, ::boost::archive::binary_iarchive & ia ){
        if( bp::override func_loadVertices = this->get_override( "loadVertices" ) )
            func_loadVertices( boost::ref(pd), numVertices, boost::ref(ia) );
        else{
            this->ompl::base::PlannerDataStorage::loadVertices( boost::ref(pd), numVertices, boost::ref(ia) );
        }
    }
    
    virtual void default_loadVertices( ::ompl::base::PlannerData & pd, unsigned int numVertices, ::boost::archive::binary_iarchive & ia ){
        ompl::base::PlannerDataStorage::loadVertices( boost::ref(pd), numVertices, boost::ref(ia) );
    }

    virtual void store( ::ompl::base::PlannerData const & pd, char const * filename ) {
        if( bp::override func_store = this->get_override( "store" ) )
            func_store( boost::ref(pd), filename );
        else{
            this->ompl::base::PlannerDataStorage::store( boost::ref(pd), filename );
        }
    }
    
    void default_store( ::ompl::base::PlannerData const & pd, char const * filename ) {
        ompl::base::PlannerDataStorage::store( boost::ref(pd), filename );
    }

    virtual void store( ::ompl::base::PlannerData const & pd, ::std::ostream & out ) {
        if( bp::override func_store = this->get_override( "store" ) )
            func_store( boost::ref(pd), boost::ref(out) );
        else{
            this->ompl::base::PlannerDataStorage::store( boost::ref(pd), boost::ref(out) );
        }
    }
    
    void default_store( ::ompl::base::PlannerData const & pd, ::std::ostream & out ) {
        ompl::base::PlannerDataStorage::store( boost::ref(pd), boost::ref(out) );
    }

    virtual void storeEdges( ::ompl::base::PlannerData const & pd, ::boost::archive::binary_oarchive & oa ){
        if( bp::override func_storeEdges = this->get_override( "storeEdges" ) )
            func_storeEdges( boost::ref(pd), boost::ref(oa) );
        else{
            this->ompl::base::PlannerDataStorage::storeEdges( boost::ref(pd), boost::ref(oa) );
        }
    }
    
    virtual void default_storeEdges( ::ompl::base::PlannerData const & pd, ::boost::archive::binary_oarchive & oa ){
        ompl::base::PlannerDataStorage::storeEdges( boost::ref(pd), boost::ref(oa) );
    }

    virtual void storeVertices( ::ompl::base::PlannerData const & pd, ::boost::archive::binary_oarchive & oa ){
        if( bp::override func_storeVertices = this->get_override( "storeVertices" ) )
            func_storeVertices( boost::ref(pd), boost::ref(oa) );
        else{
            this->ompl::base::PlannerDataStorage::storeVertices( boost::ref(pd), boost::ref(oa) );
        }
    }
    
    virtual void default_storeVertices( ::ompl::base::PlannerData const & pd, ::boost::archive::binary_oarchive & oa ){
        ompl::base::PlannerDataStorage::storeVertices( boost::ref(pd), boost::ref(oa) );
    }

};

void register_PlannerDataStorage_class(){

    { //::ompl::base::PlannerDataStorage
        typedef bp::class_< PlannerDataStorage_wrapper > PlannerDataStorage_exposer_t;
        PlannerDataStorage_exposer_t PlannerDataStorage_exposer = PlannerDataStorage_exposer_t( "PlannerDataStorage", bp::init< >() );
        bp::scope PlannerDataStorage_scope( PlannerDataStorage_exposer );
        { //::ompl::base::PlannerDataStorage::load
        
            typedef void ( ::ompl::base::PlannerDataStorage::*load_function_type)( char const *,::ompl::base::PlannerData & ) ;
            typedef void ( PlannerDataStorage_wrapper::*default_load_function_type)( char const *,::ompl::base::PlannerData & ) ;
            
            PlannerDataStorage_exposer.def( 
                "load"
                , load_function_type(&::ompl::base::PlannerDataStorage::load)
                , default_load_function_type(&PlannerDataStorage_wrapper::default_load)
                , ( bp::arg("filename"), bp::arg("pd") ) );
        
        }
        { //::ompl::base::PlannerDataStorage::load
        
            typedef void ( ::ompl::base::PlannerDataStorage::*load_function_type)( ::std::istream &,::ompl::base::PlannerData & ) ;
            typedef void ( PlannerDataStorage_wrapper::*default_load_function_type)( ::std::istream &,::ompl::base::PlannerData & ) ;
            
            PlannerDataStorage_exposer.def( 
                "load"
                , load_function_type(&::ompl::base::PlannerDataStorage::load)
                , default_load_function_type(&PlannerDataStorage_wrapper::default_load)
                , ( bp::arg("in"), bp::arg("pd") ) );
        
        }
        { //::ompl::base::PlannerDataStorage::loadEdges
        
            typedef void ( PlannerDataStorage_wrapper::*loadEdges_function_type)( ::ompl::base::PlannerData &,unsigned int,::boost::archive::binary_iarchive & ) ;
            
            PlannerDataStorage_exposer.def( 
                "loadEdges"
                , loadEdges_function_type( &PlannerDataStorage_wrapper::default_loadEdges )
                , ( bp::arg("pd"), bp::arg("numEdges"), bp::arg("ia") ) );
        
        }
        { //::ompl::base::PlannerDataStorage::loadVertices
        
            typedef void ( PlannerDataStorage_wrapper::*loadVertices_function_type)( ::ompl::base::PlannerData &,unsigned int,::boost::archive::binary_iarchive & ) ;
            
            PlannerDataStorage_exposer.def( 
                "loadVertices"
                , loadVertices_function_type( &PlannerDataStorage_wrapper::default_loadVertices )
                , ( bp::arg("pd"), bp::arg("numVertices"), bp::arg("ia") ) );
        
        }
        { //::ompl::base::PlannerDataStorage::store
        
            typedef void ( ::ompl::base::PlannerDataStorage::*store_function_type)( ::ompl::base::PlannerData const &,char const * ) ;
            typedef void ( PlannerDataStorage_wrapper::*default_store_function_type)( ::ompl::base::PlannerData const &,char const * ) ;
            
            PlannerDataStorage_exposer.def( 
                "store"
                , store_function_type(&::ompl::base::PlannerDataStorage::store)
                , default_store_function_type(&PlannerDataStorage_wrapper::default_store)
                , ( bp::arg("pd"), bp::arg("filename") ) );
        
        }
        { //::ompl::base::PlannerDataStorage::store
        
            typedef void ( ::ompl::base::PlannerDataStorage::*store_function_type)( ::ompl::base::PlannerData const &,::std::ostream & ) ;
            typedef void ( PlannerDataStorage_wrapper::*default_store_function_type)( ::ompl::base::PlannerData const &,::std::ostream & ) ;
            
            PlannerDataStorage_exposer.def( 
                "store"
                , store_function_type(&::ompl::base::PlannerDataStorage::store)
                , default_store_function_type(&PlannerDataStorage_wrapper::default_store)
                , ( bp::arg("pd"), bp::arg("out") ) );
        
        }
        { //::ompl::base::PlannerDataStorage::storeEdges
        
            typedef void ( PlannerDataStorage_wrapper::*storeEdges_function_type)( ::ompl::base::PlannerData const &,::boost::archive::binary_oarchive & ) ;
            
            PlannerDataStorage_exposer.def( 
                "storeEdges"
                , storeEdges_function_type( &PlannerDataStorage_wrapper::default_storeEdges )
                , ( bp::arg("pd"), bp::arg("oa") ) );
        
        }
        { //::ompl::base::PlannerDataStorage::storeVertices
        
            typedef void ( PlannerDataStorage_wrapper::*storeVertices_function_type)( ::ompl::base::PlannerData const &,::boost::archive::binary_oarchive & ) ;
            
            PlannerDataStorage_exposer.def( 
                "storeVertices"
                , storeVertices_function_type( &PlannerDataStorage_wrapper::default_storeVertices )
                , ( bp::arg("pd"), bp::arg("oa") ) );
        
        }
    }

}
