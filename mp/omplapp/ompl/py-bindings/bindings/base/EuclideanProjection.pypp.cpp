// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "EuclideanProjection.pypp.hpp"

namespace bp = boost::python;

double __getitem(::boost::numeric::ublas::vector<double, boost::numeric::ublas::unbounded_array<double, std::allocator<double> > >* obj, unsigned int i)
{
    return (*obj)[i];
}

void __setitem(::boost::numeric::ublas::vector<double, boost::numeric::ublas::unbounded_array<double, std::allocator<double> > >* obj, unsigned int i, double val)
{
    (*obj)[i] = val;
}

void register_EuclideanProjection_class(){

    { //::boost::numeric::ublas::vector<double, boost::numeric::ublas::unbounded_array<double, std::allocator<double> > >
        typedef bp::class_< boost::numeric::ublas::vector<double, boost::numeric::ublas::unbounded_array<double, std::allocator<double> > > > EuclideanProjection_exposer_t;
        EuclideanProjection_exposer_t EuclideanProjection_exposer = EuclideanProjection_exposer_t( "EuclideanProjection", bp::init< >() );
        bp::scope EuclideanProjection_scope( EuclideanProjection_exposer );
        EuclideanProjection_exposer.def( bp::init< std::size_t >(( bp::arg("size") )) );
        bp::implicitly_convertible< std::size_t, boost::numeric::ublas::vector<double, boost::numeric::ublas::unbounded_array<double, std::allocator<double> > > >();
        EuclideanProjection_exposer.def( bp::init< std::size_t, boost::numeric::ublas::unbounded_array< double, std::allocator< double > > const & >(( bp::arg("size"), bp::arg("data") )) );
        EuclideanProjection_exposer.def( bp::init< boost::numeric::ublas::unbounded_array< double, std::allocator< double > > const & >(( bp::arg("data") )) );
        bp::implicitly_convertible< boost::numeric::ublas::unbounded_array< double, std::allocator< double > > const &, boost::numeric::ublas::vector<double, boost::numeric::ublas::unbounded_array<double, std::allocator<double> > > >();
        EuclideanProjection_exposer.def( bp::init< std::size_t, double const & >(( bp::arg("size"), bp::arg("init") )) );
        EuclideanProjection_exposer.def( bp::init< boost::numeric::ublas::vector<double, boost::numeric::ublas::unbounded_array<double, std::allocator<double> > > const & >(( bp::arg("v") )) );
        EuclideanProjection_exposer.def("__getitem__", &__getitem);
        EuclideanProjection_exposer.def("__setitem__", &__setitem);
    }

}
