// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "GaussianValidStateSampler.pypp.hpp"

namespace bp = boost::python;

struct GaussianValidStateSampler_wrapper : ompl::base::GaussianValidStateSampler, bp::wrapper< ompl::base::GaussianValidStateSampler > {

    GaussianValidStateSampler_wrapper(::ompl::base::SpaceInformation const * si )
    : ompl::base::GaussianValidStateSampler( boost::python::ptr(si) )
      , bp::wrapper< ompl::base::GaussianValidStateSampler >(){
        // constructor
    
    }

    virtual bool sample( ::ompl::base::State * state ) {
        if( bp::override func_sample = this->get_override( "sample" ) )
            return func_sample( boost::python::ptr(state) );
        else{
            return this->ompl::base::GaussianValidStateSampler::sample( boost::python::ptr(state) );
        }
    }
    
    bool default_sample( ::ompl::base::State * state ) {
        return ompl::base::GaussianValidStateSampler::sample( boost::python::ptr(state) );
    }

    virtual bool sampleNear( ::ompl::base::State * state, ::ompl::base::State const * near, double const distance ) {
        if( bp::override func_sampleNear = this->get_override( "sampleNear" ) )
            return func_sampleNear( boost::python::ptr(state), boost::python::ptr(near), distance );
        else{
            return this->ompl::base::GaussianValidStateSampler::sampleNear( boost::python::ptr(state), boost::python::ptr(near), distance );
        }
    }
    
    bool default_sampleNear( ::ompl::base::State * state, ::ompl::base::State const * near, double const distance ) {
        return ompl::base::GaussianValidStateSampler::sampleNear( boost::python::ptr(state), boost::python::ptr(near), distance );
    }

};

void register_GaussianValidStateSampler_class(){

    { //::ompl::base::GaussianValidStateSampler
        typedef bp::class_< GaussianValidStateSampler_wrapper, bp::bases< ompl::base::ValidStateSampler >, boost::noncopyable > GaussianValidStateSampler_exposer_t;
        GaussianValidStateSampler_exposer_t GaussianValidStateSampler_exposer = GaussianValidStateSampler_exposer_t( "GaussianValidStateSampler", bp::init< ompl::base::SpaceInformation const * >(( bp::arg("si") )) );
        bp::scope GaussianValidStateSampler_scope( GaussianValidStateSampler_exposer );
        bp::implicitly_convertible< ompl::base::SpaceInformation const *, ompl::base::GaussianValidStateSampler >();
        { //::ompl::base::GaussianValidStateSampler::getStdDev
        
            typedef double ( ::ompl::base::GaussianValidStateSampler::*getStdDev_function_type)(  ) const;
            
            GaussianValidStateSampler_exposer.def( 
                "getStdDev"
                , getStdDev_function_type( &::ompl::base::GaussianValidStateSampler::getStdDev ) );
        
        }
        { //::ompl::base::GaussianValidStateSampler::sample
        
            typedef bool ( ::ompl::base::GaussianValidStateSampler::*sample_function_type)( ::ompl::base::State * ) ;
            typedef bool ( GaussianValidStateSampler_wrapper::*default_sample_function_type)( ::ompl::base::State * ) ;
            
            GaussianValidStateSampler_exposer.def( 
                "sample"
                , sample_function_type(&::ompl::base::GaussianValidStateSampler::sample)
                , default_sample_function_type(&GaussianValidStateSampler_wrapper::default_sample)
                , ( bp::arg("state") ) );
        
        }
        { //::ompl::base::GaussianValidStateSampler::sampleNear
        
            typedef bool ( ::ompl::base::GaussianValidStateSampler::*sampleNear_function_type)( ::ompl::base::State *,::ompl::base::State const *,double const ) ;
            typedef bool ( GaussianValidStateSampler_wrapper::*default_sampleNear_function_type)( ::ompl::base::State *,::ompl::base::State const *,double const ) ;
            
            GaussianValidStateSampler_exposer.def( 
                "sampleNear"
                , sampleNear_function_type(&::ompl::base::GaussianValidStateSampler::sampleNear)
                , default_sampleNear_function_type(&GaussianValidStateSampler_wrapper::default_sampleNear)
                , ( bp::arg("state"), bp::arg("near"), bp::arg("distance") ) );
        
        }
        { //::ompl::base::GaussianValidStateSampler::setStdDev
        
            typedef void ( ::ompl::base::GaussianValidStateSampler::*setStdDev_function_type)( double ) ;
            
            GaussianValidStateSampler_exposer.def( 
                "setStdDev"
                , setStdDev_function_type( &::ompl::base::GaussianValidStateSampler::setStdDev )
                , ( bp::arg("stddev") ) );
        
        }
    }

}
