// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "PlannerData.pypp.hpp"

namespace bp = boost::python;

struct PlannerData_wrapper : ompl::base::PlannerData, bp::wrapper< ompl::base::PlannerData > {

    PlannerData_wrapper(::ompl::base::SpaceInformationPtr const & si )
    : ompl::base::PlannerData( si )
      , bp::wrapper< ompl::base::PlannerData >(){
        // constructor
    
    }

    virtual bool addEdge( unsigned int v1, unsigned int v2, ::ompl::base::PlannerDataEdge const & edge=ompl::base::PlannerDataEdge(), ::ompl::base::Cost weight=ompl::base::Cost(1.0e+0) ) {
        if( bp::override func_addEdge = this->get_override( "addEdge" ) )
            return func_addEdge( v1, v2, boost::ref(edge), weight );
        else{
            return this->ompl::base::PlannerData::addEdge( v1, v2, boost::ref(edge), weight );
        }
    }
    
    bool default_addEdge( unsigned int v1, unsigned int v2, ::ompl::base::PlannerDataEdge const & edge=ompl::base::PlannerDataEdge(), ::ompl::base::Cost weight=ompl::base::Cost(1.0e+0) ) {
        return ompl::base::PlannerData::addEdge( v1, v2, boost::ref(edge), weight );
    }

    virtual bool addEdge( ::ompl::base::PlannerDataVertex const & v1, ::ompl::base::PlannerDataVertex const & v2, ::ompl::base::PlannerDataEdge const & edge=ompl::base::PlannerDataEdge(), ::ompl::base::Cost weight=ompl::base::Cost(1.0e+0) ) {
        if( bp::override func_addEdge = this->get_override( "addEdge" ) )
            return func_addEdge( boost::ref(v1), boost::ref(v2), boost::ref(edge), weight );
        else{
            return this->ompl::base::PlannerData::addEdge( boost::ref(v1), boost::ref(v2), boost::ref(edge), weight );
        }
    }
    
    bool default_addEdge( ::ompl::base::PlannerDataVertex const & v1, ::ompl::base::PlannerDataVertex const & v2, ::ompl::base::PlannerDataEdge const & edge=ompl::base::PlannerDataEdge(), ::ompl::base::Cost weight=ompl::base::Cost(1.0e+0) ) {
        return ompl::base::PlannerData::addEdge( boost::ref(v1), boost::ref(v2), boost::ref(edge), weight );
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->ompl::base::PlannerData::clear(  );
        }
    }
    
    void default_clear(  ) {
        ompl::base::PlannerData::clear( );
    }

    virtual void decoupleFromPlanner(  ) {
        if( bp::override func_decoupleFromPlanner = this->get_override( "decoupleFromPlanner" ) )
            func_decoupleFromPlanner(  );
        else{
            this->ompl::base::PlannerData::decoupleFromPlanner(  );
        }
    }
    
    void default_decoupleFromPlanner(  ) {
        ompl::base::PlannerData::decoupleFromPlanner( );
    }

    virtual bool hasControls(  ) const  {
        if( bp::override func_hasControls = this->get_override( "hasControls" ) )
            return func_hasControls(  );
        else{
            return this->ompl::base::PlannerData::hasControls(  );
        }
    }
    
    bool default_hasControls(  ) const  {
        return ompl::base::PlannerData::hasControls( );
    }

    virtual bool removeEdge( unsigned int v1, unsigned int v2 ) {
        if( bp::override func_removeEdge = this->get_override( "removeEdge" ) )
            return func_removeEdge( v1, v2 );
        else{
            return this->ompl::base::PlannerData::removeEdge( v1, v2 );
        }
    }
    
    bool default_removeEdge( unsigned int v1, unsigned int v2 ) {
        return ompl::base::PlannerData::removeEdge( v1, v2 );
    }

    virtual bool removeEdge( ::ompl::base::PlannerDataVertex const & v1, ::ompl::base::PlannerDataVertex const & v2 ) {
        if( bp::override func_removeEdge = this->get_override( "removeEdge" ) )
            return func_removeEdge( boost::ref(v1), boost::ref(v2) );
        else{
            return this->ompl::base::PlannerData::removeEdge( boost::ref(v1), boost::ref(v2) );
        }
    }
    
    bool default_removeEdge( ::ompl::base::PlannerDataVertex const & v1, ::ompl::base::PlannerDataVertex const & v2 ) {
        return ompl::base::PlannerData::removeEdge( boost::ref(v1), boost::ref(v2) );
    }

    virtual bool removeVertex( ::ompl::base::PlannerDataVertex const & st ) {
        if( bp::override func_removeVertex = this->get_override( "removeVertex" ) )
            return func_removeVertex( boost::ref(st) );
        else{
            return this->ompl::base::PlannerData::removeVertex( boost::ref(st) );
        }
    }
    
    bool default_removeVertex( ::ompl::base::PlannerDataVertex const & st ) {
        return ompl::base::PlannerData::removeVertex( boost::ref(st) );
    }

    virtual bool removeVertex( unsigned int vIndex ) {
        if( bp::override func_removeVertex = this->get_override( "removeVertex" ) )
            return func_removeVertex( vIndex );
        else{
            return this->ompl::base::PlannerData::removeVertex( vIndex );
        }
    }
    
    bool default_removeVertex( unsigned int vIndex ) {
        return ompl::base::PlannerData::removeVertex( vIndex );
    }

};

std::string __printGraphviz(::ompl::base::PlannerData* obj)
        {
            std::ostringstream s;
            obj->printGraphviz(s);
            return s.str();
        }

std::string __printGraphML(::ompl::base::PlannerData* obj)
        {
            std::ostringstream s;
            obj->printGraphML(s);
            return s.str();
        }

void register_PlannerData_class(){

    { //::ompl::base::PlannerData
        typedef bp::class_< PlannerData_wrapper, boost::noncopyable > PlannerData_exposer_t;
        PlannerData_exposer_t PlannerData_exposer = PlannerData_exposer_t( "PlannerData", bp::init< ompl::base::SpaceInformationPtr const & >(( bp::arg("si") )) );
        bp::scope PlannerData_scope( PlannerData_exposer );
        bp::implicitly_convertible< ompl::base::SpaceInformationPtr const &, ompl::base::PlannerData >();
        { //::ompl::base::PlannerData::addEdge
        
            typedef bool ( ::ompl::base::PlannerData::*addEdge_function_type)( unsigned int,unsigned int,::ompl::base::PlannerDataEdge const &,::ompl::base::Cost ) ;
            typedef bool ( PlannerData_wrapper::*default_addEdge_function_type)( unsigned int,unsigned int,::ompl::base::PlannerDataEdge const &,::ompl::base::Cost ) ;
            
            PlannerData_exposer.def( 
                "addEdge"
                , addEdge_function_type(&::ompl::base::PlannerData::addEdge)
                , default_addEdge_function_type(&PlannerData_wrapper::default_addEdge)
                , ( bp::arg("v1"), bp::arg("v2"), bp::arg("edge")=ompl::base::PlannerDataEdge(), bp::arg("weight")=ompl::base::Cost(1.0e+0) ) );
        
        }
        { //::ompl::base::PlannerData::addEdge
        
            typedef bool ( ::ompl::base::PlannerData::*addEdge_function_type)( ::ompl::base::PlannerDataVertex const &,::ompl::base::PlannerDataVertex const &,::ompl::base::PlannerDataEdge const &,::ompl::base::Cost ) ;
            typedef bool ( PlannerData_wrapper::*default_addEdge_function_type)( ::ompl::base::PlannerDataVertex const &,::ompl::base::PlannerDataVertex const &,::ompl::base::PlannerDataEdge const &,::ompl::base::Cost ) ;
            
            PlannerData_exposer.def( 
                "addEdge"
                , addEdge_function_type(&::ompl::base::PlannerData::addEdge)
                , default_addEdge_function_type(&PlannerData_wrapper::default_addEdge)
                , ( bp::arg("v1"), bp::arg("v2"), bp::arg("edge")=ompl::base::PlannerDataEdge(), bp::arg("weight")=ompl::base::Cost(1.0e+0) ) );
        
        }
        { //::ompl::base::PlannerData::addGoalVertex
        
            typedef unsigned int ( ::ompl::base::PlannerData::*addGoalVertex_function_type)( ::ompl::base::PlannerDataVertex const & ) ;
            
            PlannerData_exposer.def( 
                "addGoalVertex"
                , addGoalVertex_function_type( &::ompl::base::PlannerData::addGoalVertex )
                , ( bp::arg("v") ) );
        
        }
        { //::ompl::base::PlannerData::addStartVertex
        
            typedef unsigned int ( ::ompl::base::PlannerData::*addStartVertex_function_type)( ::ompl::base::PlannerDataVertex const & ) ;
            
            PlannerData_exposer.def( 
                "addStartVertex"
                , addStartVertex_function_type( &::ompl::base::PlannerData::addStartVertex )
                , ( bp::arg("v") ) );
        
        }
        { //::ompl::base::PlannerData::addVertex
        
            typedef unsigned int ( ::ompl::base::PlannerData::*addVertex_function_type)( ::ompl::base::PlannerDataVertex const & ) ;
            
            PlannerData_exposer.def( 
                "addVertex"
                , addVertex_function_type( &::ompl::base::PlannerData::addVertex )
                , ( bp::arg("st") ) );
        
        }
        { //::ompl::base::PlannerData::clear
        
            typedef void ( ::ompl::base::PlannerData::*clear_function_type)(  ) ;
            typedef void ( PlannerData_wrapper::*default_clear_function_type)(  ) ;
            
            PlannerData_exposer.def( 
                "clear"
                , clear_function_type(&::ompl::base::PlannerData::clear)
                , default_clear_function_type(&PlannerData_wrapper::default_clear) );
        
        }
        { //::ompl::base::PlannerData::computeEdgeWeights
        
            typedef void ( ::ompl::base::PlannerData::*computeEdgeWeights_function_type)( ::ompl::base::OptimizationObjective const & ) ;
            
            PlannerData_exposer.def( 
                "computeEdgeWeights"
                , computeEdgeWeights_function_type( &::ompl::base::PlannerData::computeEdgeWeights )
                , ( bp::arg("opt") ) );
        
        }
        { //::ompl::base::PlannerData::computeEdgeWeights
        
            typedef void ( ::ompl::base::PlannerData::*computeEdgeWeights_function_type)(  ) ;
            
            PlannerData_exposer.def( 
                "computeEdgeWeights"
                , computeEdgeWeights_function_type( &::ompl::base::PlannerData::computeEdgeWeights ) );
        
        }
        { //::ompl::base::PlannerData::decoupleFromPlanner
        
            typedef void ( ::ompl::base::PlannerData::*decoupleFromPlanner_function_type)(  ) ;
            typedef void ( PlannerData_wrapper::*default_decoupleFromPlanner_function_type)(  ) ;
            
            PlannerData_exposer.def( 
                "decoupleFromPlanner"
                , decoupleFromPlanner_function_type(&::ompl::base::PlannerData::decoupleFromPlanner)
                , default_decoupleFromPlanner_function_type(&PlannerData_wrapper::default_decoupleFromPlanner) );
        
        }
        { //::ompl::base::PlannerData::edgeExists
        
            typedef bool ( ::ompl::base::PlannerData::*edgeExists_function_type)( unsigned int,unsigned int ) const;
            
            PlannerData_exposer.def( 
                "edgeExists"
                , edgeExists_function_type( &::ompl::base::PlannerData::edgeExists )
                , ( bp::arg("v1"), bp::arg("v2") ) );
        
        }
        { //::ompl::base::PlannerData::extractMinimumSpanningTree
        
            typedef void ( ::ompl::base::PlannerData::*extractMinimumSpanningTree_function_type)( unsigned int,::ompl::base::OptimizationObjective const &,::ompl::base::PlannerData & ) const;
            
            PlannerData_exposer.def( 
                "extractMinimumSpanningTree"
                , extractMinimumSpanningTree_function_type( &::ompl::base::PlannerData::extractMinimumSpanningTree )
                , ( bp::arg("v"), bp::arg("opt"), bp::arg("mst") ) );
        
        }
        { //::ompl::base::PlannerData::extractReachable
        
            typedef void ( ::ompl::base::PlannerData::*extractReachable_function_type)( unsigned int,::ompl::base::PlannerData & ) const;
            
            PlannerData_exposer.def( 
                "extractReachable"
                , extractReachable_function_type( &::ompl::base::PlannerData::extractReachable )
                , ( bp::arg("v"), bp::arg("data") ) );
        
        }
        { //::ompl::base::PlannerData::extractStateStorage
        
            typedef ::ompl::base::StateStoragePtr ( ::ompl::base::PlannerData::*extractStateStorage_function_type)(  ) const;
            
            PlannerData_exposer.def( 
                "extractStateStorage"
                , extractStateStorage_function_type( &::ompl::base::PlannerData::extractStateStorage ) );
        
        }
        { //::ompl::base::PlannerData::getEdge
        
            typedef ::ompl::base::PlannerDataEdge const & ( ::ompl::base::PlannerData::*getEdge_function_type)( unsigned int,unsigned int ) const;
            
            PlannerData_exposer.def( 
                "getEdge"
                , getEdge_function_type( &::ompl::base::PlannerData::getEdge )
                , ( bp::arg("v1"), bp::arg("v2") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::PlannerData::getEdge
        
            typedef ::ompl::base::PlannerDataEdge & ( ::ompl::base::PlannerData::*getEdge_function_type)( unsigned int,unsigned int ) ;
            
            PlannerData_exposer.def( 
                "getEdge"
                , getEdge_function_type( &::ompl::base::PlannerData::getEdge )
                , ( bp::arg("v1"), bp::arg("v2") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::PlannerData::getEdgeWeight
        
            typedef bool ( ::ompl::base::PlannerData::*getEdgeWeight_function_type)( unsigned int,unsigned int,::ompl::base::Cost * ) const;
            
            PlannerData_exposer.def( 
                "getEdgeWeight"
                , getEdgeWeight_function_type( &::ompl::base::PlannerData::getEdgeWeight )
                , ( bp::arg("v1"), bp::arg("v2"), bp::arg("weight") ) );
        
        }
        { //::ompl::base::PlannerData::getEdges
        
            typedef unsigned int ( ::ompl::base::PlannerData::*getEdges_function_type)( unsigned int,::std::vector< unsigned int > & ) const;
            
            PlannerData_exposer.def( 
                "getEdges"
                , getEdges_function_type( &::ompl::base::PlannerData::getEdges )
                , ( bp::arg("v"), bp::arg("edgeList") ) );
        
        }
        { //::ompl::base::PlannerData::getEdges
        
            typedef unsigned int ( ::ompl::base::PlannerData::*getEdges_function_type)( unsigned int,::std::map< unsigned int, ompl::base::PlannerDataEdge const* > & ) const;
            
            PlannerData_exposer.def( 
                "getEdges"
                , getEdges_function_type( &::ompl::base::PlannerData::getEdges )
                , ( bp::arg("v"), bp::arg("edgeMap") ) );
        
        }
        { //::ompl::base::PlannerData::getGoalIndex
        
            typedef unsigned int ( ::ompl::base::PlannerData::*getGoalIndex_function_type)( unsigned int ) const;
            
            PlannerData_exposer.def( 
                "getGoalIndex"
                , getGoalIndex_function_type( &::ompl::base::PlannerData::getGoalIndex )
                , ( bp::arg("i") ) );
        
        }
        { //::ompl::base::PlannerData::getGoalVertex
        
            typedef ::ompl::base::PlannerDataVertex const & ( ::ompl::base::PlannerData::*getGoalVertex_function_type)( unsigned int ) const;
            
            PlannerData_exposer.def( 
                "getGoalVertex"
                , getGoalVertex_function_type( &::ompl::base::PlannerData::getGoalVertex )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::PlannerData::getGoalVertex
        
            typedef ::ompl::base::PlannerDataVertex & ( ::ompl::base::PlannerData::*getGoalVertex_function_type)( unsigned int ) ;
            
            PlannerData_exposer.def( 
                "getGoalVertex"
                , getGoalVertex_function_type( &::ompl::base::PlannerData::getGoalVertex )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::PlannerData::getIncomingEdges
        
            typedef unsigned int ( ::ompl::base::PlannerData::*getIncomingEdges_function_type)( unsigned int,::std::vector< unsigned int > & ) const;
            
            PlannerData_exposer.def( 
                "getIncomingEdges"
                , getIncomingEdges_function_type( &::ompl::base::PlannerData::getIncomingEdges )
                , ( bp::arg("v"), bp::arg("edgeList") ) );
        
        }
        { //::ompl::base::PlannerData::getIncomingEdges
        
            typedef unsigned int ( ::ompl::base::PlannerData::*getIncomingEdges_function_type)( unsigned int,::std::map< unsigned int, ompl::base::PlannerDataEdge const* > & ) const;
            
            PlannerData_exposer.def( 
                "getIncomingEdges"
                , getIncomingEdges_function_type( &::ompl::base::PlannerData::getIncomingEdges )
                , ( bp::arg("v"), bp::arg("edgeMap") ) );
        
        }
        { //::ompl::base::PlannerData::getSpaceInformation
        
            typedef ::ompl::base::SpaceInformationPtr const & ( ::ompl::base::PlannerData::*getSpaceInformation_function_type)(  ) const;
            
            PlannerData_exposer.def( 
                "getSpaceInformation"
                , getSpaceInformation_function_type( &::ompl::base::PlannerData::getSpaceInformation )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::PlannerData::getStartIndex
        
            typedef unsigned int ( ::ompl::base::PlannerData::*getStartIndex_function_type)( unsigned int ) const;
            
            PlannerData_exposer.def( 
                "getStartIndex"
                , getStartIndex_function_type( &::ompl::base::PlannerData::getStartIndex )
                , ( bp::arg("i") ) );
        
        }
        { //::ompl::base::PlannerData::getStartVertex
        
            typedef ::ompl::base::PlannerDataVertex const & ( ::ompl::base::PlannerData::*getStartVertex_function_type)( unsigned int ) const;
            
            PlannerData_exposer.def( 
                "getStartVertex"
                , getStartVertex_function_type( &::ompl::base::PlannerData::getStartVertex )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::PlannerData::getStartVertex
        
            typedef ::ompl::base::PlannerDataVertex & ( ::ompl::base::PlannerData::*getStartVertex_function_type)( unsigned int ) ;
            
            PlannerData_exposer.def( 
                "getStartVertex"
                , getStartVertex_function_type( &::ompl::base::PlannerData::getStartVertex )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::PlannerData::getVertex
        
            typedef ::ompl::base::PlannerDataVertex const & ( ::ompl::base::PlannerData::*getVertex_function_type)( unsigned int ) const;
            
            PlannerData_exposer.def( 
                "getVertex"
                , getVertex_function_type( &::ompl::base::PlannerData::getVertex )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::PlannerData::getVertex
        
            typedef ::ompl::base::PlannerDataVertex & ( ::ompl::base::PlannerData::*getVertex_function_type)( unsigned int ) ;
            
            PlannerData_exposer.def( 
                "getVertex"
                , getVertex_function_type( &::ompl::base::PlannerData::getVertex )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::PlannerData::hasControls
        
            typedef bool ( ::ompl::base::PlannerData::*hasControls_function_type)(  ) const;
            typedef bool ( PlannerData_wrapper::*default_hasControls_function_type)(  ) const;
            
            PlannerData_exposer.def( 
                "hasControls"
                , hasControls_function_type(&::ompl::base::PlannerData::hasControls)
                , default_hasControls_function_type(&PlannerData_wrapper::default_hasControls) );
        
        }
        { //::ompl::base::PlannerData::isGoalVertex
        
            typedef bool ( ::ompl::base::PlannerData::*isGoalVertex_function_type)( unsigned int ) const;
            
            PlannerData_exposer.def( 
                "isGoalVertex"
                , isGoalVertex_function_type( &::ompl::base::PlannerData::isGoalVertex )
                , ( bp::arg("index") ) );
        
        }
        { //::ompl::base::PlannerData::isStartVertex
        
            typedef bool ( ::ompl::base::PlannerData::*isStartVertex_function_type)( unsigned int ) const;
            
            PlannerData_exposer.def( 
                "isStartVertex"
                , isStartVertex_function_type( &::ompl::base::PlannerData::isStartVertex )
                , ( bp::arg("index") ) );
        
        }
        { //::ompl::base::PlannerData::markGoalState
        
            typedef bool ( ::ompl::base::PlannerData::*markGoalState_function_type)( ::ompl::base::State const * ) ;
            
            PlannerData_exposer.def( 
                "markGoalState"
                , markGoalState_function_type( &::ompl::base::PlannerData::markGoalState )
                , ( bp::arg("st") ) );
        
        }
        { //::ompl::base::PlannerData::markStartState
        
            typedef bool ( ::ompl::base::PlannerData::*markStartState_function_type)( ::ompl::base::State const * ) ;
            
            PlannerData_exposer.def( 
                "markStartState"
                , markStartState_function_type( &::ompl::base::PlannerData::markStartState )
                , ( bp::arg("st") ) );
        
        }
        { //::ompl::base::PlannerData::numEdges
        
            typedef unsigned int ( ::ompl::base::PlannerData::*numEdges_function_type)(  ) const;
            
            PlannerData_exposer.def( 
                "numEdges"
                , numEdges_function_type( &::ompl::base::PlannerData::numEdges ) );
        
        }
        { //::ompl::base::PlannerData::numGoalVertices
        
            typedef unsigned int ( ::ompl::base::PlannerData::*numGoalVertices_function_type)(  ) const;
            
            PlannerData_exposer.def( 
                "numGoalVertices"
                , numGoalVertices_function_type( &::ompl::base::PlannerData::numGoalVertices ) );
        
        }
        { //::ompl::base::PlannerData::numStartVertices
        
            typedef unsigned int ( ::ompl::base::PlannerData::*numStartVertices_function_type)(  ) const;
            
            PlannerData_exposer.def( 
                "numStartVertices"
                , numStartVertices_function_type( &::ompl::base::PlannerData::numStartVertices ) );
        
        }
        { //::ompl::base::PlannerData::numVertices
        
            typedef unsigned int ( ::ompl::base::PlannerData::*numVertices_function_type)(  ) const;
            
            PlannerData_exposer.def( 
                "numVertices"
                , numVertices_function_type( &::ompl::base::PlannerData::numVertices ) );
        
        }
        { //::ompl::base::PlannerData::removeEdge
        
            typedef bool ( ::ompl::base::PlannerData::*removeEdge_function_type)( unsigned int,unsigned int ) ;
            typedef bool ( PlannerData_wrapper::*default_removeEdge_function_type)( unsigned int,unsigned int ) ;
            
            PlannerData_exposer.def( 
                "removeEdge"
                , removeEdge_function_type(&::ompl::base::PlannerData::removeEdge)
                , default_removeEdge_function_type(&PlannerData_wrapper::default_removeEdge)
                , ( bp::arg("v1"), bp::arg("v2") ) );
        
        }
        { //::ompl::base::PlannerData::removeEdge
        
            typedef bool ( ::ompl::base::PlannerData::*removeEdge_function_type)( ::ompl::base::PlannerDataVertex const &,::ompl::base::PlannerDataVertex const & ) ;
            typedef bool ( PlannerData_wrapper::*default_removeEdge_function_type)( ::ompl::base::PlannerDataVertex const &,::ompl::base::PlannerDataVertex const & ) ;
            
            PlannerData_exposer.def( 
                "removeEdge"
                , removeEdge_function_type(&::ompl::base::PlannerData::removeEdge)
                , default_removeEdge_function_type(&PlannerData_wrapper::default_removeEdge)
                , ( bp::arg("v1"), bp::arg("v2") ) );
        
        }
        { //::ompl::base::PlannerData::removeVertex
        
            typedef bool ( ::ompl::base::PlannerData::*removeVertex_function_type)( ::ompl::base::PlannerDataVertex const & ) ;
            typedef bool ( PlannerData_wrapper::*default_removeVertex_function_type)( ::ompl::base::PlannerDataVertex const & ) ;
            
            PlannerData_exposer.def( 
                "removeVertex"
                , removeVertex_function_type(&::ompl::base::PlannerData::removeVertex)
                , default_removeVertex_function_type(&PlannerData_wrapper::default_removeVertex)
                , ( bp::arg("st") ) );
        
        }
        { //::ompl::base::PlannerData::removeVertex
        
            typedef bool ( ::ompl::base::PlannerData::*removeVertex_function_type)( unsigned int ) ;
            typedef bool ( PlannerData_wrapper::*default_removeVertex_function_type)( unsigned int ) ;
            
            PlannerData_exposer.def( 
                "removeVertex"
                , removeVertex_function_type(&::ompl::base::PlannerData::removeVertex)
                , default_removeVertex_function_type(&PlannerData_wrapper::default_removeVertex)
                , ( bp::arg("vIndex") ) );
        
        }
        { //::ompl::base::PlannerData::setEdgeWeight
        
            typedef bool ( ::ompl::base::PlannerData::*setEdgeWeight_function_type)( unsigned int,unsigned int,::ompl::base::Cost ) ;
            
            PlannerData_exposer.def( 
                "setEdgeWeight"
                , setEdgeWeight_function_type( &::ompl::base::PlannerData::setEdgeWeight )
                , ( bp::arg("v1"), bp::arg("v2"), bp::arg("weight") ) );
        
        }
        { //::ompl::base::PlannerData::tagState
        
            typedef bool ( ::ompl::base::PlannerData::*tagState_function_type)( ::ompl::base::State const *,int ) ;
            
            PlannerData_exposer.def( 
                "tagState"
                , tagState_function_type( &::ompl::base::PlannerData::tagState )
                , ( bp::arg("st"), bp::arg("tag") ) );
        
        }
        { //::ompl::base::PlannerData::vertexExists
        
            typedef bool ( ::ompl::base::PlannerData::*vertexExists_function_type)( ::ompl::base::PlannerDataVertex const & ) const;
            
            PlannerData_exposer.def( 
                "vertexExists"
                , vertexExists_function_type( &::ompl::base::PlannerData::vertexExists )
                , ( bp::arg("v") ) );
        
        }
        { //::ompl::base::PlannerData::vertexIndex
        
            typedef unsigned int ( ::ompl::base::PlannerData::*vertexIndex_function_type)( ::ompl::base::PlannerDataVertex const & ) const;
            
            PlannerData_exposer.def( 
                "vertexIndex"
                , vertexIndex_function_type( &::ompl::base::PlannerData::vertexIndex )
                , ( bp::arg("v") ) );
        
        }
        PlannerData_exposer.def_readonly( "INVALID_INDEX", ompl::base::PlannerData::INVALID_INDEX );
        PlannerData_exposer.def_readonly( "NO_EDGE", ompl::base::PlannerData::NO_EDGE );
        PlannerData_exposer.def_readonly( "NO_VERTEX", ompl::base::PlannerData::NO_VERTEX );
        PlannerData_exposer.def_readwrite( "properties", &ompl::base::PlannerData::properties );
        PlannerData_exposer.def("printGraphviz", &__printGraphviz);
        PlannerData_exposer.def("printGraphML", &__printGraphML);
    }

}
