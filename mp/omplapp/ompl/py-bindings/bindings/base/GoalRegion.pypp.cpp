// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "GoalRegion.pypp.hpp"

namespace bp = boost::python;

struct GoalRegion_wrapper : ompl::base::GoalRegion, bp::wrapper< ompl::base::GoalRegion > {

    GoalRegion_wrapper(::ompl::base::SpaceInformationPtr const & si )
    : ompl::base::GoalRegion( si )
      , bp::wrapper< ompl::base::GoalRegion >(){
        // constructor
    
    }

    virtual double distanceGoal( ::ompl::base::State const * st ) const {
        bp::override func_distanceGoal = this->get_override( "distanceGoal" );
        return func_distanceGoal( boost::python::ptr(st) );
    }

    virtual bool isSatisfied( ::ompl::base::State const * st ) const  {
        if( bp::override func_isSatisfied = this->get_override( "isSatisfied" ) )
            return func_isSatisfied( boost::python::ptr(st) );
        else{
            return this->ompl::base::GoalRegion::isSatisfied( boost::python::ptr(st) );
        }
    }
    
    bool default_isSatisfied( ::ompl::base::State const * st ) const  {
        return ompl::base::GoalRegion::isSatisfied( boost::python::ptr(st) );
    }

    virtual bool isSatisfied( ::ompl::base::State const * st, double * distance ) const  {
        if( bp::override func_isSatisfied = this->get_override( "isSatisfied" ) )
            return func_isSatisfied( boost::python::ptr(st), distance );
        else{
            return this->ompl::base::GoalRegion::isSatisfied( boost::python::ptr(st), distance );
        }
    }
    
    bool default_isSatisfied( ::ompl::base::State const * st, double * distance ) const  {
        return ompl::base::GoalRegion::isSatisfied( boost::python::ptr(st), distance );
    }

    virtual bool isStartGoalPairValid( ::ompl::base::State const * arg0, ::ompl::base::State const * arg1 ) const  {
        if( bp::override func_isStartGoalPairValid = this->get_override( "isStartGoalPairValid" ) )
            return func_isStartGoalPairValid( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        else{
            return this->ompl::base::Goal::isStartGoalPairValid( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        }
    }
    
    bool default_isStartGoalPairValid( ::ompl::base::State const * arg0, ::ompl::base::State const * arg1 ) const  {
        return ompl::base::Goal::isStartGoalPairValid( boost::python::ptr(arg0), boost::python::ptr(arg1) );
    }

};

std::string __str__(::ompl::base::GoalRegion* obj)
{
    std::ostringstream s;
    obj->print(s);
    return s.str();
}

void register_GoalRegion_class(){

    { //::ompl::base::GoalRegion
        typedef bp::class_< GoalRegion_wrapper, bp::bases< ompl::base::Goal >, boost::noncopyable > GoalRegion_exposer_t;
        GoalRegion_exposer_t GoalRegion_exposer = GoalRegion_exposer_t( "GoalRegion", bp::init< ompl::base::SpaceInformationPtr const & >(( bp::arg("si") )) );
        bp::scope GoalRegion_scope( GoalRegion_exposer );
        { //::ompl::base::GoalRegion::distanceGoal
        
            typedef double ( ::ompl::base::GoalRegion::*distanceGoal_function_type)( ::ompl::base::State const * ) const;
            
            GoalRegion_exposer.def( 
                "distanceGoal"
                , bp::pure_virtual( distanceGoal_function_type(&::ompl::base::GoalRegion::distanceGoal) )
                , ( bp::arg("st") ) );
        
        }
        { //::ompl::base::GoalRegion::getThreshold
        
            typedef double ( ::ompl::base::GoalRegion::*getThreshold_function_type)(  ) const;
            
            GoalRegion_exposer.def( 
                "getThreshold"
                , getThreshold_function_type( &::ompl::base::GoalRegion::getThreshold ) );
        
        }
        { //::ompl::base::GoalRegion::isSatisfied
        
            typedef bool ( ::ompl::base::GoalRegion::*isSatisfied_function_type)( ::ompl::base::State const * ) const;
            typedef bool ( GoalRegion_wrapper::*default_isSatisfied_function_type)( ::ompl::base::State const * ) const;
            
            GoalRegion_exposer.def( 
                "isSatisfied"
                , isSatisfied_function_type(&::ompl::base::GoalRegion::isSatisfied)
                , default_isSatisfied_function_type(&GoalRegion_wrapper::default_isSatisfied)
                , ( bp::arg("st") ) );
        
        }
        { //::ompl::base::GoalRegion::isSatisfied
        
            typedef bool ( ::ompl::base::GoalRegion::*isSatisfied_function_type)( ::ompl::base::State const *,double * ) const;
            typedef bool ( GoalRegion_wrapper::*default_isSatisfied_function_type)( ::ompl::base::State const *,double * ) const;
            
            GoalRegion_exposer.def( 
                "isSatisfied"
                , isSatisfied_function_type(&::ompl::base::GoalRegion::isSatisfied)
                , default_isSatisfied_function_type(&GoalRegion_wrapper::default_isSatisfied)
                , ( bp::arg("st"), bp::arg("distance") ) );
        
        }
        { //::ompl::base::GoalRegion::setThreshold
        
            typedef void ( ::ompl::base::GoalRegion::*setThreshold_function_type)( double ) ;
            
            GoalRegion_exposer.def( 
                "setThreshold"
                , setThreshold_function_type( &::ompl::base::GoalRegion::setThreshold )
                , ( bp::arg("threshold") ) );
        
        }
        { //::ompl::base::Goal::isStartGoalPairValid
        
            typedef bool ( ::ompl::base::Goal::*isStartGoalPairValid_function_type)( ::ompl::base::State const *,::ompl::base::State const * ) const;
            typedef bool ( GoalRegion_wrapper::*default_isStartGoalPairValid_function_type)( ::ompl::base::State const *,::ompl::base::State const * ) const;
            
            GoalRegion_exposer.def( 
                "isStartGoalPairValid"
                , isStartGoalPairValid_function_type(&::ompl::base::Goal::isStartGoalPairValid)
                , default_isStartGoalPairValid_function_type(&GoalRegion_wrapper::default_isStartGoalPairValid)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        GoalRegion_exposer.def("__str__", &__str__);
    }

}
