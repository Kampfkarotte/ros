// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "PlannerDataEdge.pypp.hpp"

namespace bp = boost::python;

struct PlannerDataEdge_wrapper : ompl::base::PlannerDataEdge, bp::wrapper< ompl::base::PlannerDataEdge > {

    PlannerDataEdge_wrapper(ompl::base::PlannerDataEdge const & arg )
    : ompl::base::PlannerDataEdge( arg )
      , bp::wrapper< ompl::base::PlannerDataEdge >(){
        // copy constructor
        
    }

    PlannerDataEdge_wrapper( )
    : ompl::base::PlannerDataEdge( )
      , bp::wrapper< ompl::base::PlannerDataEdge >(){
        // null constructor
    
    }

    virtual ::ompl::base::PlannerDataEdge * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->ompl::base::PlannerDataEdge::clone(  );
        }
    }
    
    ::ompl::base::PlannerDataEdge * default_clone(  ) const  {
        return ompl::base::PlannerDataEdge::clone( );
    }

};

void register_PlannerDataEdge_class(){

    { //::ompl::base::PlannerDataEdge
        typedef bp::class_< PlannerDataEdge_wrapper > PlannerDataEdge_exposer_t;
        PlannerDataEdge_exposer_t PlannerDataEdge_exposer = PlannerDataEdge_exposer_t( "PlannerDataEdge", bp::init< >() );
        bp::scope PlannerDataEdge_scope( PlannerDataEdge_exposer );
        { //::ompl::base::PlannerDataEdge::clone
        
            typedef ::ompl::base::PlannerDataEdge * ( ::ompl::base::PlannerDataEdge::*clone_function_type)(  ) const;
            typedef ::ompl::base::PlannerDataEdge * ( PlannerDataEdge_wrapper::*default_clone_function_type)(  ) const;
            
            PlannerDataEdge_exposer.def( 
                "clone"
                , clone_function_type(&::ompl::base::PlannerDataEdge::clone)
                , default_clone_function_type(&PlannerDataEdge_wrapper::default_clone)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        PlannerDataEdge_exposer.def( bp::self != bp::self );
        PlannerDataEdge_exposer.def( bp::self == bp::self );
    }

}
