// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "PlannerTerminationCondition.pypp.hpp"

namespace bp = boost::python;

void register_PlannerTerminationCondition_class(){

    { //::ompl::base::PlannerTerminationCondition
        typedef bp::class_< ompl::base::PlannerTerminationCondition > PlannerTerminationCondition_exposer_t;
        PlannerTerminationCondition_exposer_t PlannerTerminationCondition_exposer = PlannerTerminationCondition_exposer_t( "PlannerTerminationCondition", bp::init< ompl::base::PlannerTerminationConditionFn const & >(( bp::arg("fn") )) );
        bp::scope PlannerTerminationCondition_scope( PlannerTerminationCondition_exposer );
        bp::implicitly_convertible< ompl::base::PlannerTerminationConditionFn const &, ompl::base::PlannerTerminationCondition >();
        PlannerTerminationCondition_exposer.def( bp::init< ompl::base::PlannerTerminationConditionFn const &, double >(( bp::arg("fn"), bp::arg("period") )) );
        { //::ompl::base::PlannerTerminationCondition::eval
        
            typedef bool ( ::ompl::base::PlannerTerminationCondition::*eval_function_type)(  ) const;
            
            PlannerTerminationCondition_exposer.def( 
                "eval"
                , eval_function_type( &::ompl::base::PlannerTerminationCondition::eval ) );
        
        }
        PlannerTerminationCondition_exposer.def( "__int__", &ompl::base::PlannerTerminationCondition::operator bool  );
        { //::ompl::base::PlannerTerminationCondition::operator()
        
            typedef bool ( ::ompl::base::PlannerTerminationCondition::*__call___function_type)(  ) const;
            
            PlannerTerminationCondition_exposer.def( 
                "__call__"
                , __call___function_type( &::ompl::base::PlannerTerminationCondition::operator() ) );
        
        }
        { //::ompl::base::PlannerTerminationCondition::terminate
        
            typedef void ( ::ompl::base::PlannerTerminationCondition::*terminate_function_type)(  ) const;
            
            PlannerTerminationCondition_exposer.def( 
                "terminate"
                , terminate_function_type( &::ompl::base::PlannerTerminationCondition::terminate ) );
        
        }
    }

}
