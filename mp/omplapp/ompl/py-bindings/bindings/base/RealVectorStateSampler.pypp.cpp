// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "RealVectorStateSampler.pypp.hpp"

namespace bp = boost::python;

struct RealVectorStateSampler_wrapper : ompl::base::RealVectorStateSampler, bp::wrapper< ompl::base::RealVectorStateSampler > {

    RealVectorStateSampler_wrapper(::ompl::base::StateSpace const * space )
    : ompl::base::RealVectorStateSampler( boost::python::ptr(space) )
      , bp::wrapper< ompl::base::RealVectorStateSampler >(){
        // constructor
    
    }

    virtual void sampleGaussian( ::ompl::base::State * state, ::ompl::base::State const * mean, double const stdDev ) {
        if( bp::override func_sampleGaussian = this->get_override( "sampleGaussian" ) )
            func_sampleGaussian( boost::python::ptr(state), boost::python::ptr(mean), stdDev );
        else{
            this->ompl::base::RealVectorStateSampler::sampleGaussian( boost::python::ptr(state), boost::python::ptr(mean), stdDev );
        }
    }
    
    void default_sampleGaussian( ::ompl::base::State * state, ::ompl::base::State const * mean, double const stdDev ) {
        ompl::base::RealVectorStateSampler::sampleGaussian( boost::python::ptr(state), boost::python::ptr(mean), stdDev );
    }

    virtual void sampleUniform( ::ompl::base::State * state ) {
        if( bp::override func_sampleUniform = this->get_override( "sampleUniform" ) )
            func_sampleUniform( boost::python::ptr(state) );
        else{
            this->ompl::base::RealVectorStateSampler::sampleUniform( boost::python::ptr(state) );
        }
    }
    
    void default_sampleUniform( ::ompl::base::State * state ) {
        ompl::base::RealVectorStateSampler::sampleUniform( boost::python::ptr(state) );
    }

    virtual void sampleUniformNear( ::ompl::base::State * state, ::ompl::base::State const * near, double const distance ) {
        if( bp::override func_sampleUniformNear = this->get_override( "sampleUniformNear" ) )
            func_sampleUniformNear( boost::python::ptr(state), boost::python::ptr(near), distance );
        else{
            this->ompl::base::RealVectorStateSampler::sampleUniformNear( boost::python::ptr(state), boost::python::ptr(near), distance );
        }
    }
    
    void default_sampleUniformNear( ::ompl::base::State * state, ::ompl::base::State const * near, double const distance ) {
        ompl::base::RealVectorStateSampler::sampleUniformNear( boost::python::ptr(state), boost::python::ptr(near), distance );
    }

};

void register_RealVectorStateSampler_class(){

    { //::ompl::base::RealVectorStateSampler
        typedef bp::class_< RealVectorStateSampler_wrapper, bp::bases< ompl::base::StateSampler >, boost::noncopyable > RealVectorStateSampler_exposer_t;
        RealVectorStateSampler_exposer_t RealVectorStateSampler_exposer = RealVectorStateSampler_exposer_t( "RealVectorStateSampler", bp::init< ompl::base::StateSpace const * >(( bp::arg("space") )) );
        bp::scope RealVectorStateSampler_scope( RealVectorStateSampler_exposer );
        bp::implicitly_convertible< ompl::base::StateSpace const *, ompl::base::RealVectorStateSampler >();
        { //::ompl::base::RealVectorStateSampler::sampleGaussian
        
            typedef void ( ::ompl::base::RealVectorStateSampler::*sampleGaussian_function_type)( ::ompl::base::State *,::ompl::base::State const *,double const ) ;
            typedef void ( RealVectorStateSampler_wrapper::*default_sampleGaussian_function_type)( ::ompl::base::State *,::ompl::base::State const *,double const ) ;
            
            RealVectorStateSampler_exposer.def( 
                "sampleGaussian"
                , sampleGaussian_function_type(&::ompl::base::RealVectorStateSampler::sampleGaussian)
                , default_sampleGaussian_function_type(&RealVectorStateSampler_wrapper::default_sampleGaussian)
                , ( bp::arg("state"), bp::arg("mean"), bp::arg("stdDev") ) );
        
        }
        { //::ompl::base::RealVectorStateSampler::sampleUniform
        
            typedef void ( ::ompl::base::RealVectorStateSampler::*sampleUniform_function_type)( ::ompl::base::State * ) ;
            typedef void ( RealVectorStateSampler_wrapper::*default_sampleUniform_function_type)( ::ompl::base::State * ) ;
            
            RealVectorStateSampler_exposer.def( 
                "sampleUniform"
                , sampleUniform_function_type(&::ompl::base::RealVectorStateSampler::sampleUniform)
                , default_sampleUniform_function_type(&RealVectorStateSampler_wrapper::default_sampleUniform)
                , ( bp::arg("state") ) );
        
        }
        { //::ompl::base::RealVectorStateSampler::sampleUniformNear
        
            typedef void ( ::ompl::base::RealVectorStateSampler::*sampleUniformNear_function_type)( ::ompl::base::State *,::ompl::base::State const *,double const ) ;
            typedef void ( RealVectorStateSampler_wrapper::*default_sampleUniformNear_function_type)( ::ompl::base::State *,::ompl::base::State const *,double const ) ;
            
            RealVectorStateSampler_exposer.def( 
                "sampleUniformNear"
                , sampleUniformNear_function_type(&::ompl::base::RealVectorStateSampler::sampleUniformNear)
                , default_sampleUniformNear_function_type(&RealVectorStateSampler_wrapper::default_sampleUniformNear)
                , ( bp::arg("state"), bp::arg("near"), bp::arg("distance") ) );
        
        }
    }

}
