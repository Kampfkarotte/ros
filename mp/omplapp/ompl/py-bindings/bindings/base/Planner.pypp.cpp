// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "Planner.pypp.hpp"

namespace bp = boost::python;

struct Planner_wrapper : ompl::base::Planner, bp::wrapper< ompl::base::Planner > {

    Planner_wrapper(::ompl::base::SpaceInformationPtr const & si, ::std::string const & name )
    : ompl::base::Planner( si, name )
      , bp::wrapper< ompl::base::Planner >(){
        // constructor
    
    }

    void addPlannerProgressProperty( ::std::string const & progressPropertyName, ::boost::function< std::string () > const & prop ){
        ompl::base::Planner::addPlannerProgressProperty( progressPropertyName, boost::ref(prop) );
    }

    virtual void checkValidity(  ) {
        if( bp::override func_checkValidity = this->get_override( "checkValidity" ) )
            func_checkValidity(  );
        else{
            this->ompl::base::Planner::checkValidity(  );
        }
    }
    
    void default_checkValidity(  ) {
        ompl::base::Planner::checkValidity( );
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->ompl::base::Planner::clear(  );
        }
    }
    
    void default_clear(  ) {
        ompl::base::Planner::clear( );
    }

    virtual void getPlannerData( ::ompl::base::PlannerData & data ) const  {
        if( bp::override func_getPlannerData = this->get_override( "getPlannerData" ) )
            func_getPlannerData( boost::ref(data) );
        else{
            this->ompl::base::Planner::getPlannerData( boost::ref(data) );
        }
    }
    
    void default_getPlannerData( ::ompl::base::PlannerData & data ) const  {
        ompl::base::Planner::getPlannerData( boost::ref(data) );
    }

    virtual void setProblemDefinition( ::ompl::base::ProblemDefinitionPtr const & pdef ) {
        if( bp::override func_setProblemDefinition = this->get_override( "setProblemDefinition" ) )
            func_setProblemDefinition( pdef );
        else{
            this->ompl::base::Planner::setProblemDefinition( pdef );
        }
    }
    
    void default_setProblemDefinition( ::ompl::base::ProblemDefinitionPtr const & pdef ) {
        ompl::base::Planner::setProblemDefinition( pdef );
    }

    virtual void setup(  ) {
        if( bp::override func_setup = this->get_override( "setup" ) )
            func_setup(  );
        else{
            this->ompl::base::Planner::setup(  );
        }
    }
    
    void default_setup(  ) {
        ompl::base::Planner::setup( );
    }

    virtual ::ompl::base::PlannerStatus solve( ::ompl::base::PlannerTerminationCondition const & ptc ){
        bp::override func_solve = this->get_override( "solve" );
        return func_solve( boost::ref(ptc) );
    }

};

std::string __printSettings(::ompl::base::Planner* obj)
{
    std::ostringstream s;
    obj->printSettings(s);
    return s.str();
}

std::string __printProperties(::ompl::base::Planner* obj)
        {
            std::ostringstream s;
            obj->printProperties(s);
            return s.str();
        }

void register_Planner_class(){

    { //::ompl::base::Planner
        typedef bp::class_< Planner_wrapper, boost::noncopyable > Planner_exposer_t;
        Planner_exposer_t Planner_exposer = Planner_exposer_t( "Planner", bp::init< ompl::base::SpaceInformationPtr const &, std::string const & >(( bp::arg("si"), bp::arg("name") )) );
        bp::scope Planner_scope( Planner_exposer );
        { //::ompl::base::Planner::addPlannerProgressProperty
        
            typedef void ( Planner_wrapper::*addPlannerProgressProperty_function_type)( ::std::string const &,::boost::function< std::string () > const & ) ;
            
            Planner_exposer.def( 
                "addPlannerProgressProperty"
                , addPlannerProgressProperty_function_type( &Planner_wrapper::addPlannerProgressProperty )
                , ( bp::arg("progressPropertyName"), bp::arg("prop") ) );
        
        }
        { //::ompl::base::Planner::checkValidity
        
            typedef void ( ::ompl::base::Planner::*checkValidity_function_type)(  ) ;
            typedef void ( Planner_wrapper::*default_checkValidity_function_type)(  ) ;
            
            Planner_exposer.def( 
                "checkValidity"
                , checkValidity_function_type(&::ompl::base::Planner::checkValidity)
                , default_checkValidity_function_type(&Planner_wrapper::default_checkValidity) );
        
        }
        { //::ompl::base::Planner::clear
        
            typedef void ( ::ompl::base::Planner::*clear_function_type)(  ) ;
            typedef void ( Planner_wrapper::*default_clear_function_type)(  ) ;
            
            Planner_exposer.def( 
                "clear"
                , clear_function_type(&::ompl::base::Planner::clear)
                , default_clear_function_type(&Planner_wrapper::default_clear) );
        
        }
        { //::ompl::base::Planner::getName
        
            typedef ::std::string const & ( ::ompl::base::Planner::*getName_function_type)(  ) const;
            
            Planner_exposer.def( 
                "getName"
                , getName_function_type( &::ompl::base::Planner::getName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::Planner::getPlannerData
        
            typedef void ( ::ompl::base::Planner::*getPlannerData_function_type)( ::ompl::base::PlannerData & ) const;
            typedef void ( Planner_wrapper::*default_getPlannerData_function_type)( ::ompl::base::PlannerData & ) const;
            
            Planner_exposer.def( 
                "getPlannerData"
                , getPlannerData_function_type(&::ompl::base::Planner::getPlannerData)
                , default_getPlannerData_function_type(&Planner_wrapper::default_getPlannerData)
                , ( bp::arg("data") ) );
        
        }
        { //::ompl::base::Planner::getPlannerInputStates
        
            typedef ::ompl::base::PlannerInputStates const & ( ::ompl::base::Planner::*getPlannerInputStates_function_type)(  ) const;
            
            Planner_exposer.def( 
                "getPlannerInputStates"
                , getPlannerInputStates_function_type( &::ompl::base::Planner::getPlannerInputStates )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::Planner::getPlannerProgressProperties
        
            typedef ::std::map< std::string, boost::function<std::string ()> > const & ( ::ompl::base::Planner::*getPlannerProgressProperties_function_type)(  ) const;
            
            Planner_exposer.def( 
                "getPlannerProgressProperties"
                , getPlannerProgressProperties_function_type( &::ompl::base::Planner::getPlannerProgressProperties )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::Planner::getProblemDefinition
        
            typedef ::ompl::base::ProblemDefinitionPtr const & ( ::ompl::base::Planner::*getProblemDefinition_function_type)(  ) const;
            
            Planner_exposer.def( 
                "getProblemDefinition"
                , getProblemDefinition_function_type( &::ompl::base::Planner::getProblemDefinition )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::Planner::getSpaceInformation
        
            typedef ::ompl::base::SpaceInformationPtr const & ( ::ompl::base::Planner::*getSpaceInformation_function_type)(  ) const;
            
            Planner_exposer.def( 
                "getSpaceInformation"
                , getSpaceInformation_function_type( &::ompl::base::Planner::getSpaceInformation )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::Planner::getSpecs
        
            typedef ::ompl::base::PlannerSpecs const & ( ::ompl::base::Planner::*getSpecs_function_type)(  ) const;
            
            Planner_exposer.def( 
                "getSpecs"
                , getSpecs_function_type( &::ompl::base::Planner::getSpecs )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::Planner::isSetup
        
            typedef bool ( ::ompl::base::Planner::*isSetup_function_type)(  ) const;
            
            Planner_exposer.def( 
                "isSetup"
                , isSetup_function_type( &::ompl::base::Planner::isSetup ) );
        
        }
        { //::ompl::base::Planner::params
        
            typedef ::ompl::base::ParamSet & ( ::ompl::base::Planner::*params_function_type)(  ) ;
            
            Planner_exposer.def( 
                "params"
                , params_function_type( &::ompl::base::Planner::params )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::Planner::params
        
            typedef ::ompl::base::ParamSet const & ( ::ompl::base::Planner::*params_function_type)(  ) const;
            
            Planner_exposer.def( 
                "params"
                , params_function_type( &::ompl::base::Planner::params )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::Planner::setName
        
            typedef void ( ::ompl::base::Planner::*setName_function_type)( ::std::string const & ) ;
            
            Planner_exposer.def( 
                "setName"
                , setName_function_type( &::ompl::base::Planner::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::ompl::base::Planner::setProblemDefinition
        
            typedef void ( ::ompl::base::Planner::*setProblemDefinition_function_type)( ::ompl::base::ProblemDefinitionPtr const & ) ;
            typedef void ( Planner_wrapper::*default_setProblemDefinition_function_type)( ::ompl::base::ProblemDefinitionPtr const & ) ;
            
            Planner_exposer.def( 
                "setProblemDefinition"
                , setProblemDefinition_function_type(&::ompl::base::Planner::setProblemDefinition)
                , default_setProblemDefinition_function_type(&Planner_wrapper::default_setProblemDefinition)
                , ( bp::arg("pdef") ) );
        
        }
        { //::ompl::base::Planner::setup
        
            typedef void ( ::ompl::base::Planner::*setup_function_type)(  ) ;
            typedef void ( Planner_wrapper::*default_setup_function_type)(  ) ;
            
            Planner_exposer.def( 
                "setup"
                , setup_function_type(&::ompl::base::Planner::setup)
                , default_setup_function_type(&Planner_wrapper::default_setup) );
        
        }
        { //::ompl::base::Planner::solve
        
            typedef ::ompl::base::PlannerStatus ( ::ompl::base::Planner::*solve_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            
            Planner_exposer.def( 
                "solve"
                , bp::pure_virtual( solve_function_type(&::ompl::base::Planner::solve) )
                , ( bp::arg("ptc") ) );
        
        }
        { //::ompl::base::Planner::solve
        
            typedef ::ompl::base::PlannerStatus ( ::ompl::base::Planner::*solve_function_type)( ::ompl::base::PlannerTerminationConditionFn const &,double ) ;
            
            Planner_exposer.def( 
                "solve"
                , solve_function_type( &::ompl::base::Planner::solve )
                , ( bp::arg("ptc"), bp::arg("checkInterval") ) );
        
        }
        { //::ompl::base::Planner::solve
        
            typedef ::ompl::base::PlannerStatus ( ::ompl::base::Planner::*solve_function_type)( double ) ;
            
            Planner_exposer.def( 
                "solve"
                , solve_function_type( &::ompl::base::Planner::solve )
                , ( bp::arg("solveTime") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< ompl::base::Planner > >();
        Planner_exposer.def("settings", &__printSettings);
        Planner_exposer.def("properties", &__printProperties);
    }

}
