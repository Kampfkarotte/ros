// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "CompoundStateInternal.pypp.hpp"

namespace bp = boost::python;

void register_CompoundStateInternal_class(){

    { //::ompl::base::CompoundState
        typedef bp::class_< ompl::base::CompoundState, bp::bases< ompl::base::State >, boost::noncopyable > CompoundStateInternal_exposer_t;
        CompoundStateInternal_exposer_t CompoundStateInternal_exposer = CompoundStateInternal_exposer_t( "CompoundStateInternal", bp::init< >() );
        bp::scope CompoundStateInternal_scope( CompoundStateInternal_exposer );
        { //::ompl::base::CompoundState::as
        
            typedef ::ompl::base::RealVectorStateSpace::StateType const * ( ::ompl::base::CompoundState::*as_function_type)( unsigned int const ) const;
            
            CompoundStateInternal_exposer.def( 
                "as"
                , as_function_type( &::ompl::base::CompoundState::as )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::CompoundState::as
        
            typedef ::ompl::base::SO3StateSpace::StateType const * ( ::ompl::base::CompoundState::*as_function_type)( unsigned int const ) const;
            
            CompoundStateInternal_exposer.def( 
                "as"
                , as_function_type( &::ompl::base::CompoundState::as )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::CompoundState::as
        
            typedef ::ompl::base::SO2StateSpace::StateType const * ( ::ompl::base::CompoundState::*as_function_type)( unsigned int const ) const;
            
            CompoundStateInternal_exposer.def( 
                "as"
                , as_function_type( &::ompl::base::CompoundState::as )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::CompoundState::as
        
            typedef ::ompl::base::RealVectorStateSpace::StateType * ( ::ompl::base::CompoundState::*as_function_type)( unsigned int const ) ;
            
            CompoundStateInternal_exposer.def( 
                "as"
                , as_function_type( &::ompl::base::CompoundState::as )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::CompoundState::as
        
            typedef ::ompl::base::SO3StateSpace::StateType * ( ::ompl::base::CompoundState::*as_function_type)( unsigned int const ) ;
            
            CompoundStateInternal_exposer.def( 
                "as"
                , as_function_type( &::ompl::base::CompoundState::as )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::CompoundState::as
        
            typedef ::ompl::base::SO2StateSpace::StateType * ( ::ompl::base::CompoundState::*as_function_type)( unsigned int const ) ;
            
            CompoundStateInternal_exposer.def( 
                "as"
                , as_function_type( &::ompl::base::CompoundState::as )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::CompoundState::operator[]
        
            typedef ::ompl::base::State * ( ::ompl::base::CompoundState::*__getitem___function_type)( unsigned int ) const;
            
            CompoundStateInternal_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::ompl::base::CompoundState::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
    }

}
