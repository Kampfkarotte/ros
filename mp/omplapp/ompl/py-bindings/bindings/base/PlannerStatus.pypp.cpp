// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "PlannerStatus.pypp.hpp"

namespace bp = boost::python;

void register_PlannerStatus_class(){

    { //::ompl::base::PlannerStatus
        typedef bp::class_< ompl::base::PlannerStatus > PlannerStatus_exposer_t;
        PlannerStatus_exposer_t PlannerStatus_exposer = PlannerStatus_exposer_t( "PlannerStatus", bp::init< bp::optional< ompl::base::PlannerStatus::StatusType > >(( bp::arg("status")=(long)(::ompl::base::PlannerStatus::UNKNOWN) )) );
        bp::scope PlannerStatus_scope( PlannerStatus_exposer );
        bp::enum_< ompl::base::PlannerStatus::StatusType>("StatusType")
            .value("UNKNOWN", ompl::base::PlannerStatus::UNKNOWN)
            .value("INVALID_START", ompl::base::PlannerStatus::INVALID_START)
            .value("INVALID_GOAL", ompl::base::PlannerStatus::INVALID_GOAL)
            .value("UNRECOGNIZED_GOAL_TYPE", ompl::base::PlannerStatus::UNRECOGNIZED_GOAL_TYPE)
            .value("TIMEOUT", ompl::base::PlannerStatus::TIMEOUT)
            .value("APPROXIMATE_SOLUTION", ompl::base::PlannerStatus::APPROXIMATE_SOLUTION)
            .value("EXACT_SOLUTION", ompl::base::PlannerStatus::EXACT_SOLUTION)
            .value("CRASH", ompl::base::PlannerStatus::CRASH)
            .value("TYPE_COUNT", ompl::base::PlannerStatus::TYPE_COUNT)
            .export_values()
            ;
        bp::implicitly_convertible< ompl::base::PlannerStatus::StatusType, ompl::base::PlannerStatus >();
        PlannerStatus_exposer.def( bp::init< bool, bool >(( bp::arg("hasSolution"), bp::arg("isApproximate") )) );
        { //::ompl::base::PlannerStatus::asString
        
            typedef ::std::string ( ::ompl::base::PlannerStatus::*asString_function_type)(  ) const;
            
            PlannerStatus_exposer.def( 
                "asString"
                , asString_function_type( &::ompl::base::PlannerStatus::asString ) );
        
        }
        PlannerStatus_exposer.def( "getStatus", &ompl::base::PlannerStatus::operator ::ompl::base::PlannerStatus::StatusType  );
        PlannerStatus_exposer.def( "__int__", &ompl::base::PlannerStatus::operator bool  );
        PlannerStatus_exposer.def( bp::self_ns::str( bp::self ) );
        PlannerStatus_exposer.def("__nonzero__", &ompl::base::PlannerStatus::operator bool);
        PlannerStatus_exposer.def("__bool__", &ompl::base::PlannerStatus::operator bool);
    }

}
