// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "ValidStateSampler.pypp.hpp"

namespace bp = boost::python;

struct ValidStateSampler_wrapper : ompl::base::ValidStateSampler, bp::wrapper< ompl::base::ValidStateSampler > {

    ValidStateSampler_wrapper(::ompl::base::SpaceInformation const * si )
    : ompl::base::ValidStateSampler( boost::python::ptr(si) )
      , bp::wrapper< ompl::base::ValidStateSampler >(){
        // constructor
    
    }

    virtual bool sample( ::ompl::base::State * state ){
        bp::override func_sample = this->get_override( "sample" );
        return func_sample( boost::python::ptr(state) );
    }

    virtual bool sampleNear( ::ompl::base::State * state, ::ompl::base::State const * near, double const distance ){
        bp::override func_sampleNear = this->get_override( "sampleNear" );
        return func_sampleNear( boost::python::ptr(state), boost::python::ptr(near), distance );
    }

};

void register_ValidStateSampler_class(){

    { //::ompl::base::ValidStateSampler
        typedef bp::class_< ValidStateSampler_wrapper, boost::noncopyable > ValidStateSampler_exposer_t;
        ValidStateSampler_exposer_t ValidStateSampler_exposer = ValidStateSampler_exposer_t( "ValidStateSampler", bp::init< ompl::base::SpaceInformation const * >(( bp::arg("si") )) );
        bp::scope ValidStateSampler_scope( ValidStateSampler_exposer );
        { //::ompl::base::ValidStateSampler::getName
        
            typedef ::std::string const & ( ::ompl::base::ValidStateSampler::*getName_function_type)(  ) const;
            
            ValidStateSampler_exposer.def( 
                "getName"
                , getName_function_type( &::ompl::base::ValidStateSampler::getName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::ValidStateSampler::getNrAttempts
        
            typedef unsigned int ( ::ompl::base::ValidStateSampler::*getNrAttempts_function_type)(  ) const;
            
            ValidStateSampler_exposer.def( 
                "getNrAttempts"
                , getNrAttempts_function_type( &::ompl::base::ValidStateSampler::getNrAttempts ) );
        
        }
        { //::ompl::base::ValidStateSampler::params
        
            typedef ::ompl::base::ParamSet & ( ::ompl::base::ValidStateSampler::*params_function_type)(  ) ;
            
            ValidStateSampler_exposer.def( 
                "params"
                , params_function_type( &::ompl::base::ValidStateSampler::params )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::ValidStateSampler::params
        
            typedef ::ompl::base::ParamSet const & ( ::ompl::base::ValidStateSampler::*params_function_type)(  ) const;
            
            ValidStateSampler_exposer.def( 
                "params"
                , params_function_type( &::ompl::base::ValidStateSampler::params )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::base::ValidStateSampler::sample
        
            typedef bool ( ::ompl::base::ValidStateSampler::*sample_function_type)( ::ompl::base::State * ) ;
            
            ValidStateSampler_exposer.def( 
                "sample"
                , bp::pure_virtual( sample_function_type(&::ompl::base::ValidStateSampler::sample) )
                , ( bp::arg("state") ) );
        
        }
        { //::ompl::base::ValidStateSampler::sampleNear
        
            typedef bool ( ::ompl::base::ValidStateSampler::*sampleNear_function_type)( ::ompl::base::State *,::ompl::base::State const *,double const ) ;
            
            ValidStateSampler_exposer.def( 
                "sampleNear"
                , bp::pure_virtual( sampleNear_function_type(&::ompl::base::ValidStateSampler::sampleNear) )
                , ( bp::arg("state"), bp::arg("near"), bp::arg("distance") ) );
        
        }
        { //::ompl::base::ValidStateSampler::setName
        
            typedef void ( ::ompl::base::ValidStateSampler::*setName_function_type)( ::std::string const & ) ;
            
            ValidStateSampler_exposer.def( 
                "setName"
                , setName_function_type( &::ompl::base::ValidStateSampler::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::ompl::base::ValidStateSampler::setNrAttempts
        
            typedef void ( ::ompl::base::ValidStateSampler::*setNrAttempts_function_type)( unsigned int ) ;
            
            ValidStateSampler_exposer.def( 
                "setNrAttempts"
                , setNrAttempts_function_type( &::ompl::base::ValidStateSampler::setNrAttempts )
                , ( bp::arg("attempts") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< ompl::base::ValidStateSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::base::ObstacleBasedValidStateSampler >, boost::shared_ptr< ompl::base::ValidStateSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::base::GaussianValidStateSampler >, boost::shared_ptr< ompl::base::ValidStateSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::base::UniformValidStateSampler >, boost::shared_ptr< ompl::base::ValidStateSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::base::MaximizeClearanceValidStateSampler >, boost::shared_ptr< ompl::base::ValidStateSampler > >();
    }

}
