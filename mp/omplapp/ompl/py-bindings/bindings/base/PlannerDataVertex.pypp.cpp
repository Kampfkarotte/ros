// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "PlannerDataVertex.pypp.hpp"

namespace bp = boost::python;

struct PlannerDataVertex_wrapper : ompl::base::PlannerDataVertex, bp::wrapper< ompl::base::PlannerDataVertex > {

    PlannerDataVertex_wrapper(::ompl::base::State const * st, int tag=0 )
    : ompl::base::PlannerDataVertex( boost::python::ptr(st), tag )
      , bp::wrapper< ompl::base::PlannerDataVertex >(){
        // constructor
    
    }

    PlannerDataVertex_wrapper(::ompl::base::PlannerDataVertex const & rhs )
    : ompl::base::PlannerDataVertex( boost::ref(rhs) )
      , bp::wrapper< ompl::base::PlannerDataVertex >(){
        // copy constructor
    
    }

    PlannerDataVertex_wrapper( )
    : ompl::base::PlannerDataVertex( )
      , bp::wrapper< ompl::base::PlannerDataVertex >(){
        // null constructor
    
    }

    virtual ::ompl::base::PlannerDataVertex * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->ompl::base::PlannerDataVertex::clone(  );
        }
    }
    
    ::ompl::base::PlannerDataVertex * default_clone(  ) const  {
        return ompl::base::PlannerDataVertex::clone( );
    }

    virtual ::ompl::base::State const * getState(  ) const  {
        if( bp::override func_getState = this->get_override( "getState" ) )
            return func_getState(  );
        else{
            return this->ompl::base::PlannerDataVertex::getState(  );
        }
    }
    
    ::ompl::base::State const * default_getState(  ) const  {
        return ompl::base::PlannerDataVertex::getState( );
    }

    virtual int getTag(  ) const  {
        if( bp::override func_getTag = this->get_override( "getTag" ) )
            return func_getTag(  );
        else{
            return this->ompl::base::PlannerDataVertex::getTag(  );
        }
    }
    
    int default_getTag(  ) const  {
        return ompl::base::PlannerDataVertex::getTag( );
    }

    virtual void setTag( int tag ) {
        if( bp::override func_setTag = this->get_override( "setTag" ) )
            func_setTag( tag );
        else{
            this->ompl::base::PlannerDataVertex::setTag( tag );
        }
    }
    
    void default_setTag( int tag ) {
        ompl::base::PlannerDataVertex::setTag( tag );
    }

};

void register_PlannerDataVertex_class(){

    { //::ompl::base::PlannerDataVertex
        typedef bp::class_< PlannerDataVertex_wrapper > PlannerDataVertex_exposer_t;
        PlannerDataVertex_exposer_t PlannerDataVertex_exposer = PlannerDataVertex_exposer_t( "PlannerDataVertex", bp::init< ompl::base::State const *, bp::optional< int > >(( bp::arg("st"), bp::arg("tag")=(int)(0) )) );
        bp::scope PlannerDataVertex_scope( PlannerDataVertex_exposer );
        bp::implicitly_convertible< ompl::base::State const *, ompl::base::PlannerDataVertex >();
        PlannerDataVertex_exposer.def( bp::init< ompl::base::PlannerDataVertex const & >(( bp::arg("rhs") )) );
        PlannerDataVertex_exposer.def( bp::init< >() );
        { //::ompl::base::PlannerDataVertex::clone
        
            typedef ::ompl::base::PlannerDataVertex * ( ::ompl::base::PlannerDataVertex::*clone_function_type)(  ) const;
            typedef ::ompl::base::PlannerDataVertex * ( PlannerDataVertex_wrapper::*default_clone_function_type)(  ) const;
            
            PlannerDataVertex_exposer.def( 
                "clone"
                , clone_function_type(&::ompl::base::PlannerDataVertex::clone)
                , default_clone_function_type(&PlannerDataVertex_wrapper::default_clone)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::PlannerDataVertex::getState
        
            typedef ::ompl::base::State const * ( ::ompl::base::PlannerDataVertex::*getState_function_type)(  ) const;
            typedef ::ompl::base::State const * ( PlannerDataVertex_wrapper::*default_getState_function_type)(  ) const;
            
            PlannerDataVertex_exposer.def( 
                "getState"
                , getState_function_type(&::ompl::base::PlannerDataVertex::getState)
                , default_getState_function_type(&PlannerDataVertex_wrapper::default_getState)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::base::PlannerDataVertex::getTag
        
            typedef int ( ::ompl::base::PlannerDataVertex::*getTag_function_type)(  ) const;
            typedef int ( PlannerDataVertex_wrapper::*default_getTag_function_type)(  ) const;
            
            PlannerDataVertex_exposer.def( 
                "getTag"
                , getTag_function_type(&::ompl::base::PlannerDataVertex::getTag)
                , default_getTag_function_type(&PlannerDataVertex_wrapper::default_getTag) );
        
        }
        PlannerDataVertex_exposer.def( bp::self != bp::self );
        PlannerDataVertex_exposer.def( bp::self == bp::self );
        { //::ompl::base::PlannerDataVertex::setTag
        
            typedef void ( ::ompl::base::PlannerDataVertex::*setTag_function_type)( int ) ;
            typedef void ( PlannerDataVertex_wrapper::*default_setTag_function_type)( int ) ;
            
            PlannerDataVertex_exposer.def( 
                "setTag"
                , setTag_function_type(&::ompl::base::PlannerDataVertex::setTag)
                , default_setTag_function_type(&PlannerDataVertex_wrapper::default_setTag)
                , ( bp::arg("tag") ) );
        
        }
    }

}
