// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/base.h"
#include "SubspaceProjectionEvaluator.pypp.hpp"

namespace bp = boost::python;

struct SubspaceProjectionEvaluator_wrapper : ompl::base::SubspaceProjectionEvaluator, bp::wrapper< ompl::base::SubspaceProjectionEvaluator > {

    SubspaceProjectionEvaluator_wrapper(::ompl::base::StateSpace const * space, unsigned int index, ::ompl::base::ProjectionEvaluatorPtr const & projToUse=boost::shared_ptr<ompl::base::ProjectionEvaluator>() )
    : ompl::base::SubspaceProjectionEvaluator( boost::python::ptr(space), index, projToUse )
      , bp::wrapper< ompl::base::SubspaceProjectionEvaluator >(){
        // constructor
    
    }

    virtual unsigned int getDimension(  ) const  {
        if( bp::override func_getDimension = this->get_override( "getDimension" ) )
            return func_getDimension(  );
        else{
            return this->ompl::base::SubspaceProjectionEvaluator::getDimension(  );
        }
    }
    
    unsigned int default_getDimension(  ) const  {
        return ompl::base::SubspaceProjectionEvaluator::getDimension( );
    }

    virtual void project( ::ompl::base::State const * state, ::ompl::base::EuclideanProjection & projection ) const  {
        if( bp::override func_project = this->get_override( "project" ) )
            func_project( boost::python::ptr(state), boost::ref(projection) );
        else{
            this->ompl::base::SubspaceProjectionEvaluator::project( boost::python::ptr(state), boost::ref(projection) );
        }
    }
    
    void default_project( ::ompl::base::State const * state, ::ompl::base::EuclideanProjection & projection ) const  {
        ompl::base::SubspaceProjectionEvaluator::project( boost::python::ptr(state), boost::ref(projection) );
    }

    virtual void setup(  ) {
        if( bp::override func_setup = this->get_override( "setup" ) )
            func_setup(  );
        else{
            this->ompl::base::SubspaceProjectionEvaluator::setup(  );
        }
    }
    
    void default_setup(  ) {
        ompl::base::SubspaceProjectionEvaluator::setup( );
    }

    virtual void defaultCellSizes(  ) {
        if( bp::override func_defaultCellSizes = this->get_override( "defaultCellSizes" ) )
            func_defaultCellSizes(  );
        else{
            this->ompl::base::ProjectionEvaluator::defaultCellSizes(  );
        }
    }
    
    void default_defaultCellSizes(  ) {
        ompl::base::ProjectionEvaluator::defaultCellSizes( );
    }

    void estimateBounds(  ){
        ompl::base::ProjectionEvaluator::estimateBounds(  );
    }

    virtual void setCellSizes( ::std::vector< double > const & cellSizes ) {
        if( bp::override func_setCellSizes = this->get_override( "setCellSizes" ) )
            func_setCellSizes( boost::ref(cellSizes) );
        else{
            this->ompl::base::ProjectionEvaluator::setCellSizes( boost::ref(cellSizes) );
        }
    }
    
    void default_setCellSizes( ::std::vector< double > const & cellSizes ) {
        ompl::base::ProjectionEvaluator::setCellSizes( boost::ref(cellSizes) );
    }

};

void register_SubspaceProjectionEvaluator_class(){

    { //::ompl::base::SubspaceProjectionEvaluator
        typedef bp::class_< SubspaceProjectionEvaluator_wrapper, bp::bases< ompl::base::ProjectionEvaluator >, boost::noncopyable > SubspaceProjectionEvaluator_exposer_t;
        SubspaceProjectionEvaluator_exposer_t SubspaceProjectionEvaluator_exposer = SubspaceProjectionEvaluator_exposer_t( "SubspaceProjectionEvaluator", bp::init< ompl::base::StateSpace const *, unsigned int, bp::optional< ompl::base::ProjectionEvaluatorPtr const & > >(( bp::arg("space"), bp::arg("index"), bp::arg("projToUse")=boost::shared_ptr<ompl::base::ProjectionEvaluator>() )) );
        bp::scope SubspaceProjectionEvaluator_scope( SubspaceProjectionEvaluator_exposer );
        { //::ompl::base::SubspaceProjectionEvaluator::getDimension
        
            typedef unsigned int ( ::ompl::base::SubspaceProjectionEvaluator::*getDimension_function_type)(  ) const;
            typedef unsigned int ( SubspaceProjectionEvaluator_wrapper::*default_getDimension_function_type)(  ) const;
            
            SubspaceProjectionEvaluator_exposer.def( 
                "getDimension"
                , getDimension_function_type(&::ompl::base::SubspaceProjectionEvaluator::getDimension)
                , default_getDimension_function_type(&SubspaceProjectionEvaluator_wrapper::default_getDimension) );
        
        }
        { //::ompl::base::SubspaceProjectionEvaluator::project
        
            typedef void ( ::ompl::base::SubspaceProjectionEvaluator::*project_function_type)( ::ompl::base::State const *,::ompl::base::EuclideanProjection & ) const;
            typedef void ( SubspaceProjectionEvaluator_wrapper::*default_project_function_type)( ::ompl::base::State const *,::ompl::base::EuclideanProjection & ) const;
            
            SubspaceProjectionEvaluator_exposer.def( 
                "project"
                , project_function_type(&::ompl::base::SubspaceProjectionEvaluator::project)
                , default_project_function_type(&SubspaceProjectionEvaluator_wrapper::default_project)
                , ( bp::arg("state"), bp::arg("projection") ) );
        
        }
        { //::ompl::base::SubspaceProjectionEvaluator::setup
        
            typedef void ( ::ompl::base::SubspaceProjectionEvaluator::*setup_function_type)(  ) ;
            typedef void ( SubspaceProjectionEvaluator_wrapper::*default_setup_function_type)(  ) ;
            
            SubspaceProjectionEvaluator_exposer.def( 
                "setup"
                , setup_function_type(&::ompl::base::SubspaceProjectionEvaluator::setup)
                , default_setup_function_type(&SubspaceProjectionEvaluator_wrapper::default_setup) );
        
        }
        { //::ompl::base::ProjectionEvaluator::defaultCellSizes
        
            typedef void ( ::ompl::base::ProjectionEvaluator::*defaultCellSizes_function_type)(  ) ;
            typedef void ( SubspaceProjectionEvaluator_wrapper::*default_defaultCellSizes_function_type)(  ) ;
            
            SubspaceProjectionEvaluator_exposer.def( 
                "defaultCellSizes"
                , defaultCellSizes_function_type(&::ompl::base::ProjectionEvaluator::defaultCellSizes)
                , default_defaultCellSizes_function_type(&SubspaceProjectionEvaluator_wrapper::default_defaultCellSizes) );
        
        }
        { //::ompl::base::ProjectionEvaluator::estimateBounds
        
            typedef void ( SubspaceProjectionEvaluator_wrapper::*estimateBounds_function_type)(  ) ;
            
            SubspaceProjectionEvaluator_exposer.def( 
                "estimateBounds"
                , estimateBounds_function_type( &SubspaceProjectionEvaluator_wrapper::estimateBounds ) );
        
        }
        { //::ompl::base::ProjectionEvaluator::setCellSizes
        
            typedef void ( ::ompl::base::ProjectionEvaluator::*setCellSizes_function_type)( ::std::vector< double > const & ) ;
            typedef void ( SubspaceProjectionEvaluator_wrapper::*default_setCellSizes_function_type)( ::std::vector< double > const & ) ;
            
            SubspaceProjectionEvaluator_exposer.def( 
                "setCellSizes"
                , setCellSizes_function_type(&::ompl::base::ProjectionEvaluator::setCellSizes)
                , default_setCellSizes_function_type(&SubspaceProjectionEvaluator_wrapper::default_setCellSizes)
                , ( bp::arg("cellSizes") ) );
        
        }
        { //::ompl::base::ProjectionEvaluator::setCellSizes
        
            typedef void ( ::ompl::base::ProjectionEvaluator::*setCellSizes_function_type)( unsigned int,double ) ;
            
            SubspaceProjectionEvaluator_exposer.def( 
                "setCellSizes"
                , setCellSizes_function_type( &::ompl::base::ProjectionEvaluator::setCellSizes )
                , ( bp::arg("dim"), bp::arg("cellSize") ) );
        
        }
    }

}
