// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/tools.h"
#include "Benchmark.pypp.hpp"

namespace bp = boost::python;

struct Benchmark_wrapper : ompl::tools::Benchmark, bp::wrapper< ompl::tools::Benchmark > {

    Benchmark_wrapper(ompl::tools::Benchmark const & arg )
    : ompl::tools::Benchmark( arg )
      , bp::wrapper< ompl::tools::Benchmark >(){
        // copy constructor
        
    }

    Benchmark_wrapper(::ompl::geometric::SimpleSetup & setup, const ::std::string & name=std::string() )
            : ompl::tools::Benchmark( boost::ref(setup), name )
              , bp::wrapper< ompl::tools::Benchmark >(){}

    Benchmark_wrapper(::ompl::control::SimpleSetup & setup, const ::std::string & name=std::string() )
              : ompl::tools::Benchmark( boost::ref(setup), name )
                , bp::wrapper< ompl::tools::Benchmark >(){}

};

void benchmarkWrapper(::ompl::tools::Benchmark* obj, const ompl::tools::Benchmark::Request& request)
        {
            ompl::tools::Benchmark::Request req(request);
            req.useThreads = false;
            obj->benchmark(request);
        }

void register_Benchmark_class(){

    { //::ompl::tools::Benchmark
        typedef bp::class_< Benchmark_wrapper > Benchmark_exposer_t;
        Benchmark_exposer_t Benchmark_exposer = Benchmark_exposer_t( "Benchmark", bp::no_init );
        bp::scope Benchmark_scope( Benchmark_exposer );
        { //::ompl::tools::Benchmark::CompleteExperiment
            typedef bp::class_< ompl::tools::Benchmark::CompleteExperiment > CompleteExperiment_exposer_t;
            CompleteExperiment_exposer_t CompleteExperiment_exposer = CompleteExperiment_exposer_t( "CompleteExperiment" );
            bp::scope CompleteExperiment_scope( CompleteExperiment_exposer );
            CompleteExperiment_exposer.def_readwrite( "cpuInfo", &ompl::tools::Benchmark::CompleteExperiment::cpuInfo );
            CompleteExperiment_exposer.def_readwrite( "host", &ompl::tools::Benchmark::CompleteExperiment::host );
            CompleteExperiment_exposer.def_readwrite( "maxMem", &ompl::tools::Benchmark::CompleteExperiment::maxMem );
            CompleteExperiment_exposer.def_readwrite( "maxTime", &ompl::tools::Benchmark::CompleteExperiment::maxTime );
            CompleteExperiment_exposer.def_readwrite( "name", &ompl::tools::Benchmark::CompleteExperiment::name );
            CompleteExperiment_exposer.def_readwrite( "planners", &ompl::tools::Benchmark::CompleteExperiment::planners );
            CompleteExperiment_exposer.def_readwrite( "runCount", &ompl::tools::Benchmark::CompleteExperiment::runCount );
            CompleteExperiment_exposer.def_readwrite( "seed", &ompl::tools::Benchmark::CompleteExperiment::seed );
            CompleteExperiment_exposer.def_readwrite( "setupInfo", &ompl::tools::Benchmark::CompleteExperiment::setupInfo );
            CompleteExperiment_exposer.def_readwrite( "startTime", &ompl::tools::Benchmark::CompleteExperiment::startTime );
            CompleteExperiment_exposer.def_readwrite( "totalDuration", &ompl::tools::Benchmark::CompleteExperiment::totalDuration );
        }
        { //::ompl::tools::Benchmark::PlannerExperiment
            typedef bp::class_< ompl::tools::Benchmark::PlannerExperiment > PlannerExperiment_exposer_t;
            PlannerExperiment_exposer_t PlannerExperiment_exposer = PlannerExperiment_exposer_t( "PlannerExperiment" );
            bp::scope PlannerExperiment_scope( PlannerExperiment_exposer );
            PlannerExperiment_exposer.def( bp::self == bp::self );
            PlannerExperiment_exposer.def_readwrite( "common", &ompl::tools::Benchmark::PlannerExperiment::common );
            PlannerExperiment_exposer.def_readwrite( "name", &ompl::tools::Benchmark::PlannerExperiment::name );
            PlannerExperiment_exposer.def_readwrite( "progressPropertyNames", &ompl::tools::Benchmark::PlannerExperiment::progressPropertyNames );
            PlannerExperiment_exposer.def_readwrite( "runs", &ompl::tools::Benchmark::PlannerExperiment::runs );
            PlannerExperiment_exposer.def_readwrite( "runsProgressData", &ompl::tools::Benchmark::PlannerExperiment::runsProgressData );
        }
        { //::ompl::tools::Benchmark::Request
            typedef bp::class_< ompl::tools::Benchmark::Request > Request_exposer_t;
            Request_exposer_t Request_exposer = Request_exposer_t( "Request" );
            bp::scope Request_scope( Request_exposer );
            Request_exposer.def_readwrite( "displayProgress", &ompl::tools::Benchmark::Request::displayProgress );
            Request_exposer.def_readwrite( "maxMem", &ompl::tools::Benchmark::Request::maxMem );
            Request_exposer.def_readwrite( "maxTime", &ompl::tools::Benchmark::Request::maxTime );
            Request_exposer.def_readwrite( "runCount", &ompl::tools::Benchmark::Request::runCount );
            Request_exposer.def_readwrite( "saveConsoleOutput", &ompl::tools::Benchmark::Request::saveConsoleOutput );
            Request_exposer.def_readwrite( "timeBetweenUpdates", &ompl::tools::Benchmark::Request::timeBetweenUpdates );
            Request_exposer.def_readwrite( "useThreads", &ompl::tools::Benchmark::Request::useThreads );
        }
        { //::ompl::tools::Benchmark::Status
            typedef bp::class_< ompl::tools::Benchmark::Status > Status_exposer_t;
            Status_exposer_t Status_exposer = Status_exposer_t( "Status" );
            bp::scope Status_scope( Status_exposer );
            Status_exposer.def_readwrite( "activePlanner", &ompl::tools::Benchmark::Status::activePlanner );
            Status_exposer.def_readwrite( "activeRun", &ompl::tools::Benchmark::Status::activeRun );
            Status_exposer.def_readwrite( "progressPercentage", &ompl::tools::Benchmark::Status::progressPercentage );
            Status_exposer.def_readwrite( "running", &ompl::tools::Benchmark::Status::running );
        }
        { //::ompl::tools::Benchmark::addPlanner
        
            typedef void ( ::ompl::tools::Benchmark::*addPlanner_function_type)( ::ompl::base::PlannerPtr const & ) ;
            
            Benchmark_exposer.def( 
                "addPlanner"
                , addPlanner_function_type( &::ompl::tools::Benchmark::addPlanner )
                , ( bp::arg("planner") ) );
        
        }
        { //::ompl::tools::Benchmark::clearPlanners
        
            typedef void ( ::ompl::tools::Benchmark::*clearPlanners_function_type)(  ) ;
            
            Benchmark_exposer.def( 
                "clearPlanners"
                , clearPlanners_function_type( &::ompl::tools::Benchmark::clearPlanners ) );
        
        }
        { //::ompl::tools::Benchmark::getExperimentName
        
            typedef ::std::string const & ( ::ompl::tools::Benchmark::*getExperimentName_function_type)(  ) const;
            
            Benchmark_exposer.def( 
                "getExperimentName"
                , getExperimentName_function_type( &::ompl::tools::Benchmark::getExperimentName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::tools::Benchmark::getRecordedExperimentData
        
            typedef ::ompl::tools::Benchmark::CompleteExperiment const & ( ::ompl::tools::Benchmark::*getRecordedExperimentData_function_type)(  ) const;
            
            Benchmark_exposer.def( 
                "getRecordedExperimentData"
                , getRecordedExperimentData_function_type( &::ompl::tools::Benchmark::getRecordedExperimentData )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::tools::Benchmark::getStatus
        
            typedef ::ompl::tools::Benchmark::Status const & ( ::ompl::tools::Benchmark::*getStatus_function_type)(  ) const;
            
            Benchmark_exposer.def( 
                "getStatus"
                , getStatus_function_type( &::ompl::tools::Benchmark::getStatus )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::tools::Benchmark::saveResultsToFile
        
            typedef bool ( ::ompl::tools::Benchmark::*saveResultsToFile_function_type)( char const * ) const;
            
            Benchmark_exposer.def( 
                "saveResultsToFile"
                , saveResultsToFile_function_type( &::ompl::tools::Benchmark::saveResultsToFile )
                , ( bp::arg("filename") ) );
        
        }
        { //::ompl::tools::Benchmark::saveResultsToFile
        
            typedef bool ( ::ompl::tools::Benchmark::*saveResultsToFile_function_type)(  ) const;
            
            Benchmark_exposer.def( 
                "saveResultsToFile"
                , saveResultsToFile_function_type( &::ompl::tools::Benchmark::saveResultsToFile ) );
        
        }
        { //::ompl::tools::Benchmark::setExperimentName
        
            typedef void ( ::ompl::tools::Benchmark::*setExperimentName_function_type)( ::std::string const & ) ;
            
            Benchmark_exposer.def( 
                "setExperimentName"
                , setExperimentName_function_type( &::ompl::tools::Benchmark::setExperimentName )
                , ( bp::arg("name") ) );
        
        }
        Benchmark_exposer.def("benchmark", &benchmarkWrapper);
        Benchmark_exposer.def(bp::init< ompl::geometric::SimpleSetup &, bp::optional< std::string const & > >(( bp::arg("setup"), bp::arg("name")=std::basic_string<char, std::char_traits<char>, std::allocator<char> >() )) );
        Benchmark_exposer.def(bp::init< ompl::control::SimpleSetup &, bp::optional< std::string const & > >(( bp::arg("setup"), bp::arg("name")=std::basic_string<char, std::char_traits<char>, std::allocator<char> >() )) );
        Benchmark_exposer.def("addPlannerAllocator", &ompl::tools::Benchmark::addPlannerAllocator);
        Benchmark_exposer.def("setPlannerSwitchEvent", &ompl::tools::Benchmark::setPlannerSwitchEvent);
        Benchmark_exposer.def("setPreRunEvent", &ompl::tools::Benchmark::setPreRunEvent);
        Benchmark_exposer.def("setPostRunEvent", &ompl::tools::Benchmark::setPostRunEvent);
    }

}
