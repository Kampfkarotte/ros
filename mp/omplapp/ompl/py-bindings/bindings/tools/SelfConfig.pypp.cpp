// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/tools.h"
#include "SelfConfig.pypp.hpp"

namespace bp = boost::python;

std::string __str__(::ompl::tools::SelfConfig* obj)
{
    std::ostringstream s;
    obj->print(s);
    return s.str();
}

void register_SelfConfig_class(){

    { //::ompl::tools::SelfConfig
        typedef bp::class_< ompl::tools::SelfConfig > SelfConfig_exposer_t;
        SelfConfig_exposer_t SelfConfig_exposer = SelfConfig_exposer_t( "SelfConfig", bp::init< ompl::base::SpaceInformationPtr const &, bp::optional< std::string const & > >(( bp::arg("si"), bp::arg("context")=std::basic_string<char, std::char_traits<char>, std::allocator<char> >() )) );
        bp::scope SelfConfig_scope( SelfConfig_exposer );
        bp::implicitly_convertible< ompl::base::SpaceInformationPtr const &, ompl::tools::SelfConfig >();
        { //::ompl::tools::SelfConfig::configurePlannerRange
        
            typedef void ( ::ompl::tools::SelfConfig::*configurePlannerRange_function_type)( double & ) ;
            
            SelfConfig_exposer.def( 
                "configurePlannerRange"
                , configurePlannerRange_function_type( &::ompl::tools::SelfConfig::configurePlannerRange )
                , ( bp::arg("range") ) );
        
        }
        { //::ompl::tools::SelfConfig::configureProjectionEvaluator
        
            typedef void ( ::ompl::tools::SelfConfig::*configureProjectionEvaluator_function_type)( ::ompl::base::ProjectionEvaluatorPtr & ) ;
            
            SelfConfig_exposer.def( 
                "configureProjectionEvaluator"
                , configureProjectionEvaluator_function_type( &::ompl::tools::SelfConfig::configureProjectionEvaluator )
                , ( bp::arg("proj") ) );
        
        }
        { //::ompl::tools::SelfConfig::configureValidStateSamplingAttempts
        
            typedef void ( ::ompl::tools::SelfConfig::*configureValidStateSamplingAttempts_function_type)( unsigned int & ) ;
            
            SelfConfig_exposer.def( 
                "configureValidStateSamplingAttempts"
                , configureValidStateSamplingAttempts_function_type( &::ompl::tools::SelfConfig::configureValidStateSamplingAttempts )
                , ( bp::arg("attempts") ) );
        
        }
        { //::ompl::tools::SelfConfig::getAverageValidMotionLength
        
            typedef double ( ::ompl::tools::SelfConfig::*getAverageValidMotionLength_function_type)(  ) ;
            
            SelfConfig_exposer.def( 
                "getAverageValidMotionLength"
                , getAverageValidMotionLength_function_type( &::ompl::tools::SelfConfig::getAverageValidMotionLength ) );
        
        }
        { //::ompl::tools::SelfConfig::getProbabilityOfValidState
        
            typedef double ( ::ompl::tools::SelfConfig::*getProbabilityOfValidState_function_type)(  ) ;
            
            SelfConfig_exposer.def( 
                "getProbabilityOfValidState"
                , getProbabilityOfValidState_function_type( &::ompl::tools::SelfConfig::getProbabilityOfValidState ) );
        
        }
        SelfConfig_exposer.def("__str__", &__str__);
    }

}
