// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/tools.h"
#include "OptimizePlan.pypp.hpp"

namespace bp = boost::python;

void register_OptimizePlan_class(){

    { //::ompl::tools::OptimizePlan
        typedef bp::class_< ompl::tools::OptimizePlan, boost::noncopyable > OptimizePlan_exposer_t;
        OptimizePlan_exposer_t OptimizePlan_exposer = OptimizePlan_exposer_t( "OptimizePlan", bp::init< ompl::base::ProblemDefinitionPtr const & >(( bp::arg("pdef") )) );
        bp::scope OptimizePlan_scope( OptimizePlan_exposer );
        bp::implicitly_convertible< ompl::base::ProblemDefinitionPtr const &, ompl::tools::OptimizePlan >();
        { //::ompl::tools::OptimizePlan::addPlanner
        
            typedef void ( ::ompl::tools::OptimizePlan::*addPlanner_function_type)( ::ompl::base::PlannerPtr const & ) ;
            
            OptimizePlan_exposer.def( 
                "addPlanner"
                , addPlanner_function_type( &::ompl::tools::OptimizePlan::addPlanner )
                , ( bp::arg("planner") ) );
        
        }
        { //::ompl::tools::OptimizePlan::clearPlanners
        
            typedef void ( ::ompl::tools::OptimizePlan::*clearPlanners_function_type)(  ) ;
            
            OptimizePlan_exposer.def( 
                "clearPlanners"
                , clearPlanners_function_type( &::ompl::tools::OptimizePlan::clearPlanners ) );
        
        }
        { //::ompl::tools::OptimizePlan::getProblemDefinition
        
            typedef ::ompl::base::ProblemDefinitionPtr const & ( ::ompl::tools::OptimizePlan::*getProblemDefinition_function_type)(  ) const;
            
            OptimizePlan_exposer.def( 
                "getProblemDefinition"
                , getProblemDefinition_function_type( &::ompl::tools::OptimizePlan::getProblemDefinition )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::tools::OptimizePlan::solve
        
            typedef ::ompl::base::PlannerStatus ( ::ompl::tools::OptimizePlan::*solve_function_type)( double,unsigned int,unsigned int ) ;
            
            OptimizePlan_exposer.def( 
                "solve"
                , solve_function_type( &::ompl::tools::OptimizePlan::solve )
                , ( bp::arg("solveTime"), bp::arg("maxSol")=(unsigned int)(10), bp::arg("nthreads")=(unsigned int)(1) ) );
        
        }
        OptimizePlan_exposer.def("addPlannerAllocator", &ompl::tools::OptimizePlan::addPlannerAllocator);
    }

}
