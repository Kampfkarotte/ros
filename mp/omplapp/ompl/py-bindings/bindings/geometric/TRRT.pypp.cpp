// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/geometric.h"
#include "TRRT.pypp.hpp"

namespace bp = boost::python;

struct TRRT_wrapper : ompl::geometric::TRRT, bp::wrapper< ompl::geometric::TRRT > {

    TRRT_wrapper(::ompl::base::SpaceInformationPtr const & si )
    : ompl::geometric::TRRT( si )
      , bp::wrapper< ompl::geometric::TRRT >(){
        // constructor
    
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->ompl::geometric::TRRT::clear(  );
        }
    }
    
    void default_clear(  ) {
        ompl::geometric::TRRT::clear( );
    }

    void freeMemory(  ){
        ompl::geometric::TRRT::freeMemory(  );
    }

    virtual void getPlannerData( ::ompl::base::PlannerData & data ) const  {
        if( bp::override func_getPlannerData = this->get_override( "getPlannerData" ) )
            func_getPlannerData( boost::ref(data) );
        else{
            this->ompl::geometric::TRRT::getPlannerData( boost::ref(data) );
        }
    }
    
    void default_getPlannerData( ::ompl::base::PlannerData & data ) const  {
        ompl::geometric::TRRT::getPlannerData( boost::ref(data) );
    }

    bool minExpansionControl( double randMotionDistance ){
        return ompl::geometric::TRRT::minExpansionControl( randMotionDistance );
    }

    virtual void setup(  ) {
        if( bp::override func_setup = this->get_override( "setup" ) )
            func_setup(  );
        else{
            this->ompl::geometric::TRRT::setup(  );
        }
    }
    
    void default_setup(  ) {
        ompl::geometric::TRRT::setup( );
    }

    virtual ::ompl::base::PlannerStatus solve( ::ompl::base::PlannerTerminationCondition const & plannerTerminationCondition ) {
        if( bp::override func_solve = this->get_override( "solve" ) )
            return func_solve( boost::ref(plannerTerminationCondition) );
        else{
            return this->ompl::geometric::TRRT::solve( boost::ref(plannerTerminationCondition) );
        }
    }
    
    ::ompl::base::PlannerStatus default_solve( ::ompl::base::PlannerTerminationCondition const & plannerTerminationCondition ) {
        return ompl::geometric::TRRT::solve( boost::ref(plannerTerminationCondition) );
    }

    bool transitionTest( double childCost, double parentCost, double distance ){
        return ompl::geometric::TRRT::transitionTest( childCost, parentCost, distance );
    }

    virtual void checkValidity(  ) {
        if( bp::override func_checkValidity = this->get_override( "checkValidity" ) )
            func_checkValidity(  );
        else{
            this->ompl::base::Planner::checkValidity(  );
        }
    }
    
    void default_checkValidity(  ) {
        ompl::base::Planner::checkValidity( );
    }

    virtual void setProblemDefinition( ::ompl::base::ProblemDefinitionPtr const & pdef ) {
        if( bp::override func_setProblemDefinition = this->get_override( "setProblemDefinition" ) )
            func_setProblemDefinition( pdef );
        else{
            this->ompl::base::Planner::setProblemDefinition( pdef );
        }
    }
    
    void default_setProblemDefinition( ::ompl::base::ProblemDefinitionPtr const & pdef ) {
        ompl::base::Planner::setProblemDefinition( pdef );
    }

};

void register_TRRT_class(){

    { //::ompl::geometric::TRRT
        typedef bp::class_< TRRT_wrapper, bp::bases< ::ompl::base::Planner >, boost::noncopyable > TRRT_exposer_t;
        TRRT_exposer_t TRRT_exposer = TRRT_exposer_t( "TRRT", bp::init< ompl::base::SpaceInformationPtr const & >(( bp::arg("si") )) );
        bp::scope TRRT_scope( TRRT_exposer );
        bp::implicitly_convertible< ompl::base::SpaceInformationPtr const &, ompl::geometric::TRRT >();
        { //::ompl::geometric::TRRT::clear
        
            typedef void ( ::ompl::geometric::TRRT::*clear_function_type)(  ) ;
            typedef void ( TRRT_wrapper::*default_clear_function_type)(  ) ;
            
            TRRT_exposer.def( 
                "clear"
                , clear_function_type(&::ompl::geometric::TRRT::clear)
                , default_clear_function_type(&TRRT_wrapper::default_clear) );
        
        }
        { //::ompl::geometric::TRRT::freeMemory
        
            typedef void ( TRRT_wrapper::*freeMemory_function_type)(  ) ;
            
            TRRT_exposer.def( 
                "freeMemory"
                , freeMemory_function_type( &TRRT_wrapper::freeMemory ) );
        
        }
        { //::ompl::geometric::TRRT::getFrontierNodeRatio
        
            typedef double ( ::ompl::geometric::TRRT::*getFrontierNodeRatio_function_type)(  ) const;
            
            TRRT_exposer.def( 
                "getFrontierNodeRatio"
                , getFrontierNodeRatio_function_type( &::ompl::geometric::TRRT::getFrontierNodeRatio ) );
        
        }
        { //::ompl::geometric::TRRT::getFrontierThreshold
        
            typedef double ( ::ompl::geometric::TRRT::*getFrontierThreshold_function_type)(  ) const;
            
            TRRT_exposer.def( 
                "getFrontierThreshold"
                , getFrontierThreshold_function_type( &::ompl::geometric::TRRT::getFrontierThreshold ) );
        
        }
        { //::ompl::geometric::TRRT::getGoalBias
        
            typedef double ( ::ompl::geometric::TRRT::*getGoalBias_function_type)(  ) const;
            
            TRRT_exposer.def( 
                "getGoalBias"
                , getGoalBias_function_type( &::ompl::geometric::TRRT::getGoalBias ) );
        
        }
        { //::ompl::geometric::TRRT::getInitTemperature
        
            typedef double ( ::ompl::geometric::TRRT::*getInitTemperature_function_type)(  ) const;
            
            TRRT_exposer.def( 
                "getInitTemperature"
                , getInitTemperature_function_type( &::ompl::geometric::TRRT::getInitTemperature ) );
        
        }
        { //::ompl::geometric::TRRT::getKConstant
        
            typedef double ( ::ompl::geometric::TRRT::*getKConstant_function_type)(  ) const;
            
            TRRT_exposer.def( 
                "getKConstant"
                , getKConstant_function_type( &::ompl::geometric::TRRT::getKConstant ) );
        
        }
        { //::ompl::geometric::TRRT::getMaxStatesFailed
        
            typedef double ( ::ompl::geometric::TRRT::*getMaxStatesFailed_function_type)(  ) const;
            
            TRRT_exposer.def( 
                "getMaxStatesFailed"
                , getMaxStatesFailed_function_type( &::ompl::geometric::TRRT::getMaxStatesFailed ) );
        
        }
        { //::ompl::geometric::TRRT::getMinTemperature
        
            typedef double ( ::ompl::geometric::TRRT::*getMinTemperature_function_type)(  ) const;
            
            TRRT_exposer.def( 
                "getMinTemperature"
                , getMinTemperature_function_type( &::ompl::geometric::TRRT::getMinTemperature ) );
        
        }
        { //::ompl::geometric::TRRT::getPlannerData
        
            typedef void ( ::ompl::geometric::TRRT::*getPlannerData_function_type)( ::ompl::base::PlannerData & ) const;
            typedef void ( TRRT_wrapper::*default_getPlannerData_function_type)( ::ompl::base::PlannerData & ) const;
            
            TRRT_exposer.def( 
                "getPlannerData"
                , getPlannerData_function_type(&::ompl::geometric::TRRT::getPlannerData)
                , default_getPlannerData_function_type(&TRRT_wrapper::default_getPlannerData)
                , ( bp::arg("data") ) );
        
        }
        { //::ompl::geometric::TRRT::getRange
        
            typedef double ( ::ompl::geometric::TRRT::*getRange_function_type)(  ) const;
            
            TRRT_exposer.def( 
                "getRange"
                , getRange_function_type( &::ompl::geometric::TRRT::getRange ) );
        
        }
        { //::ompl::geometric::TRRT::getTempChangeFactor
        
            typedef double ( ::ompl::geometric::TRRT::*getTempChangeFactor_function_type)(  ) const;
            
            TRRT_exposer.def( 
                "getTempChangeFactor"
                , getTempChangeFactor_function_type( &::ompl::geometric::TRRT::getTempChangeFactor ) );
        
        }
        { //::ompl::geometric::TRRT::minExpansionControl
        
            typedef bool ( TRRT_wrapper::*minExpansionControl_function_type)( double ) ;
            
            TRRT_exposer.def( 
                "minExpansionControl"
                , minExpansionControl_function_type( &TRRT_wrapper::minExpansionControl )
                , ( bp::arg("randMotionDistance") ) );
        
        }
        { //::ompl::geometric::TRRT::setFrontierNodeRatio
        
            typedef void ( ::ompl::geometric::TRRT::*setFrontierNodeRatio_function_type)( double ) ;
            
            TRRT_exposer.def( 
                "setFrontierNodeRatio"
                , setFrontierNodeRatio_function_type( &::ompl::geometric::TRRT::setFrontierNodeRatio )
                , ( bp::arg("frontierNodeRatio") ) );
        
        }
        { //::ompl::geometric::TRRT::setFrontierThreshold
        
            typedef void ( ::ompl::geometric::TRRT::*setFrontierThreshold_function_type)( double ) ;
            
            TRRT_exposer.def( 
                "setFrontierThreshold"
                , setFrontierThreshold_function_type( &::ompl::geometric::TRRT::setFrontierThreshold )
                , ( bp::arg("frontier_threshold") ) );
        
        }
        { //::ompl::geometric::TRRT::setGoalBias
        
            typedef void ( ::ompl::geometric::TRRT::*setGoalBias_function_type)( double ) ;
            
            TRRT_exposer.def( 
                "setGoalBias"
                , setGoalBias_function_type( &::ompl::geometric::TRRT::setGoalBias )
                , ( bp::arg("goalBias") ) );
        
        }
        { //::ompl::geometric::TRRT::setInitTemperature
        
            typedef void ( ::ompl::geometric::TRRT::*setInitTemperature_function_type)( double ) ;
            
            TRRT_exposer.def( 
                "setInitTemperature"
                , setInitTemperature_function_type( &::ompl::geometric::TRRT::setInitTemperature )
                , ( bp::arg("initTemperature") ) );
        
        }
        { //::ompl::geometric::TRRT::setKConstant
        
            typedef void ( ::ompl::geometric::TRRT::*setKConstant_function_type)( double ) ;
            
            TRRT_exposer.def( 
                "setKConstant"
                , setKConstant_function_type( &::ompl::geometric::TRRT::setKConstant )
                , ( bp::arg("kConstant") ) );
        
        }
        { //::ompl::geometric::TRRT::setMaxStatesFailed
        
            typedef void ( ::ompl::geometric::TRRT::*setMaxStatesFailed_function_type)( double ) ;
            
            TRRT_exposer.def( 
                "setMaxStatesFailed"
                , setMaxStatesFailed_function_type( &::ompl::geometric::TRRT::setMaxStatesFailed )
                , ( bp::arg("maxStatesFailed") ) );
        
        }
        { //::ompl::geometric::TRRT::setMinTemperature
        
            typedef void ( ::ompl::geometric::TRRT::*setMinTemperature_function_type)( double ) ;
            
            TRRT_exposer.def( 
                "setMinTemperature"
                , setMinTemperature_function_type( &::ompl::geometric::TRRT::setMinTemperature )
                , ( bp::arg("minTemperature") ) );
        
        }
        { //::ompl::geometric::TRRT::setRange
        
            typedef void ( ::ompl::geometric::TRRT::*setRange_function_type)( double ) ;
            
            TRRT_exposer.def( 
                "setRange"
                , setRange_function_type( &::ompl::geometric::TRRT::setRange )
                , ( bp::arg("distance") ) );
        
        }
        { //::ompl::geometric::TRRT::setTempChangeFactor
        
            typedef void ( ::ompl::geometric::TRRT::*setTempChangeFactor_function_type)( double ) ;
            
            TRRT_exposer.def( 
                "setTempChangeFactor"
                , setTempChangeFactor_function_type( &::ompl::geometric::TRRT::setTempChangeFactor )
                , ( bp::arg("tempChangeFactor") ) );
        
        }
        { //::ompl::geometric::TRRT::setup
        
            typedef void ( ::ompl::geometric::TRRT::*setup_function_type)(  ) ;
            typedef void ( TRRT_wrapper::*default_setup_function_type)(  ) ;
            
            TRRT_exposer.def( 
                "setup"
                , setup_function_type(&::ompl::geometric::TRRT::setup)
                , default_setup_function_type(&TRRT_wrapper::default_setup) );
        
        }
        { //::ompl::geometric::TRRT::solve
        
            typedef ::ompl::base::PlannerStatus ( ::ompl::geometric::TRRT::*solve_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            typedef ::ompl::base::PlannerStatus ( TRRT_wrapper::*default_solve_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            
            TRRT_exposer.def( 
                "solve"
                , solve_function_type(&::ompl::geometric::TRRT::solve)
                , default_solve_function_type(&TRRT_wrapper::default_solve)
                , ( bp::arg("plannerTerminationCondition") ) );
        
        }
        { //::ompl::geometric::TRRT::transitionTest
        
            typedef bool ( TRRT_wrapper::*transitionTest_function_type)( double,double,double ) ;
            
            TRRT_exposer.def( 
                "transitionTest"
                , transitionTest_function_type( &TRRT_wrapper::transitionTest )
                , ( bp::arg("childCost"), bp::arg("parentCost"), bp::arg("distance") ) );
        
        }
        TRRT_exposer.def("solve", (::ompl::base::PlannerStatus(::ompl::base::Planner::*)( double ))(&::ompl::base::Planner::solve), (bp::arg("solveTime")) );
        TRRT_exposer.def("setProblemDefinition",&::ompl::base::Planner::setProblemDefinition,
                            &TRRT_wrapper::default_setProblemDefinition, (bp::arg("pdef")) );
        TRRT_exposer.def("checkValidity",&::ompl::base::Planner::checkValidity,
                        &TRRT_wrapper::default_checkValidity );
    }

}
