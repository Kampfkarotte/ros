// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/geometric.h"
#include "KStarStrategy.pypp.hpp"

namespace bp = boost::python;

void register_KStarStrategy_class(){

    { //::ompl::geometric::KStarStrategy< unsigned long >
        typedef bp::class_< ompl::geometric::KStarStrategy< unsigned long >, bp::bases< ompl::geometric::KStrategy< unsigned long > >, boost::noncopyable > KStarStrategy_exposer_t;
        KStarStrategy_exposer_t KStarStrategy_exposer = KStarStrategy_exposer_t( "KStarStrategy", bp::init< boost::function< unsigned int () > const &, boost::shared_ptr< ompl::NearestNeighbors< unsigned long > > const &, bp::optional< unsigned int > >(( bp::arg("n"), bp::arg("nn"), bp::arg("d")=(unsigned int const)(1) )) );
        bp::scope KStarStrategy_scope( KStarStrategy_exposer );
        { //::ompl::geometric::KStarStrategy< unsigned long >::operator()
        
            typedef ompl::geometric::KStarStrategy< unsigned long > exported_class_t;
            typedef ::std::vector< unsigned long > & ( exported_class_t::*__call___function_type)( long unsigned int const & ) ;
            
            KStarStrategy_exposer.def( 
                "__call__"
                , __call___function_type( &::ompl::geometric::KStarStrategy< unsigned long >::operator() )
                , ( bp::arg("m") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
    }

}
