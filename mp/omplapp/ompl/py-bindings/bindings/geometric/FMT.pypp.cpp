// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/geometric.h"
#include "FMT.pypp.hpp"

namespace bp = boost::python;

struct FMT_wrapper : ompl::geometric::FMT, bp::wrapper< ompl::geometric::FMT > {

    FMT_wrapper(::ompl::base::SpaceInformationPtr const & si )
    : ompl::geometric::FMT( si )
      , bp::wrapper< ompl::geometric::FMT >(){
        // constructor
    
    }

    void assureGoalIsSampled( ::ompl::base::GoalSampleableRegion const * goal ){
        ompl::geometric::FMT::assureGoalIsSampled( boost::python::ptr(goal) );
    }

    double calculateRadius( unsigned int dimension, unsigned int n ) const {
        return ompl::geometric::FMT::calculateRadius( dimension, n );
    }

    double calculateUnitBallVolume( unsigned int const dimension ) const {
        return ompl::geometric::FMT::calculateUnitBallVolume( dimension );
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->ompl::geometric::FMT::clear(  );
        }
    }
    
    void default_clear(  ) {
        ompl::geometric::FMT::clear( );
    }

    void freeMemory(  ){
        ompl::geometric::FMT::freeMemory(  );
    }

    virtual void getPlannerData( ::ompl::base::PlannerData & data ) const  {
        if( bp::override func_getPlannerData = this->get_override( "getPlannerData" ) )
            func_getPlannerData( boost::ref(data) );
        else{
            this->ompl::geometric::FMT::getPlannerData( boost::ref(data) );
        }
    }
    
    void default_getPlannerData( ::ompl::base::PlannerData & data ) const  {
        ompl::geometric::FMT::getPlannerData( boost::ref(data) );
    }

    void sampleFree( ::ompl::base::PlannerTerminationCondition const & ptc ){
        ompl::geometric::FMT::sampleFree( boost::ref(ptc) );
    }

    virtual void setup(  ) {
        if( bp::override func_setup = this->get_override( "setup" ) )
            func_setup(  );
        else{
            this->ompl::geometric::FMT::setup(  );
        }
    }
    
    void default_setup(  ) {
        ompl::geometric::FMT::setup( );
    }

    virtual ::ompl::base::PlannerStatus solve( ::ompl::base::PlannerTerminationCondition const & ptc ) {
        if( bp::override func_solve = this->get_override( "solve" ) )
            return func_solve( boost::ref(ptc) );
        else{
            return this->ompl::geometric::FMT::solve( boost::ref(ptc) );
        }
    }
    
    ::ompl::base::PlannerStatus default_solve( ::ompl::base::PlannerTerminationCondition const & ptc ) {
        return ompl::geometric::FMT::solve( boost::ref(ptc) );
    }

    virtual void checkValidity(  ) {
        if( bp::override func_checkValidity = this->get_override( "checkValidity" ) )
            func_checkValidity(  );
        else{
            this->ompl::base::Planner::checkValidity(  );
        }
    }
    
    void default_checkValidity(  ) {
        ompl::base::Planner::checkValidity( );
    }

    virtual void setProblemDefinition( ::ompl::base::ProblemDefinitionPtr const & pdef ) {
        if( bp::override func_setProblemDefinition = this->get_override( "setProblemDefinition" ) )
            func_setProblemDefinition( pdef );
        else{
            this->ompl::base::Planner::setProblemDefinition( pdef );
        }
    }
    
    void default_setProblemDefinition( ::ompl::base::ProblemDefinitionPtr const & pdef ) {
        ompl::base::Planner::setProblemDefinition( pdef );
    }

};

void register_FMT_class(){

    { //::ompl::geometric::FMT
        typedef bp::class_< FMT_wrapper, bp::bases< ::ompl::base::Planner >, boost::noncopyable > FMT_exposer_t;
        FMT_exposer_t FMT_exposer = FMT_exposer_t( "FMT", bp::init< ompl::base::SpaceInformationPtr const & >(( bp::arg("si") )) );
        bp::scope FMT_scope( FMT_exposer );
        bp::implicitly_convertible< ompl::base::SpaceInformationPtr const &, ompl::geometric::FMT >();
        { //::ompl::geometric::FMT::assureGoalIsSampled
        
            typedef void ( FMT_wrapper::*assureGoalIsSampled_function_type)( ::ompl::base::GoalSampleableRegion const * ) ;
            
            FMT_exposer.def( 
                "assureGoalIsSampled"
                , assureGoalIsSampled_function_type( &FMT_wrapper::assureGoalIsSampled )
                , ( bp::arg("goal") ) );
        
        }
        { //::ompl::geometric::FMT::calculateRadius
        
            typedef double ( FMT_wrapper::*calculateRadius_function_type)( unsigned int,unsigned int ) const;
            
            FMT_exposer.def( 
                "calculateRadius"
                , calculateRadius_function_type( &FMT_wrapper::calculateRadius )
                , ( bp::arg("dimension"), bp::arg("n") ) );
        
        }
        { //::ompl::geometric::FMT::calculateUnitBallVolume
        
            typedef double ( FMT_wrapper::*calculateUnitBallVolume_function_type)( unsigned int const ) const;
            
            FMT_exposer.def( 
                "calculateUnitBallVolume"
                , calculateUnitBallVolume_function_type( &FMT_wrapper::calculateUnitBallVolume )
                , ( bp::arg("dimension") ) );
        
        }
        { //::ompl::geometric::FMT::clear
        
            typedef void ( ::ompl::geometric::FMT::*clear_function_type)(  ) ;
            typedef void ( FMT_wrapper::*default_clear_function_type)(  ) ;
            
            FMT_exposer.def( 
                "clear"
                , clear_function_type(&::ompl::geometric::FMT::clear)
                , default_clear_function_type(&FMT_wrapper::default_clear) );
        
        }
        { //::ompl::geometric::FMT::freeMemory
        
            typedef void ( FMT_wrapper::*freeMemory_function_type)(  ) ;
            
            FMT_exposer.def( 
                "freeMemory"
                , freeMemory_function_type( &FMT_wrapper::freeMemory ) );
        
        }
        { //::ompl::geometric::FMT::getFreeSpaceVolume
        
            typedef double ( ::ompl::geometric::FMT::*getFreeSpaceVolume_function_type)(  ) const;
            
            FMT_exposer.def( 
                "getFreeSpaceVolume"
                , getFreeSpaceVolume_function_type( &::ompl::geometric::FMT::getFreeSpaceVolume ) );
        
        }
        { //::ompl::geometric::FMT::getNumSamples
        
            typedef unsigned int ( ::ompl::geometric::FMT::*getNumSamples_function_type)(  ) const;
            
            FMT_exposer.def( 
                "getNumSamples"
                , getNumSamples_function_type( &::ompl::geometric::FMT::getNumSamples ) );
        
        }
        { //::ompl::geometric::FMT::getPlannerData
        
            typedef void ( ::ompl::geometric::FMT::*getPlannerData_function_type)( ::ompl::base::PlannerData & ) const;
            typedef void ( FMT_wrapper::*default_getPlannerData_function_type)( ::ompl::base::PlannerData & ) const;
            
            FMT_exposer.def( 
                "getPlannerData"
                , getPlannerData_function_type(&::ompl::geometric::FMT::getPlannerData)
                , default_getPlannerData_function_type(&FMT_wrapper::default_getPlannerData)
                , ( bp::arg("data") ) );
        
        }
        { //::ompl::geometric::FMT::getRadiusMultiplier
        
            typedef double ( ::ompl::geometric::FMT::*getRadiusMultiplier_function_type)(  ) const;
            
            FMT_exposer.def( 
                "getRadiusMultiplier"
                , getRadiusMultiplier_function_type( &::ompl::geometric::FMT::getRadiusMultiplier ) );
        
        }
        { //::ompl::geometric::FMT::sampleFree
        
            typedef void ( FMT_wrapper::*sampleFree_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            
            FMT_exposer.def( 
                "sampleFree"
                , sampleFree_function_type( &FMT_wrapper::sampleFree )
                , ( bp::arg("ptc") ) );
        
        }
        { //::ompl::geometric::FMT::setFreeSpaceVolume
        
            typedef void ( ::ompl::geometric::FMT::*setFreeSpaceVolume_function_type)( double const ) ;
            
            FMT_exposer.def( 
                "setFreeSpaceVolume"
                , setFreeSpaceVolume_function_type( &::ompl::geometric::FMT::setFreeSpaceVolume )
                , ( bp::arg("freeSpaceVolume") ) );
        
        }
        { //::ompl::geometric::FMT::setNumSamples
        
            typedef void ( ::ompl::geometric::FMT::*setNumSamples_function_type)( unsigned int const ) ;
            
            FMT_exposer.def( 
                "setNumSamples"
                , setNumSamples_function_type( &::ompl::geometric::FMT::setNumSamples )
                , ( bp::arg("numSamples") ) );
        
        }
        { //::ompl::geometric::FMT::setRadiusMultiplier
        
            typedef void ( ::ompl::geometric::FMT::*setRadiusMultiplier_function_type)( double const ) ;
            
            FMT_exposer.def( 
                "setRadiusMultiplier"
                , setRadiusMultiplier_function_type( &::ompl::geometric::FMT::setRadiusMultiplier )
                , ( bp::arg("radiusMultiplier") ) );
        
        }
        { //::ompl::geometric::FMT::setup
        
            typedef void ( ::ompl::geometric::FMT::*setup_function_type)(  ) ;
            typedef void ( FMT_wrapper::*default_setup_function_type)(  ) ;
            
            FMT_exposer.def( 
                "setup"
                , setup_function_type(&::ompl::geometric::FMT::setup)
                , default_setup_function_type(&FMT_wrapper::default_setup) );
        
        }
        { //::ompl::geometric::FMT::solve
        
            typedef ::ompl::base::PlannerStatus ( ::ompl::geometric::FMT::*solve_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            typedef ::ompl::base::PlannerStatus ( FMT_wrapper::*default_solve_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            
            FMT_exposer.def( 
                "solve"
                , solve_function_type(&::ompl::geometric::FMT::solve)
                , default_solve_function_type(&FMT_wrapper::default_solve)
                , ( bp::arg("ptc") ) );
        
        }
        FMT_exposer.def("solve", (::ompl::base::PlannerStatus(::ompl::base::Planner::*)( double ))(&::ompl::base::Planner::solve), (bp::arg("solveTime")) );
        FMT_exposer.def("setProblemDefinition",&::ompl::base::Planner::setProblemDefinition,
                            &FMT_wrapper::default_setProblemDefinition, (bp::arg("pdef")) );
        FMT_exposer.def("checkValidity",&::ompl::base::Planner::checkValidity,
                        &FMT_wrapper::default_checkValidity );
    }

}
