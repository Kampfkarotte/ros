// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/geometric.h"
#include "PRMstar.pypp.hpp"

namespace bp = boost::python;

struct PRMstar_wrapper : ompl::geometric::PRMstar, bp::wrapper< ompl::geometric::PRMstar > {

    PRMstar_wrapper(::ompl::base::SpaceInformationPtr const & si )
    : ompl::geometric::PRMstar( si )
      , bp::wrapper< ompl::geometric::PRMstar >(){
        // constructor
    
    }

    virtual long unsigned int addMilestone( ::ompl::base::State * state ){
        if( bp::override func_addMilestone = this->get_override( "addMilestone" ) )
            return func_addMilestone( boost::python::ptr(state) );
        else{
            return this->ompl::geometric::PRM::addMilestone( boost::python::ptr(state) );
        }
    }
    
    virtual long unsigned int default_addMilestone( ::ompl::base::State * state ){
        return ompl::geometric::PRM::addMilestone( boost::python::ptr(state) );
    }

    bool addedNewSolution(  ) const {
        return ompl::geometric::PRM::addedNewSolution(  );
    }

    void checkForSolution( ::ompl::base::PlannerTerminationCondition const & ptc, ::ompl::base::PathPtr & solution ){
        ompl::geometric::PRM::checkForSolution( boost::ref(ptc), solution );
    }

    virtual void checkValidity(  ) {
        if( bp::override func_checkValidity = this->get_override( "checkValidity" ) )
            func_checkValidity(  );
        else{
            this->ompl::base::Planner::checkValidity(  );
        }
    }
    
    void default_checkValidity(  ) {
        ompl::base::Planner::checkValidity( );
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->ompl::geometric::PRM::clear(  );
        }
    }
    
    void default_clear(  ) {
        ompl::geometric::PRM::clear( );
    }

    virtual ::ompl::base::PathPtr constructGeometricPath( ::boost::vector_property_map< long unsigned int, boost::typed_identity_property_map< long unsigned int > > const & prev, long unsigned int const & start, long unsigned int const & goal ){
        if( bp::override func_constructGeometricPath = this->get_override( "constructGeometricPath" ) )
            return func_constructGeometricPath( boost::ref(prev), start, goal );
        else{
            return this->ompl::geometric::PRM::constructGeometricPath( boost::ref(prev), start, goal );
        }
    }
    
    virtual ::ompl::base::PathPtr default_constructGeometricPath( ::boost::vector_property_map< long unsigned int, boost::typed_identity_property_map< long unsigned int > > const & prev, long unsigned int const & start, long unsigned int const & goal ){
        return ompl::geometric::PRM::constructGeometricPath( boost::ref(prev), start, goal );
    }

    virtual void constructRoadmap( ::ompl::base::PlannerTerminationCondition const & ptc ) {
        if( bp::override func_constructRoadmap = this->get_override( "constructRoadmap" ) )
            func_constructRoadmap( boost::ref(ptc) );
        else{
            this->ompl::geometric::PRM::constructRoadmap( boost::ref(ptc) );
        }
    }
    
    void default_constructRoadmap( ::ompl::base::PlannerTerminationCondition const & ptc ) {
        ompl::geometric::PRM::constructRoadmap( boost::ref(ptc) );
    }

    virtual ::ompl::base::PathPtr constructSolution( long unsigned int const & start, long unsigned int const & goal ){
        if( bp::override func_constructSolution = this->get_override( "constructSolution" ) )
            return func_constructSolution( start, goal );
        else{
            return this->ompl::geometric::PRM::constructSolution( start, goal );
        }
    }
    
    virtual ::ompl::base::PathPtr default_constructSolution( long unsigned int const & start, long unsigned int const & goal ){
        return ompl::geometric::PRM::constructSolution( start, goal );
    }

    ::ompl::base::Cost costHeuristic( long unsigned int u, long unsigned int v ) const {
        return ompl::geometric::PRM::costHeuristic( u, v );
    }

    virtual void expandRoadmap( double expandTime ) {
        if( bp::override func_expandRoadmap = this->get_override( "expandRoadmap" ) )
            func_expandRoadmap( expandTime );
        else{
            this->ompl::geometric::PRM::expandRoadmap( expandTime );
        }
    }
    
    void default_expandRoadmap( double expandTime ) {
        ompl::geometric::PRM::expandRoadmap( expandTime );
    }

    virtual void expandRoadmap( ::ompl::base::PlannerTerminationCondition const & ptc ) {
        if( bp::override func_expandRoadmap = this->get_override( "expandRoadmap" ) )
            func_expandRoadmap( boost::ref(ptc) );
        else{
            this->ompl::geometric::PRM::expandRoadmap( boost::ref(ptc) );
        }
    }
    
    void default_expandRoadmap( ::ompl::base::PlannerTerminationCondition const & ptc ) {
        ompl::geometric::PRM::expandRoadmap( boost::ref(ptc) );
    }

    void freeMemory(  ){
        ompl::geometric::PRM::freeMemory(  );
    }

    virtual void getPlannerData( ::ompl::base::PlannerData & data ) const  {
        if( bp::override func_getPlannerData = this->get_override( "getPlannerData" ) )
            func_getPlannerData( boost::ref(data) );
        else{
            this->ompl::geometric::PRM::getPlannerData( boost::ref(data) );
        }
    }
    
    void default_getPlannerData( ::ompl::base::PlannerData & data ) const  {
        ompl::geometric::PRM::getPlannerData( boost::ref(data) );
    }

    virtual void growRoadmap( double growTime ) {
        if( bp::override func_growRoadmap = this->get_override( "growRoadmap" ) )
            func_growRoadmap( growTime );
        else{
            this->ompl::geometric::PRM::growRoadmap( growTime );
        }
    }
    
    void default_growRoadmap( double growTime ) {
        ompl::geometric::PRM::growRoadmap( growTime );
    }

    virtual void growRoadmap( ::ompl::base::PlannerTerminationCondition const & ptc ) {
        if( bp::override func_growRoadmap = this->get_override( "growRoadmap" ) )
            func_growRoadmap( boost::ref(ptc) );
        else{
            this->ompl::geometric::PRM::growRoadmap( boost::ref(ptc) );
        }
    }
    
    void default_growRoadmap( ::ompl::base::PlannerTerminationCondition const & ptc ) {
        ompl::geometric::PRM::growRoadmap( boost::ref(ptc) );
    }

    bool sameComponent( long unsigned int m1, long unsigned int m2 ){
        return ompl::geometric::PRM::sameComponent( m1, m2 );
    }

    virtual void setProblemDefinition( ::ompl::base::ProblemDefinitionPtr const & pdef ) {
        if( bp::override func_setProblemDefinition = this->get_override( "setProblemDefinition" ) )
            func_setProblemDefinition( pdef );
        else{
            this->ompl::geometric::PRM::setProblemDefinition( pdef );
        }
    }
    
    void default_setProblemDefinition( ::ompl::base::ProblemDefinitionPtr const & pdef ) {
        ompl::geometric::PRM::setProblemDefinition( pdef );
    }

    virtual void setup(  ) {
        if( bp::override func_setup = this->get_override( "setup" ) )
            func_setup(  );
        else{
            this->ompl::geometric::PRM::setup(  );
        }
    }
    
    void default_setup(  ) {
        ompl::geometric::PRM::setup( );
    }

    void uniteComponents( long unsigned int m1, long unsigned int m2 ){
        ompl::geometric::PRM::uniteComponents( m1, m2 );
    }

};

void register_PRMstar_class(){

    { //::ompl::geometric::PRMstar
        typedef bp::class_< PRMstar_wrapper, bp::bases< ompl::geometric::PRM >, boost::noncopyable > PRMstar_exposer_t;
        PRMstar_exposer_t PRMstar_exposer = PRMstar_exposer_t( "PRMstar", bp::init< ompl::base::SpaceInformationPtr const & >(( bp::arg("si") )) );
        bp::scope PRMstar_scope( PRMstar_exposer );
        bp::implicitly_convertible< ompl::base::SpaceInformationPtr const &, ompl::geometric::PRMstar >();
        { //::ompl::geometric::PRM::addMilestone
        
            typedef long unsigned int ( PRMstar_wrapper::*addMilestone_function_type)( ::ompl::base::State * ) ;
            
            PRMstar_exposer.def( 
                "addMilestone"
                , addMilestone_function_type( &PRMstar_wrapper::default_addMilestone )
                , ( bp::arg("state") ) );
        
        }
        { //::ompl::geometric::PRM::addedNewSolution
        
            typedef bool ( PRMstar_wrapper::*addedNewSolution_function_type)(  ) const;
            
            PRMstar_exposer.def( 
                "addedNewSolution"
                , addedNewSolution_function_type( &PRMstar_wrapper::addedNewSolution ) );
        
        }
        { //::ompl::geometric::PRM::checkForSolution
        
            typedef void ( PRMstar_wrapper::*checkForSolution_function_type)( ::ompl::base::PlannerTerminationCondition const &,::ompl::base::PathPtr & ) ;
            
            PRMstar_exposer.def( 
                "checkForSolution"
                , checkForSolution_function_type( &PRMstar_wrapper::checkForSolution )
                , ( bp::arg("ptc"), bp::arg("solution") ) );
        
        }
        { //::ompl::geometric::PRM::clear
        
            typedef void ( ::ompl::geometric::PRM::*clear_function_type)(  ) ;
            typedef void ( PRMstar_wrapper::*default_clear_function_type)(  ) ;
            
            PRMstar_exposer.def( 
                "clear"
                , clear_function_type(&::ompl::geometric::PRM::clear)
                , default_clear_function_type(&PRMstar_wrapper::default_clear) );
        
        }
        { //::ompl::geometric::PRM::constructGeometricPath
        
            typedef ::ompl::base::PathPtr ( PRMstar_wrapper::*constructGeometricPath_function_type)( ::boost::vector_property_map< long unsigned int, boost::typed_identity_property_map< long unsigned int > > const &,long unsigned int const &,long unsigned int const & ) ;
            
            PRMstar_exposer.def( 
                "constructGeometricPath"
                , constructGeometricPath_function_type( &PRMstar_wrapper::default_constructGeometricPath )
                , ( bp::arg("prev"), bp::arg("start"), bp::arg("goal") ) );
        
        }
        { //::ompl::geometric::PRM::constructRoadmap
        
            typedef void ( ::ompl::geometric::PRM::*constructRoadmap_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            typedef void ( PRMstar_wrapper::*default_constructRoadmap_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            
            PRMstar_exposer.def( 
                "constructRoadmap"
                , constructRoadmap_function_type(&::ompl::geometric::PRM::constructRoadmap)
                , default_constructRoadmap_function_type(&PRMstar_wrapper::default_constructRoadmap)
                , ( bp::arg("ptc") ) );
        
        }
        { //::ompl::geometric::PRM::constructSolution
        
            typedef ::ompl::base::PathPtr ( PRMstar_wrapper::*constructSolution_function_type)( long unsigned int const &,long unsigned int const & ) ;
            
            PRMstar_exposer.def( 
                "constructSolution"
                , constructSolution_function_type( &PRMstar_wrapper::default_constructSolution )
                , ( bp::arg("start"), bp::arg("goal") ) );
        
        }
        { //::ompl::geometric::PRM::costHeuristic
        
            typedef ::ompl::base::Cost ( PRMstar_wrapper::*costHeuristic_function_type)( long unsigned int,long unsigned int ) const;
            
            PRMstar_exposer.def( 
                "costHeuristic"
                , costHeuristic_function_type( &PRMstar_wrapper::costHeuristic )
                , ( bp::arg("u"), bp::arg("v") ) );
        
        }
        { //::ompl::geometric::PRM::expandRoadmap
        
            typedef void ( ::ompl::geometric::PRM::*expandRoadmap_function_type)( double ) ;
            typedef void ( PRMstar_wrapper::*default_expandRoadmap_function_type)( double ) ;
            
            PRMstar_exposer.def( 
                "expandRoadmap"
                , expandRoadmap_function_type(&::ompl::geometric::PRM::expandRoadmap)
                , default_expandRoadmap_function_type(&PRMstar_wrapper::default_expandRoadmap)
                , ( bp::arg("expandTime") ) );
        
        }
        { //::ompl::geometric::PRM::expandRoadmap
        
            typedef void ( ::ompl::geometric::PRM::*expandRoadmap_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            typedef void ( PRMstar_wrapper::*default_expandRoadmap_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            
            PRMstar_exposer.def( 
                "expandRoadmap"
                , expandRoadmap_function_type(&::ompl::geometric::PRM::expandRoadmap)
                , default_expandRoadmap_function_type(&PRMstar_wrapper::default_expandRoadmap)
                , ( bp::arg("ptc") ) );
        
        }
        { //::ompl::geometric::PRM::freeMemory
        
            typedef void ( PRMstar_wrapper::*freeMemory_function_type)(  ) ;
            
            PRMstar_exposer.def( 
                "freeMemory"
                , freeMemory_function_type( &PRMstar_wrapper::freeMemory ) );
        
        }
        { //::ompl::geometric::PRM::getPlannerData
        
            typedef void ( ::ompl::geometric::PRM::*getPlannerData_function_type)( ::ompl::base::PlannerData & ) const;
            typedef void ( PRMstar_wrapper::*default_getPlannerData_function_type)( ::ompl::base::PlannerData & ) const;
            
            PRMstar_exposer.def( 
                "getPlannerData"
                , getPlannerData_function_type(&::ompl::geometric::PRM::getPlannerData)
                , default_getPlannerData_function_type(&PRMstar_wrapper::default_getPlannerData)
                , ( bp::arg("data") ) );
        
        }
        { //::ompl::geometric::PRM::growRoadmap
        
            typedef void ( ::ompl::geometric::PRM::*growRoadmap_function_type)( double ) ;
            typedef void ( PRMstar_wrapper::*default_growRoadmap_function_type)( double ) ;
            
            PRMstar_exposer.def( 
                "growRoadmap"
                , growRoadmap_function_type(&::ompl::geometric::PRM::growRoadmap)
                , default_growRoadmap_function_type(&PRMstar_wrapper::default_growRoadmap)
                , ( bp::arg("growTime") ) );
        
        }
        { //::ompl::geometric::PRM::growRoadmap
        
            typedef void ( ::ompl::geometric::PRM::*growRoadmap_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            typedef void ( PRMstar_wrapper::*default_growRoadmap_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            
            PRMstar_exposer.def( 
                "growRoadmap"
                , growRoadmap_function_type(&::ompl::geometric::PRM::growRoadmap)
                , default_growRoadmap_function_type(&PRMstar_wrapper::default_growRoadmap)
                , ( bp::arg("ptc") ) );
        
        }
        { //::ompl::geometric::PRM::sameComponent
        
            typedef bool ( PRMstar_wrapper::*sameComponent_function_type)( long unsigned int,long unsigned int ) ;
            
            PRMstar_exposer.def( 
                "sameComponent"
                , sameComponent_function_type( &PRMstar_wrapper::sameComponent )
                , ( bp::arg("m1"), bp::arg("m2") ) );
        
        }
        { //::ompl::geometric::PRM::setProblemDefinition
        
            typedef void ( ::ompl::geometric::PRM::*setProblemDefinition_function_type)( ::ompl::base::ProblemDefinitionPtr const & ) ;
            typedef void ( PRMstar_wrapper::*default_setProblemDefinition_function_type)( ::ompl::base::ProblemDefinitionPtr const & ) ;
            
            PRMstar_exposer.def( 
                "setProblemDefinition"
                , setProblemDefinition_function_type(&::ompl::geometric::PRM::setProblemDefinition)
                , default_setProblemDefinition_function_type(&PRMstar_wrapper::default_setProblemDefinition)
                , ( bp::arg("pdef") ) );
        
        }
        { //::ompl::geometric::PRM::setup
        
            typedef void ( ::ompl::geometric::PRM::*setup_function_type)(  ) ;
            typedef void ( PRMstar_wrapper::*default_setup_function_type)(  ) ;
            
            PRMstar_exposer.def( 
                "setup"
                , setup_function_type(&::ompl::geometric::PRM::setup)
                , default_setup_function_type(&PRMstar_wrapper::default_setup) );
        
        }
        { //::ompl::geometric::PRM::uniteComponents
        
            typedef void ( PRMstar_wrapper::*uniteComponents_function_type)( long unsigned int,long unsigned int ) ;
            
            PRMstar_exposer.def( 
                "uniteComponents"
                , uniteComponents_function_type( &PRMstar_wrapper::uniteComponents )
                , ( bp::arg("m1"), bp::arg("m2") ) );
        
        }
        PRMstar_exposer.def("solve", (::ompl::base::PlannerStatus(::ompl::base::Planner::*)( double ))(&::ompl::base::Planner::solve), (bp::arg("solveTime")) );
        PRMstar_exposer.def("setProblemDefinition",&::ompl::base::Planner::setProblemDefinition,
                            &PRMstar_wrapper::default_setProblemDefinition, (bp::arg("pdef")) );
        PRMstar_exposer.def("checkValidity",&::ompl::base::Planner::checkValidity,
                        &PRMstar_wrapper::default_checkValidity );
    }

}
