// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/geometric.h"
#include "LazyRRT.pypp.hpp"

namespace bp = boost::python;

struct LazyRRT_wrapper : ompl::geometric::LazyRRT, bp::wrapper< ompl::geometric::LazyRRT > {

    LazyRRT_wrapper(::ompl::base::SpaceInformationPtr const & si )
    : ompl::geometric::LazyRRT( si )
      , bp::wrapper< ompl::geometric::LazyRRT >(){
        // constructor
    
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->ompl::geometric::LazyRRT::clear(  );
        }
    }
    
    void default_clear(  ) {
        ompl::geometric::LazyRRT::clear( );
    }

    void freeMemory(  ){
        ompl::geometric::LazyRRT::freeMemory(  );
    }

    virtual void getPlannerData( ::ompl::base::PlannerData & data ) const  {
        if( bp::override func_getPlannerData = this->get_override( "getPlannerData" ) )
            func_getPlannerData( boost::ref(data) );
        else{
            this->ompl::geometric::LazyRRT::getPlannerData( boost::ref(data) );
        }
    }
    
    void default_getPlannerData( ::ompl::base::PlannerData & data ) const  {
        ompl::geometric::LazyRRT::getPlannerData( boost::ref(data) );
    }

    virtual void setup(  ) {
        if( bp::override func_setup = this->get_override( "setup" ) )
            func_setup(  );
        else{
            this->ompl::geometric::LazyRRT::setup(  );
        }
    }
    
    void default_setup(  ) {
        ompl::geometric::LazyRRT::setup( );
    }

    virtual ::ompl::base::PlannerStatus solve( ::ompl::base::PlannerTerminationCondition const & ptc ) {
        if( bp::override func_solve = this->get_override( "solve" ) )
            return func_solve( boost::ref(ptc) );
        else{
            return this->ompl::geometric::LazyRRT::solve( boost::ref(ptc) );
        }
    }
    
    ::ompl::base::PlannerStatus default_solve( ::ompl::base::PlannerTerminationCondition const & ptc ) {
        return ompl::geometric::LazyRRT::solve( boost::ref(ptc) );
    }

    virtual void checkValidity(  ) {
        if( bp::override func_checkValidity = this->get_override( "checkValidity" ) )
            func_checkValidity(  );
        else{
            this->ompl::base::Planner::checkValidity(  );
        }
    }
    
    void default_checkValidity(  ) {
        ompl::base::Planner::checkValidity( );
    }

    virtual void setProblemDefinition( ::ompl::base::ProblemDefinitionPtr const & pdef ) {
        if( bp::override func_setProblemDefinition = this->get_override( "setProblemDefinition" ) )
            func_setProblemDefinition( pdef );
        else{
            this->ompl::base::Planner::setProblemDefinition( pdef );
        }
    }
    
    void default_setProblemDefinition( ::ompl::base::ProblemDefinitionPtr const & pdef ) {
        ompl::base::Planner::setProblemDefinition( pdef );
    }

};

void register_LazyRRT_class(){

    { //::ompl::geometric::LazyRRT
        typedef bp::class_< LazyRRT_wrapper, bp::bases< ::ompl::base::Planner >, boost::noncopyable > LazyRRT_exposer_t;
        LazyRRT_exposer_t LazyRRT_exposer = LazyRRT_exposer_t( "LazyRRT", bp::init< ompl::base::SpaceInformationPtr const & >(( bp::arg("si") )) );
        bp::scope LazyRRT_scope( LazyRRT_exposer );
        bp::implicitly_convertible< ompl::base::SpaceInformationPtr const &, ompl::geometric::LazyRRT >();
        { //::ompl::geometric::LazyRRT::clear
        
            typedef void ( ::ompl::geometric::LazyRRT::*clear_function_type)(  ) ;
            typedef void ( LazyRRT_wrapper::*default_clear_function_type)(  ) ;
            
            LazyRRT_exposer.def( 
                "clear"
                , clear_function_type(&::ompl::geometric::LazyRRT::clear)
                , default_clear_function_type(&LazyRRT_wrapper::default_clear) );
        
        }
        { //::ompl::geometric::LazyRRT::freeMemory
        
            typedef void ( LazyRRT_wrapper::*freeMemory_function_type)(  ) ;
            
            LazyRRT_exposer.def( 
                "freeMemory"
                , freeMemory_function_type( &LazyRRT_wrapper::freeMemory ) );
        
        }
        { //::ompl::geometric::LazyRRT::getGoalBias
        
            typedef double ( ::ompl::geometric::LazyRRT::*getGoalBias_function_type)(  ) const;
            
            LazyRRT_exposer.def( 
                "getGoalBias"
                , getGoalBias_function_type( &::ompl::geometric::LazyRRT::getGoalBias ) );
        
        }
        { //::ompl::geometric::LazyRRT::getPlannerData
        
            typedef void ( ::ompl::geometric::LazyRRT::*getPlannerData_function_type)( ::ompl::base::PlannerData & ) const;
            typedef void ( LazyRRT_wrapper::*default_getPlannerData_function_type)( ::ompl::base::PlannerData & ) const;
            
            LazyRRT_exposer.def( 
                "getPlannerData"
                , getPlannerData_function_type(&::ompl::geometric::LazyRRT::getPlannerData)
                , default_getPlannerData_function_type(&LazyRRT_wrapper::default_getPlannerData)
                , ( bp::arg("data") ) );
        
        }
        { //::ompl::geometric::LazyRRT::getRange
        
            typedef double ( ::ompl::geometric::LazyRRT::*getRange_function_type)(  ) const;
            
            LazyRRT_exposer.def( 
                "getRange"
                , getRange_function_type( &::ompl::geometric::LazyRRT::getRange ) );
        
        }
        { //::ompl::geometric::LazyRRT::setGoalBias
        
            typedef void ( ::ompl::geometric::LazyRRT::*setGoalBias_function_type)( double ) ;
            
            LazyRRT_exposer.def( 
                "setGoalBias"
                , setGoalBias_function_type( &::ompl::geometric::LazyRRT::setGoalBias )
                , ( bp::arg("goalBias") ) );
        
        }
        { //::ompl::geometric::LazyRRT::setRange
        
            typedef void ( ::ompl::geometric::LazyRRT::*setRange_function_type)( double ) ;
            
            LazyRRT_exposer.def( 
                "setRange"
                , setRange_function_type( &::ompl::geometric::LazyRRT::setRange )
                , ( bp::arg("distance") ) );
        
        }
        { //::ompl::geometric::LazyRRT::setup
        
            typedef void ( ::ompl::geometric::LazyRRT::*setup_function_type)(  ) ;
            typedef void ( LazyRRT_wrapper::*default_setup_function_type)(  ) ;
            
            LazyRRT_exposer.def( 
                "setup"
                , setup_function_type(&::ompl::geometric::LazyRRT::setup)
                , default_setup_function_type(&LazyRRT_wrapper::default_setup) );
        
        }
        { //::ompl::geometric::LazyRRT::solve
        
            typedef ::ompl::base::PlannerStatus ( ::ompl::geometric::LazyRRT::*solve_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            typedef ::ompl::base::PlannerStatus ( LazyRRT_wrapper::*default_solve_function_type)( ::ompl::base::PlannerTerminationCondition const & ) ;
            
            LazyRRT_exposer.def( 
                "solve"
                , solve_function_type(&::ompl::geometric::LazyRRT::solve)
                , default_solve_function_type(&LazyRRT_wrapper::default_solve)
                , ( bp::arg("ptc") ) );
        
        }
        LazyRRT_exposer.def("solve", (::ompl::base::PlannerStatus(::ompl::base::Planner::*)( double ))(&::ompl::base::Planner::solve), (bp::arg("solveTime")) );
        LazyRRT_exposer.def("setProblemDefinition",&::ompl::base::Planner::setProblemDefinition,
                            &LazyRRT_wrapper::default_setProblemDefinition, (bp::arg("pdef")) );
        LazyRRT_exposer.def("checkValidity",&::ompl::base::Planner::checkValidity,
                        &LazyRRT_wrapper::default_checkValidity );
    }

}
