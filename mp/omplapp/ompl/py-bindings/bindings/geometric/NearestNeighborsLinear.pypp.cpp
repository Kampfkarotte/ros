// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/geometric.h"
#include "NearestNeighborsLinear.pypp.hpp"

namespace bp = boost::python;

struct NearestNeighborsLinear_less__unsigned_long__greater__wrapper : ompl::NearestNeighborsLinear< unsigned long >, bp::wrapper< ompl::NearestNeighborsLinear< unsigned long > > {

    NearestNeighborsLinear_less__unsigned_long__greater__wrapper(ompl::NearestNeighborsLinear<unsigned long> const & arg )
    : ompl::NearestNeighborsLinear<unsigned long>( arg )
      , bp::wrapper< ompl::NearestNeighborsLinear< unsigned long > >(){
        // copy constructor
        
    }

    NearestNeighborsLinear_less__unsigned_long__greater__wrapper( )
    : ompl::NearestNeighborsLinear<unsigned long>( )
      , bp::wrapper< ompl::NearestNeighborsLinear< unsigned long > >(){
        // null constructor
    
    }

    virtual void add( long unsigned int const & data ) {
        if( bp::override func_add = this->get_override( "add" ) )
            func_add( data );
        else{
            this->ompl::NearestNeighborsLinear< unsigned long >::add( data );
        }
    }
    
    void default_add( long unsigned int const & data ) {
        ompl::NearestNeighborsLinear< unsigned long >::add( data );
    }

    virtual void add( ::std::vector< unsigned long > const & data ) {
        if( bp::override func_add = this->get_override( "add" ) )
            func_add( boost::ref(data) );
        else{
            this->ompl::NearestNeighborsLinear< unsigned long >::add( boost::ref(data) );
        }
    }
    
    void default_add( ::std::vector< unsigned long > const & data ) {
        ompl::NearestNeighborsLinear< unsigned long >::add( boost::ref(data) );
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->ompl::NearestNeighborsLinear< unsigned long >::clear(  );
        }
    }
    
    void default_clear(  ) {
        ompl::NearestNeighborsLinear< unsigned long >::clear( );
    }

    virtual void list( ::std::vector< unsigned long > & data ) const  {
        if( bp::override func_list = this->get_override( "list" ) )
            func_list( boost::ref(data) );
        else{
            this->ompl::NearestNeighborsLinear< unsigned long >::list( boost::ref(data) );
        }
    }
    
    void default_list( ::std::vector< unsigned long > & data ) const  {
        ompl::NearestNeighborsLinear< unsigned long >::list( boost::ref(data) );
    }

    virtual long unsigned int nearest( long unsigned int const & data ) const  {
        if( bp::override func_nearest = this->get_override( "nearest" ) )
            return func_nearest( data );
        else{
            return this->ompl::NearestNeighborsLinear< unsigned long >::nearest( data );
        }
    }
    
    long unsigned int default_nearest( long unsigned int const & data ) const  {
        return ompl::NearestNeighborsLinear< unsigned long >::nearest( data );
    }

    virtual void nearestK( long unsigned int const & data, ::std::size_t k, ::std::vector< unsigned long > & nbh ) const  {
        if( bp::override func_nearestK = this->get_override( "nearestK" ) )
            func_nearestK( data, k, boost::ref(nbh) );
        else{
            this->ompl::NearestNeighborsLinear< unsigned long >::nearestK( data, k, boost::ref(nbh) );
        }
    }
    
    void default_nearestK( long unsigned int const & data, ::std::size_t k, ::std::vector< unsigned long > & nbh ) const  {
        ompl::NearestNeighborsLinear< unsigned long >::nearestK( data, k, boost::ref(nbh) );
    }

    virtual void nearestR( long unsigned int const & data, double radius, ::std::vector< unsigned long > & nbh ) const  {
        if( bp::override func_nearestR = this->get_override( "nearestR" ) )
            func_nearestR( data, radius, boost::ref(nbh) );
        else{
            this->ompl::NearestNeighborsLinear< unsigned long >::nearestR( data, radius, boost::ref(nbh) );
        }
    }
    
    void default_nearestR( long unsigned int const & data, double radius, ::std::vector< unsigned long > & nbh ) const  {
        ompl::NearestNeighborsLinear< unsigned long >::nearestR( data, radius, boost::ref(nbh) );
    }

    virtual bool remove( long unsigned int const & data ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            return func_remove( data );
        else{
            return this->ompl::NearestNeighborsLinear< unsigned long >::remove( data );
        }
    }
    
    bool default_remove( long unsigned int const & data ) {
        return ompl::NearestNeighborsLinear< unsigned long >::remove( data );
    }

    virtual ::std::size_t size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            return this->ompl::NearestNeighborsLinear< unsigned long >::size(  );
        }
    }
    
    ::std::size_t default_size(  ) const  {
        return ompl::NearestNeighborsLinear< unsigned long >::size( );
    }

    virtual void setDistanceFunction( ::boost::function< double (unsigned long const&, unsigned long const&) > const & distFun ) {
        if( bp::override func_setDistanceFunction = this->get_override( "setDistanceFunction" ) )
            func_setDistanceFunction( boost::ref(distFun) );
        else{
            this->ompl::NearestNeighbors< unsigned long >::setDistanceFunction( boost::ref(distFun) );
        }
    }
    
    void default_setDistanceFunction( ::boost::function< double (unsigned long const&, unsigned long const&) > const & distFun ) {
        ompl::NearestNeighbors< unsigned long >::setDistanceFunction( boost::ref(distFun) );
    }

};

void register_NearestNeighborsLinear_class(){

    { //::ompl::NearestNeighborsLinear< unsigned long >
        typedef bp::class_< NearestNeighborsLinear_less__unsigned_long__greater__wrapper, bp::bases< ompl::NearestNeighbors< unsigned long > > > NearestNeighborsLinear_exposer_t;
        NearestNeighborsLinear_exposer_t NearestNeighborsLinear_exposer = NearestNeighborsLinear_exposer_t( "NearestNeighborsLinear", bp::init< >() );
        bp::scope NearestNeighborsLinear_scope( NearestNeighborsLinear_exposer );
        { //::ompl::NearestNeighborsLinear< unsigned long >::add
        
            typedef ompl::NearestNeighborsLinear< unsigned long > exported_class_t;
            typedef void ( exported_class_t::*add_function_type)( long unsigned int const & ) ;
            typedef void ( NearestNeighborsLinear_less__unsigned_long__greater__wrapper::*default_add_function_type)( long unsigned int const & ) ;
            
            NearestNeighborsLinear_exposer.def( 
                "add"
                , add_function_type(&::ompl::NearestNeighborsLinear< unsigned long >::add)
                , default_add_function_type(&NearestNeighborsLinear_less__unsigned_long__greater__wrapper::default_add)
                , ( bp::arg("data") ) );
        
        }
        { //::ompl::NearestNeighborsLinear< unsigned long >::add
        
            typedef ompl::NearestNeighborsLinear< unsigned long > exported_class_t;
            typedef void ( exported_class_t::*add_function_type)( ::std::vector< unsigned long > const & ) ;
            typedef void ( NearestNeighborsLinear_less__unsigned_long__greater__wrapper::*default_add_function_type)( ::std::vector< unsigned long > const & ) ;
            
            NearestNeighborsLinear_exposer.def( 
                "add"
                , add_function_type(&::ompl::NearestNeighborsLinear< unsigned long >::add)
                , default_add_function_type(&NearestNeighborsLinear_less__unsigned_long__greater__wrapper::default_add)
                , ( bp::arg("data") ) );
        
        }
        { //::ompl::NearestNeighborsLinear< unsigned long >::clear
        
            typedef ompl::NearestNeighborsLinear< unsigned long > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type)(  ) ;
            typedef void ( NearestNeighborsLinear_less__unsigned_long__greater__wrapper::*default_clear_function_type)(  ) ;
            
            NearestNeighborsLinear_exposer.def( 
                "clear"
                , clear_function_type(&::ompl::NearestNeighborsLinear< unsigned long >::clear)
                , default_clear_function_type(&NearestNeighborsLinear_less__unsigned_long__greater__wrapper::default_clear) );
        
        }
        { //::ompl::NearestNeighborsLinear< unsigned long >::list
        
            typedef ompl::NearestNeighborsLinear< unsigned long > exported_class_t;
            typedef void ( exported_class_t::*list_function_type)( ::std::vector< unsigned long > & ) const;
            typedef void ( NearestNeighborsLinear_less__unsigned_long__greater__wrapper::*default_list_function_type)( ::std::vector< unsigned long > & ) const;
            
            NearestNeighborsLinear_exposer.def( 
                "list"
                , list_function_type(&::ompl::NearestNeighborsLinear< unsigned long >::list)
                , default_list_function_type(&NearestNeighborsLinear_less__unsigned_long__greater__wrapper::default_list)
                , ( bp::arg("data") ) );
        
        }
        { //::ompl::NearestNeighborsLinear< unsigned long >::nearest
        
            typedef ompl::NearestNeighborsLinear< unsigned long > exported_class_t;
            typedef long unsigned int ( exported_class_t::*nearest_function_type)( long unsigned int const & ) const;
            typedef long unsigned int ( NearestNeighborsLinear_less__unsigned_long__greater__wrapper::*default_nearest_function_type)( long unsigned int const & ) const;
            
            NearestNeighborsLinear_exposer.def( 
                "nearest"
                , nearest_function_type(&::ompl::NearestNeighborsLinear< unsigned long >::nearest)
                , default_nearest_function_type(&NearestNeighborsLinear_less__unsigned_long__greater__wrapper::default_nearest)
                , ( bp::arg("data") ) );
        
        }
        { //::ompl::NearestNeighborsLinear< unsigned long >::nearestK
        
            typedef ompl::NearestNeighborsLinear< unsigned long > exported_class_t;
            typedef void ( exported_class_t::*nearestK_function_type)( long unsigned int const &,::std::size_t,::std::vector< unsigned long > & ) const;
            typedef void ( NearestNeighborsLinear_less__unsigned_long__greater__wrapper::*default_nearestK_function_type)( long unsigned int const &,::std::size_t,::std::vector< unsigned long > & ) const;
            
            NearestNeighborsLinear_exposer.def( 
                "nearestK"
                , nearestK_function_type(&::ompl::NearestNeighborsLinear< unsigned long >::nearestK)
                , default_nearestK_function_type(&NearestNeighborsLinear_less__unsigned_long__greater__wrapper::default_nearestK)
                , ( bp::arg("data"), bp::arg("k"), bp::arg("nbh") ) );
        
        }
        { //::ompl::NearestNeighborsLinear< unsigned long >::nearestR
        
            typedef ompl::NearestNeighborsLinear< unsigned long > exported_class_t;
            typedef void ( exported_class_t::*nearestR_function_type)( long unsigned int const &,double,::std::vector< unsigned long > & ) const;
            typedef void ( NearestNeighborsLinear_less__unsigned_long__greater__wrapper::*default_nearestR_function_type)( long unsigned int const &,double,::std::vector< unsigned long > & ) const;
            
            NearestNeighborsLinear_exposer.def( 
                "nearestR"
                , nearestR_function_type(&::ompl::NearestNeighborsLinear< unsigned long >::nearestR)
                , default_nearestR_function_type(&NearestNeighborsLinear_less__unsigned_long__greater__wrapper::default_nearestR)
                , ( bp::arg("data"), bp::arg("radius"), bp::arg("nbh") ) );
        
        }
        { //::ompl::NearestNeighborsLinear< unsigned long >::remove
        
            typedef ompl::NearestNeighborsLinear< unsigned long > exported_class_t;
            typedef bool ( exported_class_t::*remove_function_type)( long unsigned int const & ) ;
            typedef bool ( NearestNeighborsLinear_less__unsigned_long__greater__wrapper::*default_remove_function_type)( long unsigned int const & ) ;
            
            NearestNeighborsLinear_exposer.def( 
                "remove"
                , remove_function_type(&::ompl::NearestNeighborsLinear< unsigned long >::remove)
                , default_remove_function_type(&NearestNeighborsLinear_less__unsigned_long__greater__wrapper::default_remove)
                , ( bp::arg("data") ) );
        
        }
        { //::ompl::NearestNeighborsLinear< unsigned long >::size
        
            typedef ompl::NearestNeighborsLinear< unsigned long > exported_class_t;
            typedef ::std::size_t ( exported_class_t::*size_function_type)(  ) const;
            typedef ::std::size_t ( NearestNeighborsLinear_less__unsigned_long__greater__wrapper::*default_size_function_type)(  ) const;
            
            NearestNeighborsLinear_exposer.def( 
                "size"
                , size_function_type(&::ompl::NearestNeighborsLinear< unsigned long >::size)
                , default_size_function_type(&NearestNeighborsLinear_less__unsigned_long__greater__wrapper::default_size) );
        
        }
        { //::ompl::NearestNeighbors< unsigned long >::setDistanceFunction
        
            typedef ompl::NearestNeighborsLinear< unsigned long > exported_class_t;
            typedef void ( exported_class_t::*setDistanceFunction_function_type)( ::boost::function< double (unsigned long const&, unsigned long const&) > const & ) ;
            typedef void ( NearestNeighborsLinear_less__unsigned_long__greater__wrapper::*default_setDistanceFunction_function_type)( ::boost::function< double (unsigned long const&, unsigned long const&) > const & ) ;
            
            NearestNeighborsLinear_exposer.def( 
                "setDistanceFunction"
                , setDistanceFunction_function_type(&::ompl::NearestNeighbors< unsigned long >::setDistanceFunction)
                , default_setDistanceFunction_function_type(&NearestNeighborsLinear_less__unsigned_long__greater__wrapper::default_setDistanceFunction)
                , ( bp::arg("distFun") ) );
        
        }
    }

}
