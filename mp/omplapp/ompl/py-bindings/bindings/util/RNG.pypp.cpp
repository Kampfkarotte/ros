// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/util.h"
#include "RNG.pypp.hpp"

namespace bp = boost::python;

void register_RNG_class(){

    { //::ompl::RNG
        typedef bp::class_< ompl::RNG > RNG_exposer_t;
        RNG_exposer_t RNG_exposer = RNG_exposer_t( "RNG", bp::init< >() );
        bp::scope RNG_scope( RNG_exposer );
        { //::ompl::RNG::eulerRPY
        
            typedef void ( ::ompl::RNG::*eulerRPY_function_type)( double * ) ;
            
            RNG_exposer.def( 
                "eulerRPY"
                , eulerRPY_function_type( &::ompl::RNG::eulerRPY )
                , ( bp::arg("value") ) );
        
        }
        { //::ompl::RNG::gaussian
        
            typedef double ( ::ompl::RNG::*gaussian_function_type)( double,double ) ;
            
            RNG_exposer.def( 
                "gaussian"
                , gaussian_function_type( &::ompl::RNG::gaussian )
                , ( bp::arg("mean"), bp::arg("stddev") ) );
        
        }
        { //::ompl::RNG::gaussian01
        
            typedef double ( ::ompl::RNG::*gaussian01_function_type)(  ) ;
            
            RNG_exposer.def( 
                "gaussian01"
                , gaussian01_function_type( &::ompl::RNG::gaussian01 ) );
        
        }
        { //::ompl::RNG::getSeed
        
            typedef ::uint32_t ( *getSeed_function_type )(  );
            
            RNG_exposer.def( 
                "getSeed"
                , getSeed_function_type( &::ompl::RNG::getSeed ) );
        
        }
        { //::ompl::RNG::halfNormalInt
        
            typedef int ( ::ompl::RNG::*halfNormalInt_function_type)( int,int,double ) ;
            
            RNG_exposer.def( 
                "halfNormalInt"
                , halfNormalInt_function_type( &::ompl::RNG::halfNormalInt )
                , ( bp::arg("r_min"), bp::arg("r_max"), bp::arg("focus")=3.0e+0 ) );
        
        }
        { //::ompl::RNG::halfNormalReal
        
            typedef double ( ::ompl::RNG::*halfNormalReal_function_type)( double,double,double ) ;
            
            RNG_exposer.def( 
                "halfNormalReal"
                , halfNormalReal_function_type( &::ompl::RNG::halfNormalReal )
                , ( bp::arg("r_min"), bp::arg("r_max"), bp::arg("focus")=3.0e+0 ) );
        
        }
        { //::ompl::RNG::quaternion
        
            typedef void ( ::ompl::RNG::*quaternion_function_type)( double * ) ;
            
            RNG_exposer.def( 
                "quaternion"
                , quaternion_function_type( &::ompl::RNG::quaternion )
                , ( bp::arg("value") ) );
        
        }
        { //::ompl::RNG::setSeed
        
            typedef void ( *setSeed_function_type )( ::uint32_t );
            
            RNG_exposer.def( 
                "setSeed"
                , setSeed_function_type( &::ompl::RNG::setSeed )
                , ( bp::arg("seed") ) );
        
        }
        { //::ompl::RNG::uniform01
        
            typedef double ( ::ompl::RNG::*uniform01_function_type)(  ) ;
            
            RNG_exposer.def( 
                "uniform01"
                , uniform01_function_type( &::ompl::RNG::uniform01 ) );
        
        }
        { //::ompl::RNG::uniformBool
        
            typedef bool ( ::ompl::RNG::*uniformBool_function_type)(  ) ;
            
            RNG_exposer.def( 
                "uniformBool"
                , uniformBool_function_type( &::ompl::RNG::uniformBool ) );
        
        }
        { //::ompl::RNG::uniformInt
        
            typedef int ( ::ompl::RNG::*uniformInt_function_type)( int,int ) ;
            
            RNG_exposer.def( 
                "uniformInt"
                , uniformInt_function_type( &::ompl::RNG::uniformInt )
                , ( bp::arg("lower_bound"), bp::arg("upper_bound") ) );
        
        }
        { //::ompl::RNG::uniformReal
        
            typedef double ( ::ompl::RNG::*uniformReal_function_type)( double,double ) ;
            
            RNG_exposer.def( 
                "uniformReal"
                , uniformReal_function_type( &::ompl::RNG::uniformReal )
                , ( bp::arg("lower_bound"), bp::arg("upper_bound") ) );
        
        }
        RNG_exposer.staticmethod( "getSeed" );
        RNG_exposer.staticmethod( "setSeed" );
    }

}
