// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/util.h"
#include "OutputHandlerFile.pypp.hpp"

namespace bp = boost::python;

struct OutputHandlerFile_wrapper : ompl::msg::OutputHandlerFile, bp::wrapper< ompl::msg::OutputHandlerFile > {

    OutputHandlerFile_wrapper(ompl::msg::OutputHandlerFile const & arg )
    : ompl::msg::OutputHandlerFile( arg )
      , bp::wrapper< ompl::msg::OutputHandlerFile >(){
        // copy constructor
        
    }

    OutputHandlerFile_wrapper(char const * filename )
    : ompl::msg::OutputHandlerFile( filename )
      , bp::wrapper< ompl::msg::OutputHandlerFile >(){
        // constructor
    
    }

    virtual void log( ::std::string const & text, ::ompl::msg::LogLevel level, char const * filename, int line ) {
        if( bp::override func_log = this->get_override( "log" ) )
            func_log( text, level, filename, line );
        else{
            this->ompl::msg::OutputHandlerFile::log( text, level, filename, line );
        }
    }
    
    void default_log( ::std::string const & text, ::ompl::msg::LogLevel level, char const * filename, int line ) {
        ompl::msg::OutputHandlerFile::log( text, level, filename, line );
    }

};

void register_OutputHandlerFile_class(){

    { //::ompl::msg::OutputHandlerFile
        typedef bp::class_< OutputHandlerFile_wrapper, bp::bases< ompl::msg::OutputHandler > > OutputHandlerFile_exposer_t;
        OutputHandlerFile_exposer_t OutputHandlerFile_exposer = OutputHandlerFile_exposer_t( "OutputHandlerFile", bp::init< char const * >(( bp::arg("filename") )) );
        bp::scope OutputHandlerFile_scope( OutputHandlerFile_exposer );
        bp::implicitly_convertible< char const *, ompl::msg::OutputHandlerFile >();
        { //::ompl::msg::OutputHandlerFile::log
        
            typedef void ( ::ompl::msg::OutputHandlerFile::*log_function_type)( ::std::string const &,::ompl::msg::LogLevel,char const *,int ) ;
            typedef void ( OutputHandlerFile_wrapper::*default_log_function_type)( ::std::string const &,::ompl::msg::LogLevel,char const *,int ) ;
            
            OutputHandlerFile_exposer.def( 
                "log"
                , log_function_type(&::ompl::msg::OutputHandlerFile::log)
                , default_log_function_type(&OutputHandlerFile_wrapper::default_log)
                , ( bp::arg("text"), bp::arg("level"), bp::arg("filename"), bp::arg("line") ) );
        
        }
    }

}
