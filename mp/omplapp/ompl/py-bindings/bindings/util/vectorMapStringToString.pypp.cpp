// This file has been generated by Py++.

#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "bindings/util.h"
#include "vectorMapStringToString.pypp.hpp"

namespace bp = boost::python;

void register_vectorMapStringToString_class(){

    { //::std::vector< std::map< std::string, std::string > >
        typedef bp::class_< std::vector< std::map< std::string, std::string > > > vectorMapStringToString_exposer_t;
        vectorMapStringToString_exposer_t vectorMapStringToString_exposer = vectorMapStringToString_exposer_t( "vectorMapStringToString" );
        bp::scope vectorMapStringToString_scope( vectorMapStringToString_exposer );
        //WARNING: the next line of code will not compile, because "::std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >" does not have operator== !
        vectorMapStringToString_exposer.def( bp::vector_indexing_suite< ::std::vector< std::map< std::string, std::string > > >() );
    }

}
