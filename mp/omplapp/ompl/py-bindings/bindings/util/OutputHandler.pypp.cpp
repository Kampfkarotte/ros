// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/util.h"
#include "OutputHandler.pypp.hpp"

namespace bp = boost::python;

struct OutputHandler_wrapper : ompl::msg::OutputHandler, bp::wrapper< ompl::msg::OutputHandler > {

    OutputHandler_wrapper( )
    : ompl::msg::OutputHandler( )
      , bp::wrapper< ompl::msg::OutputHandler >(){
        // null constructor
    
    }

    virtual void log( ::std::string const & text, ::ompl::msg::LogLevel level, char const * filename, int line ){
        bp::override func_log = this->get_override( "log" );
        func_log( text, level, filename, line );
    }

};

void register_OutputHandler_class(){

    { //::ompl::msg::OutputHandler
        typedef bp::class_< OutputHandler_wrapper, boost::noncopyable > OutputHandler_exposer_t;
        OutputHandler_exposer_t OutputHandler_exposer = OutputHandler_exposer_t( "OutputHandler", bp::init< >() );
        bp::scope OutputHandler_scope( OutputHandler_exposer );
        { //::ompl::msg::OutputHandler::log
        
            typedef void ( ::ompl::msg::OutputHandler::*log_function_type)( ::std::string const &,::ompl::msg::LogLevel,char const *,int ) ;
            
            OutputHandler_exposer.def( 
                "log"
                , bp::pure_virtual( log_function_type(&::ompl::msg::OutputHandler::log) )
                , ( bp::arg("text"), bp::arg("level"), bp::arg("filename"), bp::arg("line") ) );
        
        }
    }

}
