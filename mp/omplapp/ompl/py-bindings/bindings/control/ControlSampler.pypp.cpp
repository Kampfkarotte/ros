// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/control.h"
#include "ControlSampler.pypp.hpp"

namespace bp = boost::python;

struct ControlSampler_wrapper : ompl::control::ControlSampler, bp::wrapper< ompl::control::ControlSampler > {

    ControlSampler_wrapper(::ompl::control::ControlSpace const * space )
    : ompl::control::ControlSampler( boost::python::ptr(space) )
      , bp::wrapper< ompl::control::ControlSampler >(){
        // constructor
    
    }

    virtual void sample( ::ompl::control::Control * control ){
        bp::override func_sample = this->get_override( "sample" );
        func_sample( boost::python::ptr(control) );
    }

    virtual void sample( ::ompl::control::Control * control, ::ompl::base::State const * state ) {
        if( bp::override func_sample = this->get_override( "sample" ) )
            func_sample( boost::python::ptr(control), boost::python::ptr(state) );
        else{
            this->ompl::control::ControlSampler::sample( boost::python::ptr(control), boost::python::ptr(state) );
        }
    }
    
    void default_sample( ::ompl::control::Control * control, ::ompl::base::State const * state ) {
        ompl::control::ControlSampler::sample( boost::python::ptr(control), boost::python::ptr(state) );
    }

    virtual void sampleNext( ::ompl::control::Control * control, ::ompl::control::Control const * previous ) {
        if( bp::override func_sampleNext = this->get_override( "sampleNext" ) )
            func_sampleNext( boost::python::ptr(control), boost::python::ptr(previous) );
        else{
            this->ompl::control::ControlSampler::sampleNext( boost::python::ptr(control), boost::python::ptr(previous) );
        }
    }
    
    void default_sampleNext( ::ompl::control::Control * control, ::ompl::control::Control const * previous ) {
        ompl::control::ControlSampler::sampleNext( boost::python::ptr(control), boost::python::ptr(previous) );
    }

    virtual void sampleNext( ::ompl::control::Control * control, ::ompl::control::Control const * previous, ::ompl::base::State const * state ) {
        if( bp::override func_sampleNext = this->get_override( "sampleNext" ) )
            func_sampleNext( boost::python::ptr(control), boost::python::ptr(previous), boost::python::ptr(state) );
        else{
            this->ompl::control::ControlSampler::sampleNext( boost::python::ptr(control), boost::python::ptr(previous), boost::python::ptr(state) );
        }
    }
    
    void default_sampleNext( ::ompl::control::Control * control, ::ompl::control::Control const * previous, ::ompl::base::State const * state ) {
        ompl::control::ControlSampler::sampleNext( boost::python::ptr(control), boost::python::ptr(previous), boost::python::ptr(state) );
    }

    virtual unsigned int sampleStepCount( unsigned int minSteps, unsigned int maxSteps ) {
        if( bp::override func_sampleStepCount = this->get_override( "sampleStepCount" ) )
            return func_sampleStepCount( minSteps, maxSteps );
        else{
            return this->ompl::control::ControlSampler::sampleStepCount( minSteps, maxSteps );
        }
    }
    
    unsigned int default_sampleStepCount( unsigned int minSteps, unsigned int maxSteps ) {
        return ompl::control::ControlSampler::sampleStepCount( minSteps, maxSteps );
    }

};

void register_ControlSampler_class(){

    { //::ompl::control::ControlSampler
        typedef bp::class_< ControlSampler_wrapper, boost::noncopyable > ControlSampler_exposer_t;
        ControlSampler_exposer_t ControlSampler_exposer = ControlSampler_exposer_t( "ControlSampler", bp::init< ompl::control::ControlSpace const * >(( bp::arg("space") )) );
        bp::scope ControlSampler_scope( ControlSampler_exposer );
        { //::ompl::control::ControlSampler::sample
        
            typedef void ( ::ompl::control::ControlSampler::*sample_function_type)( ::ompl::control::Control * ) ;
            
            ControlSampler_exposer.def( 
                "sample"
                , bp::pure_virtual( sample_function_type(&::ompl::control::ControlSampler::sample) )
                , ( bp::arg("control") ) );
        
        }
        { //::ompl::control::ControlSampler::sample
        
            typedef void ( ::ompl::control::ControlSampler::*sample_function_type)( ::ompl::control::Control *,::ompl::base::State const * ) ;
            typedef void ( ControlSampler_wrapper::*default_sample_function_type)( ::ompl::control::Control *,::ompl::base::State const * ) ;
            
            ControlSampler_exposer.def( 
                "sample"
                , sample_function_type(&::ompl::control::ControlSampler::sample)
                , default_sample_function_type(&ControlSampler_wrapper::default_sample)
                , ( bp::arg("control"), bp::arg("state") ) );
        
        }
        { //::ompl::control::ControlSampler::sampleNext
        
            typedef void ( ::ompl::control::ControlSampler::*sampleNext_function_type)( ::ompl::control::Control *,::ompl::control::Control const * ) ;
            typedef void ( ControlSampler_wrapper::*default_sampleNext_function_type)( ::ompl::control::Control *,::ompl::control::Control const * ) ;
            
            ControlSampler_exposer.def( 
                "sampleNext"
                , sampleNext_function_type(&::ompl::control::ControlSampler::sampleNext)
                , default_sampleNext_function_type(&ControlSampler_wrapper::default_sampleNext)
                , ( bp::arg("control"), bp::arg("previous") ) );
        
        }
        { //::ompl::control::ControlSampler::sampleNext
        
            typedef void ( ::ompl::control::ControlSampler::*sampleNext_function_type)( ::ompl::control::Control *,::ompl::control::Control const *,::ompl::base::State const * ) ;
            typedef void ( ControlSampler_wrapper::*default_sampleNext_function_type)( ::ompl::control::Control *,::ompl::control::Control const *,::ompl::base::State const * ) ;
            
            ControlSampler_exposer.def( 
                "sampleNext"
                , sampleNext_function_type(&::ompl::control::ControlSampler::sampleNext)
                , default_sampleNext_function_type(&ControlSampler_wrapper::default_sampleNext)
                , ( bp::arg("control"), bp::arg("previous"), bp::arg("state") ) );
        
        }
        { //::ompl::control::ControlSampler::sampleStepCount
        
            typedef unsigned int ( ::ompl::control::ControlSampler::*sampleStepCount_function_type)( unsigned int,unsigned int ) ;
            typedef unsigned int ( ControlSampler_wrapper::*default_sampleStepCount_function_type)( unsigned int,unsigned int ) ;
            
            ControlSampler_exposer.def( 
                "sampleStepCount"
                , sampleStepCount_function_type(&::ompl::control::ControlSampler::sampleStepCount)
                , default_sampleStepCount_function_type(&ControlSampler_wrapper::default_sampleStepCount)
                , ( bp::arg("minSteps"), bp::arg("maxSteps") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< ompl::control::ControlSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::control::RealVectorControlUniformSampler >, boost::shared_ptr< ompl::control::ControlSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::control::CompoundControlSampler >, boost::shared_ptr< ompl::control::ControlSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::control::DiscreteControlSampler >, boost::shared_ptr< ompl::control::ControlSampler > >();
    }

}
