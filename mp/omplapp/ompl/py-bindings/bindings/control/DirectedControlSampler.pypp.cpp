// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/control.h"
#include "DirectedControlSampler.pypp.hpp"

namespace bp = boost::python;

struct DirectedControlSampler_wrapper : ompl::control::DirectedControlSampler, bp::wrapper< ompl::control::DirectedControlSampler > {

    DirectedControlSampler_wrapper(::ompl::control::SpaceInformation const * si )
    : ompl::control::DirectedControlSampler( boost::python::ptr(si) )
      , bp::wrapper< ompl::control::DirectedControlSampler >(){
        // constructor
    
    }

    virtual unsigned int sampleTo( ::ompl::control::Control * control, ::ompl::base::State const * source, ::ompl::base::State * dest ){
        bp::override func_sampleTo = this->get_override( "sampleTo" );
        return func_sampleTo( boost::python::ptr(control), boost::python::ptr(source), boost::python::ptr(dest) );
    }

    virtual unsigned int sampleTo( ::ompl::control::Control * control, ::ompl::control::Control const * previous, ::ompl::base::State const * source, ::ompl::base::State * dest ){
        bp::override func_sampleTo = this->get_override( "sampleTo" );
        return func_sampleTo( boost::python::ptr(control), boost::python::ptr(previous), boost::python::ptr(source), boost::python::ptr(dest) );
    }

};

void register_DirectedControlSampler_class(){

    { //::ompl::control::DirectedControlSampler
        typedef bp::class_< DirectedControlSampler_wrapper, boost::noncopyable > DirectedControlSampler_exposer_t;
        DirectedControlSampler_exposer_t DirectedControlSampler_exposer = DirectedControlSampler_exposer_t( "DirectedControlSampler", bp::init< ompl::control::SpaceInformation const * >(( bp::arg("si") )) );
        bp::scope DirectedControlSampler_scope( DirectedControlSampler_exposer );
        { //::ompl::control::DirectedControlSampler::sampleTo
        
            typedef unsigned int ( ::ompl::control::DirectedControlSampler::*sampleTo_function_type)( ::ompl::control::Control *,::ompl::base::State const *,::ompl::base::State * ) ;
            
            DirectedControlSampler_exposer.def( 
                "sampleTo"
                , bp::pure_virtual( sampleTo_function_type(&::ompl::control::DirectedControlSampler::sampleTo) )
                , ( bp::arg("control"), bp::arg("source"), bp::arg("dest") ) );
        
        }
        { //::ompl::control::DirectedControlSampler::sampleTo
        
            typedef unsigned int ( ::ompl::control::DirectedControlSampler::*sampleTo_function_type)( ::ompl::control::Control *,::ompl::control::Control const *,::ompl::base::State const *,::ompl::base::State * ) ;
            
            DirectedControlSampler_exposer.def( 
                "sampleTo"
                , bp::pure_virtual( sampleTo_function_type(&::ompl::control::DirectedControlSampler::sampleTo) )
                , ( bp::arg("control"), bp::arg("previous"), bp::arg("source"), bp::arg("dest") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< ompl::control::DirectedControlSampler > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::control::SimpleDirectedControlSampler >, boost::shared_ptr< ompl::control::DirectedControlSampler > >();
    }

}
