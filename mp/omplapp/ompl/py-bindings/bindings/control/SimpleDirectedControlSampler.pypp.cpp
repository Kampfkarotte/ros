// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/control.h"
#include "SimpleDirectedControlSampler.pypp.hpp"

namespace bp = boost::python;

struct SimpleDirectedControlSampler_wrapper : ompl::control::SimpleDirectedControlSampler, bp::wrapper< ompl::control::SimpleDirectedControlSampler > {

    SimpleDirectedControlSampler_wrapper(::ompl::control::SpaceInformation const * si, unsigned int k=1 )
    : ompl::control::SimpleDirectedControlSampler( boost::python::ptr(si), k )
      , bp::wrapper< ompl::control::SimpleDirectedControlSampler >(){
        // constructor
    
    }

    virtual unsigned int getBestControl( ::ompl::control::Control * control, ::ompl::base::State const * source, ::ompl::base::State * dest, ::ompl::control::Control const * previous ){
        if( bp::override func_getBestControl = this->get_override( "getBestControl" ) )
            return func_getBestControl( boost::python::ptr(control), boost::python::ptr(source), boost::python::ptr(dest), boost::python::ptr(previous) );
        else{
            return this->ompl::control::SimpleDirectedControlSampler::getBestControl( boost::python::ptr(control), boost::python::ptr(source), boost::python::ptr(dest), boost::python::ptr(previous) );
        }
    }
    
    virtual unsigned int default_getBestControl( ::ompl::control::Control * control, ::ompl::base::State const * source, ::ompl::base::State * dest, ::ompl::control::Control const * previous ){
        return ompl::control::SimpleDirectedControlSampler::getBestControl( boost::python::ptr(control), boost::python::ptr(source), boost::python::ptr(dest), boost::python::ptr(previous) );
    }

    virtual unsigned int sampleTo( ::ompl::control::Control * control, ::ompl::base::State const * source, ::ompl::base::State * dest ) {
        if( bp::override func_sampleTo = this->get_override( "sampleTo" ) )
            return func_sampleTo( boost::python::ptr(control), boost::python::ptr(source), boost::python::ptr(dest) );
        else{
            return this->ompl::control::SimpleDirectedControlSampler::sampleTo( boost::python::ptr(control), boost::python::ptr(source), boost::python::ptr(dest) );
        }
    }
    
    unsigned int default_sampleTo( ::ompl::control::Control * control, ::ompl::base::State const * source, ::ompl::base::State * dest ) {
        return ompl::control::SimpleDirectedControlSampler::sampleTo( boost::python::ptr(control), boost::python::ptr(source), boost::python::ptr(dest) );
    }

    virtual unsigned int sampleTo( ::ompl::control::Control * control, ::ompl::control::Control const * previous, ::ompl::base::State const * source, ::ompl::base::State * dest ) {
        if( bp::override func_sampleTo = this->get_override( "sampleTo" ) )
            return func_sampleTo( boost::python::ptr(control), boost::python::ptr(previous), boost::python::ptr(source), boost::python::ptr(dest) );
        else{
            return this->ompl::control::SimpleDirectedControlSampler::sampleTo( boost::python::ptr(control), boost::python::ptr(previous), boost::python::ptr(source), boost::python::ptr(dest) );
        }
    }
    
    unsigned int default_sampleTo( ::ompl::control::Control * control, ::ompl::control::Control const * previous, ::ompl::base::State const * source, ::ompl::base::State * dest ) {
        return ompl::control::SimpleDirectedControlSampler::sampleTo( boost::python::ptr(control), boost::python::ptr(previous), boost::python::ptr(source), boost::python::ptr(dest) );
    }

};

void register_SimpleDirectedControlSampler_class(){

    { //::ompl::control::SimpleDirectedControlSampler
        typedef bp::class_< SimpleDirectedControlSampler_wrapper, bp::bases< ompl::control::DirectedControlSampler >, boost::noncopyable > SimpleDirectedControlSampler_exposer_t;
        SimpleDirectedControlSampler_exposer_t SimpleDirectedControlSampler_exposer = SimpleDirectedControlSampler_exposer_t( "SimpleDirectedControlSampler", bp::init< ompl::control::SpaceInformation const *, bp::optional< unsigned int > >(( bp::arg("si"), bp::arg("k")=(unsigned int)(1) )) );
        bp::scope SimpleDirectedControlSampler_scope( SimpleDirectedControlSampler_exposer );
        bp::implicitly_convertible< ompl::control::SpaceInformation const *, ompl::control::SimpleDirectedControlSampler >();
        { //::ompl::control::SimpleDirectedControlSampler::getBestControl
        
            typedef unsigned int ( SimpleDirectedControlSampler_wrapper::*getBestControl_function_type)( ::ompl::control::Control *,::ompl::base::State const *,::ompl::base::State *,::ompl::control::Control const * ) ;
            
            SimpleDirectedControlSampler_exposer.def( 
                "getBestControl"
                , getBestControl_function_type( &SimpleDirectedControlSampler_wrapper::default_getBestControl )
                , ( bp::arg("control"), bp::arg("source"), bp::arg("dest"), bp::arg("previous") ) );
        
        }
        { //::ompl::control::SimpleDirectedControlSampler::getNumControlSamples
        
            typedef unsigned int ( ::ompl::control::SimpleDirectedControlSampler::*getNumControlSamples_function_type)(  ) const;
            
            SimpleDirectedControlSampler_exposer.def( 
                "getNumControlSamples"
                , getNumControlSamples_function_type( &::ompl::control::SimpleDirectedControlSampler::getNumControlSamples ) );
        
        }
        { //::ompl::control::SimpleDirectedControlSampler::sampleTo
        
            typedef unsigned int ( ::ompl::control::SimpleDirectedControlSampler::*sampleTo_function_type)( ::ompl::control::Control *,::ompl::base::State const *,::ompl::base::State * ) ;
            typedef unsigned int ( SimpleDirectedControlSampler_wrapper::*default_sampleTo_function_type)( ::ompl::control::Control *,::ompl::base::State const *,::ompl::base::State * ) ;
            
            SimpleDirectedControlSampler_exposer.def( 
                "sampleTo"
                , sampleTo_function_type(&::ompl::control::SimpleDirectedControlSampler::sampleTo)
                , default_sampleTo_function_type(&SimpleDirectedControlSampler_wrapper::default_sampleTo)
                , ( bp::arg("control"), bp::arg("source"), bp::arg("dest") ) );
        
        }
        { //::ompl::control::SimpleDirectedControlSampler::sampleTo
        
            typedef unsigned int ( ::ompl::control::SimpleDirectedControlSampler::*sampleTo_function_type)( ::ompl::control::Control *,::ompl::control::Control const *,::ompl::base::State const *,::ompl::base::State * ) ;
            typedef unsigned int ( SimpleDirectedControlSampler_wrapper::*default_sampleTo_function_type)( ::ompl::control::Control *,::ompl::control::Control const *,::ompl::base::State const *,::ompl::base::State * ) ;
            
            SimpleDirectedControlSampler_exposer.def( 
                "sampleTo"
                , sampleTo_function_type(&::ompl::control::SimpleDirectedControlSampler::sampleTo)
                , default_sampleTo_function_type(&SimpleDirectedControlSampler_wrapper::default_sampleTo)
                , ( bp::arg("control"), bp::arg("previous"), bp::arg("source"), bp::arg("dest") ) );
        
        }
        { //::ompl::control::SimpleDirectedControlSampler::setNumControlSamples
        
            typedef void ( ::ompl::control::SimpleDirectedControlSampler::*setNumControlSamples_function_type)( unsigned int ) ;
            
            SimpleDirectedControlSampler_exposer.def( 
                "setNumControlSamples"
                , setNumControlSamples_function_type( &::ompl::control::SimpleDirectedControlSampler::setNumControlSamples )
                , ( bp::arg("numSamples") ) );
        
        }
    }

}
