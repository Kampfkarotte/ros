// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/control.h"
#include "CompoundControlSpace.pypp.hpp"

namespace bp = boost::python;

struct CompoundControlSpace_wrapper : ompl::control::CompoundControlSpace, bp::wrapper< ompl::control::CompoundControlSpace > {

    CompoundControlSpace_wrapper(::ompl::base::StateSpacePtr const & stateSpace )
    : ompl::control::CompoundControlSpace( stateSpace )
      , bp::wrapper< ompl::control::CompoundControlSpace >(){
        // constructor
    
    }

    virtual void addSubspace( ::ompl::control::ControlSpacePtr const & component ) {
        if( bp::override func_addSubspace = this->get_override( "addSubspace" ) )
            func_addSubspace( component );
        else{
            this->ompl::control::CompoundControlSpace::addSubspace( component );
        }
    }
    
    void default_addSubspace( ::ompl::control::ControlSpacePtr const & component ) {
        ompl::control::CompoundControlSpace::addSubspace( component );
    }

    virtual ::ompl::control::Control * allocControl(  ) const  {
        if( bp::override func_allocControl = this->get_override( "allocControl" ) )
            return func_allocControl(  );
        else{
            return this->ompl::control::CompoundControlSpace::allocControl(  );
        }
    }
    
    ::ompl::control::Control * default_allocControl(  ) const  {
        return ompl::control::CompoundControlSpace::allocControl( );
    }

    virtual ::ompl::control::ControlSamplerPtr allocDefaultControlSampler(  ) const  {
        if( bp::override func_allocDefaultControlSampler = this->get_override( "allocDefaultControlSampler" ) )
            return func_allocDefaultControlSampler(  );
        else{
            return this->ompl::control::CompoundControlSpace::allocDefaultControlSampler(  );
        }
    }
    
    ::ompl::control::ControlSamplerPtr default_allocDefaultControlSampler(  ) const  {
        return ompl::control::CompoundControlSpace::allocDefaultControlSampler( );
    }

    virtual void copyControl( ::ompl::control::Control * destination, ::ompl::control::Control const * source ) const  {
        if( bp::override func_copyControl = this->get_override( "copyControl" ) )
            func_copyControl( boost::python::ptr(destination), boost::python::ptr(source) );
        else{
            this->ompl::control::CompoundControlSpace::copyControl( boost::python::ptr(destination), boost::python::ptr(source) );
        }
    }
    
    void default_copyControl( ::ompl::control::Control * destination, ::ompl::control::Control const * source ) const  {
        ompl::control::CompoundControlSpace::copyControl( boost::python::ptr(destination), boost::python::ptr(source) );
    }

    virtual void deserialize( ::ompl::control::Control * ctrl, void const * serialization ) const  {
        if( bp::override func_deserialize = this->get_override( "deserialize" ) )
            func_deserialize( boost::python::ptr(ctrl), serialization );
        else{
            this->ompl::control::CompoundControlSpace::deserialize( boost::python::ptr(ctrl), serialization );
        }
    }
    
    void default_deserialize( ::ompl::control::Control * ctrl, void const * serialization ) const  {
        ompl::control::CompoundControlSpace::deserialize( boost::python::ptr(ctrl), serialization );
    }

    virtual bool equalControls( ::ompl::control::Control const * control1, ::ompl::control::Control const * control2 ) const  {
        if( bp::override func_equalControls = this->get_override( "equalControls" ) )
            return func_equalControls( boost::python::ptr(control1), boost::python::ptr(control2) );
        else{
            return this->ompl::control::CompoundControlSpace::equalControls( boost::python::ptr(control1), boost::python::ptr(control2) );
        }
    }
    
    bool default_equalControls( ::ompl::control::Control const * control1, ::ompl::control::Control const * control2 ) const  {
        return ompl::control::CompoundControlSpace::equalControls( boost::python::ptr(control1), boost::python::ptr(control2) );
    }

    virtual void freeControl( ::ompl::control::Control * control ) const  {
        if( bp::override func_freeControl = this->get_override( "freeControl" ) )
            func_freeControl( boost::python::ptr(control) );
        else{
            this->ompl::control::CompoundControlSpace::freeControl( boost::python::ptr(control) );
        }
    }
    
    void default_freeControl( ::ompl::control::Control * control ) const  {
        ompl::control::CompoundControlSpace::freeControl( boost::python::ptr(control) );
    }

    virtual unsigned int getDimension(  ) const  {
        if( bp::override func_getDimension = this->get_override( "getDimension" ) )
            return func_getDimension(  );
        else{
            return this->ompl::control::CompoundControlSpace::getDimension(  );
        }
    }
    
    unsigned int default_getDimension(  ) const  {
        return ompl::control::CompoundControlSpace::getDimension( );
    }

    virtual unsigned int getSerializationLength(  ) const  {
        if( bp::override func_getSerializationLength = this->get_override( "getSerializationLength" ) )
            return func_getSerializationLength(  );
        else{
            return this->ompl::control::CompoundControlSpace::getSerializationLength(  );
        }
    }
    
    unsigned int default_getSerializationLength(  ) const  {
        return ompl::control::CompoundControlSpace::getSerializationLength( );
    }

    virtual bool isCompound(  ) const  {
        if( bp::override func_isCompound = this->get_override( "isCompound" ) )
            return func_isCompound(  );
        else{
            return this->ompl::control::CompoundControlSpace::isCompound(  );
        }
    }
    
    bool default_isCompound(  ) const  {
        return ompl::control::CompoundControlSpace::isCompound( );
    }

    virtual void nullControl( ::ompl::control::Control * control ) const  {
        if( bp::override func_nullControl = this->get_override( "nullControl" ) )
            func_nullControl( boost::python::ptr(control) );
        else{
            this->ompl::control::CompoundControlSpace::nullControl( boost::python::ptr(control) );
        }
    }
    
    void default_nullControl( ::ompl::control::Control * control ) const  {
        ompl::control::CompoundControlSpace::nullControl( boost::python::ptr(control) );
    }

    virtual void serialize( void * serialization, ::ompl::control::Control const * ctrl ) const  {
        if( bp::override func_serialize = this->get_override( "serialize" ) )
            func_serialize( serialization, boost::python::ptr(ctrl) );
        else{
            this->ompl::control::CompoundControlSpace::serialize( serialization, boost::python::ptr(ctrl) );
        }
    }
    
    void default_serialize( void * serialization, ::ompl::control::Control const * ctrl ) const  {
        ompl::control::CompoundControlSpace::serialize( serialization, boost::python::ptr(ctrl) );
    }

    virtual void setup(  ) {
        if( bp::override func_setup = this->get_override( "setup" ) )
            func_setup(  );
        else{
            this->ompl::control::CompoundControlSpace::setup(  );
        }
    }
    
    void default_setup(  ) {
        ompl::control::CompoundControlSpace::setup( );
    }

    virtual ::ompl::control::ControlSamplerPtr allocControlSampler(  ) const  {
        if( bp::override func_allocControlSampler = this->get_override( "allocControlSampler" ) )
            return func_allocControlSampler(  );
        else{
            return this->ompl::control::ControlSpace::allocControlSampler(  );
        }
    }
    
    ::ompl::control::ControlSamplerPtr default_allocControlSampler(  ) const  {
        return ompl::control::ControlSpace::allocControlSampler( );
    }

};

std::string __printSettings(::ompl::control::CompoundControlSpace* obj)
{
    std::ostringstream s;
    obj->printSettings(s);
    return s.str();
}

std::string __printControl(::ompl::control::CompoundControlSpace* space, ompl::control::Control* control)
        {
            std::ostringstream s;
            space->printControl(control, s);
            return s.str();
        }

void register_CompoundControlSpace_class(){

    { //::ompl::control::CompoundControlSpace
        typedef bp::class_< CompoundControlSpace_wrapper, bp::bases< ompl::control::ControlSpace >, boost::noncopyable > CompoundControlSpace_exposer_t;
        CompoundControlSpace_exposer_t CompoundControlSpace_exposer = CompoundControlSpace_exposer_t( "CompoundControlSpace", bp::init< ompl::base::StateSpacePtr const & >(( bp::arg("stateSpace") )) );
        bp::scope CompoundControlSpace_scope( CompoundControlSpace_exposer );
        bp::implicitly_convertible< ompl::base::StateSpacePtr const &, ompl::control::CompoundControlSpace >();
        { //::ompl::control::CompoundControlSpace::addSubspace
        
            typedef void ( ::ompl::control::CompoundControlSpace::*addSubspace_function_type)( ::ompl::control::ControlSpacePtr const & ) ;
            typedef void ( CompoundControlSpace_wrapper::*default_addSubspace_function_type)( ::ompl::control::ControlSpacePtr const & ) ;
            
            CompoundControlSpace_exposer.def( 
                "addSubspace"
                , addSubspace_function_type(&::ompl::control::CompoundControlSpace::addSubspace)
                , default_addSubspace_function_type(&CompoundControlSpace_wrapper::default_addSubspace)
                , ( bp::arg("component") ) );
        
        }
        { //::ompl::control::CompoundControlSpace::allocControl
        
            typedef ::ompl::control::Control * ( ::ompl::control::CompoundControlSpace::*allocControl_function_type)(  ) const;
            typedef ::ompl::control::Control * ( CompoundControlSpace_wrapper::*default_allocControl_function_type)(  ) const;
            
            CompoundControlSpace_exposer.def( 
                "allocControl"
                , allocControl_function_type(&::ompl::control::CompoundControlSpace::allocControl)
                , default_allocControl_function_type(&CompoundControlSpace_wrapper::default_allocControl)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::control::CompoundControlSpace::allocDefaultControlSampler
        
            typedef ::ompl::control::ControlSamplerPtr ( ::ompl::control::CompoundControlSpace::*allocDefaultControlSampler_function_type)(  ) const;
            typedef ::ompl::control::ControlSamplerPtr ( CompoundControlSpace_wrapper::*default_allocDefaultControlSampler_function_type)(  ) const;
            
            CompoundControlSpace_exposer.def( 
                "allocDefaultControlSampler"
                , allocDefaultControlSampler_function_type(&::ompl::control::CompoundControlSpace::allocDefaultControlSampler)
                , default_allocDefaultControlSampler_function_type(&CompoundControlSpace_wrapper::default_allocDefaultControlSampler) );
        
        }
        { //::ompl::control::CompoundControlSpace::copyControl
        
            typedef void ( ::ompl::control::CompoundControlSpace::*copyControl_function_type)( ::ompl::control::Control *,::ompl::control::Control const * ) const;
            typedef void ( CompoundControlSpace_wrapper::*default_copyControl_function_type)( ::ompl::control::Control *,::ompl::control::Control const * ) const;
            
            CompoundControlSpace_exposer.def( 
                "copyControl"
                , copyControl_function_type(&::ompl::control::CompoundControlSpace::copyControl)
                , default_copyControl_function_type(&CompoundControlSpace_wrapper::default_copyControl)
                , ( bp::arg("destination"), bp::arg("source") ) );
        
        }
        { //::ompl::control::CompoundControlSpace::deserialize
        
            typedef void ( ::ompl::control::CompoundControlSpace::*deserialize_function_type)( ::ompl::control::Control *,void const * ) const;
            typedef void ( CompoundControlSpace_wrapper::*default_deserialize_function_type)( ::ompl::control::Control *,void const * ) const;
            
            CompoundControlSpace_exposer.def( 
                "deserialize"
                , deserialize_function_type(&::ompl::control::CompoundControlSpace::deserialize)
                , default_deserialize_function_type(&CompoundControlSpace_wrapper::default_deserialize)
                , ( bp::arg("ctrl"), bp::arg("serialization") ) );
        
        }
        { //::ompl::control::CompoundControlSpace::equalControls
        
            typedef bool ( ::ompl::control::CompoundControlSpace::*equalControls_function_type)( ::ompl::control::Control const *,::ompl::control::Control const * ) const;
            typedef bool ( CompoundControlSpace_wrapper::*default_equalControls_function_type)( ::ompl::control::Control const *,::ompl::control::Control const * ) const;
            
            CompoundControlSpace_exposer.def( 
                "equalControls"
                , equalControls_function_type(&::ompl::control::CompoundControlSpace::equalControls)
                , default_equalControls_function_type(&CompoundControlSpace_wrapper::default_equalControls)
                , ( bp::arg("control1"), bp::arg("control2") ) );
        
        }
        { //::ompl::control::CompoundControlSpace::freeControl
        
            typedef void ( ::ompl::control::CompoundControlSpace::*freeControl_function_type)( ::ompl::control::Control * ) const;
            typedef void ( CompoundControlSpace_wrapper::*default_freeControl_function_type)( ::ompl::control::Control * ) const;
            
            CompoundControlSpace_exposer.def( 
                "freeControl"
                , freeControl_function_type(&::ompl::control::CompoundControlSpace::freeControl)
                , default_freeControl_function_type(&CompoundControlSpace_wrapper::default_freeControl)
                , ( bp::arg("control") ) );
        
        }
        { //::ompl::control::CompoundControlSpace::getDimension
        
            typedef unsigned int ( ::ompl::control::CompoundControlSpace::*getDimension_function_type)(  ) const;
            typedef unsigned int ( CompoundControlSpace_wrapper::*default_getDimension_function_type)(  ) const;
            
            CompoundControlSpace_exposer.def( 
                "getDimension"
                , getDimension_function_type(&::ompl::control::CompoundControlSpace::getDimension)
                , default_getDimension_function_type(&CompoundControlSpace_wrapper::default_getDimension) );
        
        }
        { //::ompl::control::CompoundControlSpace::getSerializationLength
        
            typedef unsigned int ( ::ompl::control::CompoundControlSpace::*getSerializationLength_function_type)(  ) const;
            typedef unsigned int ( CompoundControlSpace_wrapper::*default_getSerializationLength_function_type)(  ) const;
            
            CompoundControlSpace_exposer.def( 
                "getSerializationLength"
                , getSerializationLength_function_type(&::ompl::control::CompoundControlSpace::getSerializationLength)
                , default_getSerializationLength_function_type(&CompoundControlSpace_wrapper::default_getSerializationLength) );
        
        }
        { //::ompl::control::CompoundControlSpace::getSubspace
        
            typedef ::ompl::control::ControlSpacePtr const & ( ::ompl::control::CompoundControlSpace::*getSubspace_function_type)( unsigned int const ) const;
            
            CompoundControlSpace_exposer.def( 
                "getSubspace"
                , getSubspace_function_type( &::ompl::control::CompoundControlSpace::getSubspace )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::control::CompoundControlSpace::getSubspace
        
            typedef ::ompl::control::ControlSpacePtr const & ( ::ompl::control::CompoundControlSpace::*getSubspace_function_type)( ::std::string const & ) const;
            
            CompoundControlSpace_exposer.def( 
                "getSubspace"
                , getSubspace_function_type( &::ompl::control::CompoundControlSpace::getSubspace )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::control::CompoundControlSpace::getSubspaceCount
        
            typedef unsigned int ( ::ompl::control::CompoundControlSpace::*getSubspaceCount_function_type)(  ) const;
            
            CompoundControlSpace_exposer.def( 
                "getSubspaceCount"
                , getSubspaceCount_function_type( &::ompl::control::CompoundControlSpace::getSubspaceCount ) );
        
        }
        { //::ompl::control::CompoundControlSpace::isCompound
        
            typedef bool ( ::ompl::control::CompoundControlSpace::*isCompound_function_type)(  ) const;
            typedef bool ( CompoundControlSpace_wrapper::*default_isCompound_function_type)(  ) const;
            
            CompoundControlSpace_exposer.def( 
                "isCompound"
                , isCompound_function_type(&::ompl::control::CompoundControlSpace::isCompound)
                , default_isCompound_function_type(&CompoundControlSpace_wrapper::default_isCompound) );
        
        }
        { //::ompl::control::CompoundControlSpace::lock
        
            typedef void ( ::ompl::control::CompoundControlSpace::*lock_function_type)(  ) ;
            
            CompoundControlSpace_exposer.def( 
                "lock"
                , lock_function_type( &::ompl::control::CompoundControlSpace::lock ) );
        
        }
        { //::ompl::control::CompoundControlSpace::nullControl
        
            typedef void ( ::ompl::control::CompoundControlSpace::*nullControl_function_type)( ::ompl::control::Control * ) const;
            typedef void ( CompoundControlSpace_wrapper::*default_nullControl_function_type)( ::ompl::control::Control * ) const;
            
            CompoundControlSpace_exposer.def( 
                "nullControl"
                , nullControl_function_type(&::ompl::control::CompoundControlSpace::nullControl)
                , default_nullControl_function_type(&CompoundControlSpace_wrapper::default_nullControl)
                , ( bp::arg("control") ) );
        
        }
        { //::ompl::control::CompoundControlSpace::serialize
        
            typedef void ( ::ompl::control::CompoundControlSpace::*serialize_function_type)( void *,::ompl::control::Control const * ) const;
            typedef void ( CompoundControlSpace_wrapper::*default_serialize_function_type)( void *,::ompl::control::Control const * ) const;
            
            CompoundControlSpace_exposer.def( 
                "serialize"
                , serialize_function_type(&::ompl::control::CompoundControlSpace::serialize)
                , default_serialize_function_type(&CompoundControlSpace_wrapper::default_serialize)
                , ( bp::arg("serialization"), bp::arg("ctrl") ) );
        
        }
        { //::ompl::control::CompoundControlSpace::setup
        
            typedef void ( ::ompl::control::CompoundControlSpace::*setup_function_type)(  ) ;
            typedef void ( CompoundControlSpace_wrapper::*default_setup_function_type)(  ) ;
            
            CompoundControlSpace_exposer.def( 
                "setup"
                , setup_function_type(&::ompl::control::CompoundControlSpace::setup)
                , default_setup_function_type(&CompoundControlSpace_wrapper::default_setup) );
        
        }
        { //::ompl::control::ControlSpace::allocControlSampler
        
            typedef ::ompl::control::ControlSamplerPtr ( ::ompl::control::ControlSpace::*allocControlSampler_function_type)(  ) const;
            typedef ::ompl::control::ControlSamplerPtr ( CompoundControlSpace_wrapper::*default_allocControlSampler_function_type)(  ) const;
            
            CompoundControlSpace_exposer.def( 
                "allocControlSampler"
                , allocControlSampler_function_type(&::ompl::control::ControlSpace::allocControlSampler)
                , default_allocControlSampler_function_type(&CompoundControlSpace_wrapper::default_allocControlSampler) );
        
        }
        CompoundControlSpace_exposer.def("settings", &__printSettings);
        CompoundControlSpace_exposer.def("string", &__printControl);
    }

}
