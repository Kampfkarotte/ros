// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/control.h"
#include "Decomposition.pypp.hpp"

namespace bp = boost::python;

struct Decomposition_wrapper : ompl::control::Decomposition, bp::wrapper< ompl::control::Decomposition > {

    Decomposition_wrapper(int dim, ::ompl::base::RealVectorBounds const & b )
    : ompl::control::Decomposition( dim, boost::ref(b) )
      , bp::wrapper< ompl::control::Decomposition >(){
        // constructor
    
    }

    virtual int getDimension(  ) const  {
        if( bp::override func_getDimension = this->get_override( "getDimension" ) )
            return func_getDimension(  );
        else{
            return this->ompl::control::Decomposition::getDimension(  );
        }
    }
    
    int default_getDimension(  ) const  {
        return ompl::control::Decomposition::getDimension( );
    }

    virtual void getNeighbors( int rid, ::std::vector< int > & neighbors ) const {
        bp::override func_getNeighbors = this->get_override( "getNeighbors" );
        func_getNeighbors( rid, boost::ref(neighbors) );
    }

    virtual int getNumRegions(  ) const {
        bp::override func_getNumRegions = this->get_override( "getNumRegions" );
        return func_getNumRegions(  );
    }

    virtual double getRegionVolume( int rid ){
        bp::override func_getRegionVolume = this->get_override( "getRegionVolume" );
        return func_getRegionVolume( rid );
    }

    virtual int locateRegion( ::ompl::base::State const * s ) const {
        bp::override func_locateRegion = this->get_override( "locateRegion" );
        return func_locateRegion( boost::python::ptr(s) );
    }

    virtual void project( ::ompl::base::State const * s, ::std::vector< double > & coord ) const {
        bp::override func_project = this->get_override( "project" );
        func_project( boost::python::ptr(s), boost::ref(coord) );
    }

    virtual void sampleFromRegion( int rid, ::ompl::RNG & rng, ::std::vector< double > & coord ) const {
        bp::override func_sampleFromRegion = this->get_override( "sampleFromRegion" );
        func_sampleFromRegion( rid, boost::ref(rng), boost::ref(coord) );
    }

    virtual void sampleFullState( ::ompl::base::StateSamplerPtr const & sampler, ::std::vector< double > const & coord, ::ompl::base::State * s ) const {
        bp::override func_sampleFullState = this->get_override( "sampleFullState" );
        func_sampleFullState( sampler, boost::ref(coord), boost::python::ptr(s) );
    }

};

void register_Decomposition_class(){

    { //::ompl::control::Decomposition
        typedef bp::class_< Decomposition_wrapper, boost::noncopyable > Decomposition_exposer_t;
        Decomposition_exposer_t Decomposition_exposer = Decomposition_exposer_t( "Decomposition", bp::init< int, ompl::base::RealVectorBounds const & >(( bp::arg("dim"), bp::arg("b") )) );
        bp::scope Decomposition_scope( Decomposition_exposer );
        { //::ompl::control::Decomposition::getBounds
        
            typedef ::ompl::base::RealVectorBounds const & ( ::ompl::control::Decomposition::*getBounds_function_type)(  ) const;
            
            Decomposition_exposer.def( 
                "getBounds"
                , getBounds_function_type(&::ompl::control::Decomposition::getBounds)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::control::Decomposition::getDimension
        
            typedef int ( ::ompl::control::Decomposition::*getDimension_function_type)(  ) const;
            typedef int ( Decomposition_wrapper::*default_getDimension_function_type)(  ) const;
            
            Decomposition_exposer.def( 
                "getDimension"
                , getDimension_function_type(&::ompl::control::Decomposition::getDimension)
                , default_getDimension_function_type(&Decomposition_wrapper::default_getDimension) );
        
        }
        { //::ompl::control::Decomposition::getNeighbors
        
            typedef void ( ::ompl::control::Decomposition::*getNeighbors_function_type)( int,::std::vector<int, std::allocator<int> > & ) const;
            
            Decomposition_exposer.def( 
                "getNeighbors"
                , bp::pure_virtual( getNeighbors_function_type(&::ompl::control::Decomposition::getNeighbors) )
                , ( bp::arg("rid"), bp::arg("neighbors") ) );
        
        }
        { //::ompl::control::Decomposition::getNumRegions
        
            typedef int ( ::ompl::control::Decomposition::*getNumRegions_function_type)(  ) const;
            
            Decomposition_exposer.def( 
                "getNumRegions"
                , bp::pure_virtual( getNumRegions_function_type(&::ompl::control::Decomposition::getNumRegions) ) );
        
        }
        { //::ompl::control::Decomposition::getRegionVolume
        
            typedef double ( ::ompl::control::Decomposition::*getRegionVolume_function_type)( int ) ;
            
            Decomposition_exposer.def( 
                "getRegionVolume"
                , bp::pure_virtual( getRegionVolume_function_type(&::ompl::control::Decomposition::getRegionVolume) )
                , ( bp::arg("rid") ) );
        
        }
        { //::ompl::control::Decomposition::locateRegion
        
            typedef int ( ::ompl::control::Decomposition::*locateRegion_function_type)( ::ompl::base::State const * ) const;
            
            Decomposition_exposer.def( 
                "locateRegion"
                , bp::pure_virtual( locateRegion_function_type(&::ompl::control::Decomposition::locateRegion) )
                , ( bp::arg("s") ) );
        
        }
        { //::ompl::control::Decomposition::project
        
            typedef void ( ::ompl::control::Decomposition::*project_function_type)( ::ompl::base::State const *,::std::vector<double, std::allocator<double> > & ) const;
            
            Decomposition_exposer.def( 
                "project"
                , bp::pure_virtual( project_function_type(&::ompl::control::Decomposition::project) )
                , ( bp::arg("s"), bp::arg("coord") ) );
        
        }
        { //::ompl::control::Decomposition::sampleFromRegion
        
            typedef void ( ::ompl::control::Decomposition::*sampleFromRegion_function_type)( int,::ompl::RNG &,::std::vector<double, std::allocator<double> > & ) const;
            
            Decomposition_exposer.def( 
                "sampleFromRegion"
                , bp::pure_virtual( sampleFromRegion_function_type(&::ompl::control::Decomposition::sampleFromRegion) )
                , ( bp::arg("rid"), bp::arg("rng"), bp::arg("coord") ) );
        
        }
        { //::ompl::control::Decomposition::sampleFullState
        
            typedef void ( ::ompl::control::Decomposition::*sampleFullState_function_type)( ::ompl::base::StateSamplerPtr const &,::std::vector<double, std::allocator<double> > const &,::ompl::base::State * ) const;
            
            Decomposition_exposer.def( 
                "sampleFullState"
                , bp::pure_virtual( sampleFullState_function_type(&::ompl::control::Decomposition::sampleFullState) )
                , ( bp::arg("sampler"), bp::arg("coord"), bp::arg("s") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< ompl::control::Decomposition > >();
    }

}
