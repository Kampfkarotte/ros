// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/control.h"
#include "ControlSpace.pypp.hpp"

namespace bp = boost::python;

struct ControlSpace_wrapper : ompl::control::ControlSpace, bp::wrapper< ompl::control::ControlSpace > {

    ControlSpace_wrapper(::ompl::base::StateSpacePtr const & stateSpace )
    : ompl::control::ControlSpace( stateSpace )
      , bp::wrapper< ompl::control::ControlSpace >(){
        // constructor
    
    }

    virtual ::ompl::control::Control * allocControl(  ) const {
        bp::override func_allocControl = this->get_override( "allocControl" );
        return func_allocControl(  );
    }

    virtual ::ompl::control::ControlSamplerPtr allocControlSampler(  ) const  {
        if( bp::override func_allocControlSampler = this->get_override( "allocControlSampler" ) )
            return func_allocControlSampler(  );
        else{
            return this->ompl::control::ControlSpace::allocControlSampler(  );
        }
    }
    
    ::ompl::control::ControlSamplerPtr default_allocControlSampler(  ) const  {
        return ompl::control::ControlSpace::allocControlSampler( );
    }

    virtual ::ompl::control::ControlSamplerPtr allocDefaultControlSampler(  ) const {
        bp::override func_allocDefaultControlSampler = this->get_override( "allocDefaultControlSampler" );
        return func_allocDefaultControlSampler(  );
    }

    virtual void copyControl( ::ompl::control::Control * destination, ::ompl::control::Control const * source ) const {
        bp::override func_copyControl = this->get_override( "copyControl" );
        func_copyControl( boost::python::ptr(destination), boost::python::ptr(source) );
    }

    virtual void deserialize( ::ompl::control::Control * ctrl, void const * serialization ) const  {
        if( bp::override func_deserialize = this->get_override( "deserialize" ) )
            func_deserialize( boost::python::ptr(ctrl), serialization );
        else{
            this->ompl::control::ControlSpace::deserialize( boost::python::ptr(ctrl), serialization );
        }
    }
    
    void default_deserialize( ::ompl::control::Control * ctrl, void const * serialization ) const  {
        ompl::control::ControlSpace::deserialize( boost::python::ptr(ctrl), serialization );
    }

    virtual bool equalControls( ::ompl::control::Control const * control1, ::ompl::control::Control const * control2 ) const {
        bp::override func_equalControls = this->get_override( "equalControls" );
        return func_equalControls( boost::python::ptr(control1), boost::python::ptr(control2) );
    }

    virtual void freeControl( ::ompl::control::Control * control ) const {
        bp::override func_freeControl = this->get_override( "freeControl" );
        func_freeControl( boost::python::ptr(control) );
    }

    virtual unsigned int getDimension(  ) const {
        bp::override func_getDimension = this->get_override( "getDimension" );
        return func_getDimension(  );
    }

    virtual unsigned int getSerializationLength(  ) const  {
        if( bp::override func_getSerializationLength = this->get_override( "getSerializationLength" ) )
            return func_getSerializationLength(  );
        else{
            return this->ompl::control::ControlSpace::getSerializationLength(  );
        }
    }
    
    unsigned int default_getSerializationLength(  ) const  {
        return ompl::control::ControlSpace::getSerializationLength( );
    }

    virtual bool isCompound(  ) const  {
        if( bp::override func_isCompound = this->get_override( "isCompound" ) )
            return func_isCompound(  );
        else{
            return this->ompl::control::ControlSpace::isCompound(  );
        }
    }
    
    bool default_isCompound(  ) const  {
        return ompl::control::ControlSpace::isCompound( );
    }

    virtual void nullControl( ::ompl::control::Control * control ) const {
        bp::override func_nullControl = this->get_override( "nullControl" );
        func_nullControl( boost::python::ptr(control) );
    }

    virtual void serialize( void * serialization, ::ompl::control::Control const * ctrl ) const  {
        if( bp::override func_serialize = this->get_override( "serialize" ) )
            func_serialize( serialization, boost::python::ptr(ctrl) );
        else{
            this->ompl::control::ControlSpace::serialize( serialization, boost::python::ptr(ctrl) );
        }
    }
    
    void default_serialize( void * serialization, ::ompl::control::Control const * ctrl ) const  {
        ompl::control::ControlSpace::serialize( serialization, boost::python::ptr(ctrl) );
    }

    virtual void setup(  ) {
        if( bp::override func_setup = this->get_override( "setup" ) )
            func_setup(  );
        else{
            this->ompl::control::ControlSpace::setup(  );
        }
    }
    
    void default_setup(  ) {
        ompl::control::ControlSpace::setup( );
    }

};

std::string __printSettings(::ompl::control::ControlSpace* obj)
{
    std::ostringstream s;
    obj->printSettings(s);
    return s.str();
}

std::string __printControl(::ompl::control::ControlSpace* space, ompl::control::Control* control)
        {
            std::ostringstream s;
            space->printControl(control, s);
            return s.str();
        }

void register_ControlSpace_class(){

    { //::ompl::control::ControlSpace
        typedef bp::class_< ControlSpace_wrapper, boost::noncopyable > ControlSpace_exposer_t;
        ControlSpace_exposer_t ControlSpace_exposer = ControlSpace_exposer_t( "ControlSpace", bp::init< ompl::base::StateSpacePtr const & >(( bp::arg("stateSpace") )) );
        bp::scope ControlSpace_scope( ControlSpace_exposer );
        { //::ompl::control::ControlSpace::allocControl
        
            typedef ::ompl::control::Control * ( ::ompl::control::ControlSpace::*allocControl_function_type)(  ) const;
            
            ControlSpace_exposer.def( 
                "allocControl"
                , bp::pure_virtual( allocControl_function_type(&::ompl::control::ControlSpace::allocControl) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::control::ControlSpace::allocControlSampler
        
            typedef ::ompl::control::ControlSamplerPtr ( ::ompl::control::ControlSpace::*allocControlSampler_function_type)(  ) const;
            typedef ::ompl::control::ControlSamplerPtr ( ControlSpace_wrapper::*default_allocControlSampler_function_type)(  ) const;
            
            ControlSpace_exposer.def( 
                "allocControlSampler"
                , allocControlSampler_function_type(&::ompl::control::ControlSpace::allocControlSampler)
                , default_allocControlSampler_function_type(&ControlSpace_wrapper::default_allocControlSampler) );
        
        }
        { //::ompl::control::ControlSpace::allocDefaultControlSampler
        
            typedef ::ompl::control::ControlSamplerPtr ( ::ompl::control::ControlSpace::*allocDefaultControlSampler_function_type)(  ) const;
            
            ControlSpace_exposer.def( 
                "allocDefaultControlSampler"
                , bp::pure_virtual( allocDefaultControlSampler_function_type(&::ompl::control::ControlSpace::allocDefaultControlSampler) ) );
        
        }
        { //::ompl::control::ControlSpace::clearControlSamplerAllocator
        
            typedef void ( ::ompl::control::ControlSpace::*clearControlSamplerAllocator_function_type)(  ) ;
            
            ControlSpace_exposer.def( 
                "clearControlSamplerAllocator"
                , clearControlSamplerAllocator_function_type( &::ompl::control::ControlSpace::clearControlSamplerAllocator ) );
        
        }
        { //::ompl::control::ControlSpace::computeSignature
        
            typedef void ( ::ompl::control::ControlSpace::*computeSignature_function_type)( ::std::vector< int > & ) const;
            
            ControlSpace_exposer.def( 
                "computeSignature"
                , computeSignature_function_type( &::ompl::control::ControlSpace::computeSignature )
                , ( bp::arg("signature") ) );
        
        }
        { //::ompl::control::ControlSpace::copyControl
        
            typedef void ( ::ompl::control::ControlSpace::*copyControl_function_type)( ::ompl::control::Control *,::ompl::control::Control const * ) const;
            
            ControlSpace_exposer.def( 
                "copyControl"
                , bp::pure_virtual( copyControl_function_type(&::ompl::control::ControlSpace::copyControl) )
                , ( bp::arg("destination"), bp::arg("source") ) );
        
        }
        { //::ompl::control::ControlSpace::deserialize
        
            typedef void ( ::ompl::control::ControlSpace::*deserialize_function_type)( ::ompl::control::Control *,void const * ) const;
            typedef void ( ControlSpace_wrapper::*default_deserialize_function_type)( ::ompl::control::Control *,void const * ) const;
            
            ControlSpace_exposer.def( 
                "deserialize"
                , deserialize_function_type(&::ompl::control::ControlSpace::deserialize)
                , default_deserialize_function_type(&ControlSpace_wrapper::default_deserialize)
                , ( bp::arg("ctrl"), bp::arg("serialization") ) );
        
        }
        { //::ompl::control::ControlSpace::equalControls
        
            typedef bool ( ::ompl::control::ControlSpace::*equalControls_function_type)( ::ompl::control::Control const *,::ompl::control::Control const * ) const;
            
            ControlSpace_exposer.def( 
                "equalControls"
                , bp::pure_virtual( equalControls_function_type(&::ompl::control::ControlSpace::equalControls) )
                , ( bp::arg("control1"), bp::arg("control2") ) );
        
        }
        { //::ompl::control::ControlSpace::freeControl
        
            typedef void ( ::ompl::control::ControlSpace::*freeControl_function_type)( ::ompl::control::Control * ) const;
            
            ControlSpace_exposer.def( 
                "freeControl"
                , bp::pure_virtual( freeControl_function_type(&::ompl::control::ControlSpace::freeControl) )
                , ( bp::arg("control") ) );
        
        }
        { //::ompl::control::ControlSpace::getDimension
        
            typedef unsigned int ( ::ompl::control::ControlSpace::*getDimension_function_type)(  ) const;
            
            ControlSpace_exposer.def( 
                "getDimension"
                , bp::pure_virtual( getDimension_function_type(&::ompl::control::ControlSpace::getDimension) ) );
        
        }
        { //::ompl::control::ControlSpace::getName
        
            typedef ::std::string const & ( ::ompl::control::ControlSpace::*getName_function_type)(  ) const;
            
            ControlSpace_exposer.def( 
                "getName"
                , getName_function_type( &::ompl::control::ControlSpace::getName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::control::ControlSpace::getSerializationLength
        
            typedef unsigned int ( ::ompl::control::ControlSpace::*getSerializationLength_function_type)(  ) const;
            typedef unsigned int ( ControlSpace_wrapper::*default_getSerializationLength_function_type)(  ) const;
            
            ControlSpace_exposer.def( 
                "getSerializationLength"
                , getSerializationLength_function_type(&::ompl::control::ControlSpace::getSerializationLength)
                , default_getSerializationLength_function_type(&ControlSpace_wrapper::default_getSerializationLength) );
        
        }
        { //::ompl::control::ControlSpace::getStateSpace
        
            typedef ::ompl::base::StateSpacePtr const & ( ::ompl::control::ControlSpace::*getStateSpace_function_type)(  ) const;
            
            ControlSpace_exposer.def( 
                "getStateSpace"
                , getStateSpace_function_type( &::ompl::control::ControlSpace::getStateSpace )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::control::ControlSpace::getType
        
            typedef int ( ::ompl::control::ControlSpace::*getType_function_type)(  ) const;
            
            ControlSpace_exposer.def( 
                "getType"
                , getType_function_type( &::ompl::control::ControlSpace::getType ) );
        
        }
        { //::ompl::control::ControlSpace::isCompound
        
            typedef bool ( ::ompl::control::ControlSpace::*isCompound_function_type)(  ) const;
            typedef bool ( ControlSpace_wrapper::*default_isCompound_function_type)(  ) const;
            
            ControlSpace_exposer.def( 
                "isCompound"
                , isCompound_function_type(&::ompl::control::ControlSpace::isCompound)
                , default_isCompound_function_type(&ControlSpace_wrapper::default_isCompound) );
        
        }
        { //::ompl::control::ControlSpace::nullControl
        
            typedef void ( ::ompl::control::ControlSpace::*nullControl_function_type)( ::ompl::control::Control * ) const;
            
            ControlSpace_exposer.def( 
                "nullControl"
                , bp::pure_virtual( nullControl_function_type(&::ompl::control::ControlSpace::nullControl) )
                , ( bp::arg("control") ) );
        
        }
        { //::ompl::control::ControlSpace::serialize
        
            typedef void ( ::ompl::control::ControlSpace::*serialize_function_type)( void *,::ompl::control::Control const * ) const;
            typedef void ( ControlSpace_wrapper::*default_serialize_function_type)( void *,::ompl::control::Control const * ) const;
            
            ControlSpace_exposer.def( 
                "serialize"
                , serialize_function_type(&::ompl::control::ControlSpace::serialize)
                , default_serialize_function_type(&ControlSpace_wrapper::default_serialize)
                , ( bp::arg("serialization"), bp::arg("ctrl") ) );
        
        }
        { //::ompl::control::ControlSpace::setControlSamplerAllocator
        
            typedef void ( ::ompl::control::ControlSpace::*setControlSamplerAllocator_function_type)( ::ompl::control::ControlSamplerAllocator const & ) ;
            
            ControlSpace_exposer.def( 
                "setControlSamplerAllocator"
                , setControlSamplerAllocator_function_type( &::ompl::control::ControlSpace::setControlSamplerAllocator )
                , ( bp::arg("csa") ) );
        
        }
        { //::ompl::control::ControlSpace::setName
        
            typedef void ( ::ompl::control::ControlSpace::*setName_function_type)( ::std::string const & ) ;
            
            ControlSpace_exposer.def( 
                "setName"
                , setName_function_type( &::ompl::control::ControlSpace::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::ompl::control::ControlSpace::setup
        
            typedef void ( ::ompl::control::ControlSpace::*setup_function_type)(  ) ;
            typedef void ( ControlSpace_wrapper::*default_setup_function_type)(  ) ;
            
            ControlSpace_exposer.def( 
                "setup"
                , setup_function_type(&::ompl::control::ControlSpace::setup)
                , default_setup_function_type(&ControlSpace_wrapper::default_setup) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< ompl::control::ControlSpace > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::control::RealVectorControlSpace >, boost::shared_ptr< ompl::control::ControlSpace > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::control::CompoundControlSpace >, boost::shared_ptr< ompl::control::ControlSpace > >();
        bp::implicitly_convertible< boost::shared_ptr< ompl::control::DiscreteControlSpace >, boost::shared_ptr< ompl::control::ControlSpace > >();
        ControlSpace_exposer.def("settings", &__printSettings);
        ControlSpace_exposer.def("string", &__printControl);
    }

}
